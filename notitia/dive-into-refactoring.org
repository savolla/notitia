#+TITLE: Dive Into Refactoring
#+STARTUP: overview

* Bölüm 1 : Code Smells
** Bloaters
*** uzun methodlar
+ küçük methodlarla donatılan küçük classlar uzun yaşar
+ uzun method, istenmeyen _tekrar eden_ kodu içinde saklar
+ methodları ayrıştırmak demek, daha fazla method ve class oluşturmak demektir. bu ilk bakışta karmaşaya sebebiyet veren bir durum olarak görülebilir ancak tam tersidir
+ çok method demek çok *jmp* instructionı demek. performansı kötü etkiler ama farkına bile varamayacak kadar
**** belirtiler
- genel olarak 10 satırdan daha fazla olan metodlar bu gruba girer
**** çözüm
- kod aralarında *yorumlar* bu, methodun ayrıştırılabileceğini gösteren bir ipucudur
- yorum satırları genelde bize yapılan işi anlatmaya çalışır. bu yapılan işe _en anlamlı bir isim bul_ ve yeni methodun adı bu olsun
- if-else'ler varsa hemen ayrı bir methoda aktar ve methodun adını *isA* , *isB* gibi yap
- aynı şekilde döngüler varsa da hemen ayrı bir methoda aktar
- eğer method parametreleri ve lokal değişkenler metodun ayrıştırılmasına müdahale ediyorlarsa o zaman şu refaktoring technique'lerini kullan;
  1. Replace Remp with Query
  2. Introduce Parameter Object
  3. Preserve Whole Object
*** uzun classlar
+ kendine verilen işten fazlasını yapan sınıflardır
+ sınıflar ilk etapta küçük başlarlar ancak zaman içinde yazılımın gelişmesiyle büyütler
+ büyük sınıflar, yazılımcıda *cognitive load*'a sebep olur
**** belirtiler
- çok _field_ ve _methodu_ olan sınıflar
**** çözüm
- önce methodları küçült. methodlar küçüldükçe hangi classlara ait olabilecekleri yavaş yavaş ortaya çıkar. bu olduğunda sınıf da istemsizce parçalara ayrılır
*** primitive obsession
- primitive tipler genelde gerçek tipleri simüle etmek için varlardır. gerçek tipler yerine kullanılmaları profesyoel alamda uygun değildir. onun yerine bir struct ya da sınıf oluşturmak daha profesyoneldir
- bu sorun düzeltildiği anda tipler arası karmaşa ortadan kalkmış olur ve özellikle method parametrelerinin aslında ne olduğuna dair iyi bir fikir oluşacağı için kodun okunurluğu artırılmış olur
**** belirtiler
- primitive tiplerin (int, string, double gibi), basit işler için var olabilecek tiplerin yerine kullanılması. örneğin;
  1. para birimi yerine *double*
  2. özel stringler (yorum, telefon numarası gibi) yerine *string*
- _global sabitlerin_ kullanılması
**** sebepler
- bazen yazılımcılar, örneğin bir para birimini ifade etmek için ayrı bir class/struct oluşturmak yerine kolaya kaçıp direk *double* primitive tipi kullanırlar
**** çözüm
- primitive tipler yerine objeler kullanın;
  #+begin_src c++
  double money;
  #+end_src
  yerine =Money= class/struct'ı oluşturun
  #+begin_src c++
  Money money;
  #+end_src
- bir çok primitive field'dan oluşan sınıfınız varsa (boy, para, kuruş gibi) bu tiplere uygun birer struct oluşturmak hem kodun okunurluğunu kolaylaştırır hem de kötü kokuları giderir
- primitive obsession ile savaşmada kullanılan refactoring teknikleri;
  1. Replace Data Value with Object
  2. Introduce Parameter Object
  3. Preserve Whole Object
  4. Replace Type Code with Class
  5. Replace Type Code with Subclass
  6. Replace Type Code with State/Strategy
  7. Replace Array with Object

*** çok parametreli methodlar
**** sebepler
- bir method içinde birden fazla işlem yapılıyorsa her işlem için dışarıdan ayrıca parametre alınması gerekebilir. bu da method parametrelerinin artması anlamına gelir
**** belirtiler
- 4 parametreden fazla olan fonksiyon/metodlar
**** sonuçlar
- eğer parametreler genelde primitive tipler yerine class objeleri ise, sınıflar birbirine bağımlı hele gelir;
  #+begin_src cpp
  Person bloatedMethod( Money m, Salary s, Car c, Phone p );
  #+end_src
  yukarıdaki sınıf, diğer 5 sınıfa bağımlı hale geldi
**** çözüm
- uzun parametre alan bir method görüyorsak sorun uzun method olabilir
- method ayrışmasına rağmen hala uzun bir parametre listesi almaya devam ediyorsa, bu parametreleri içine alan _başka bir sınıf_ oluşturabiliriz. Ardından, methodumuza da bu yeni oluşan sınıfın objesini verebiliriz. UML örneği aşağıda verilmiştir
  - kötü kokan UML
    #+begin_src plantuml results: output
    skinparam linetype ortho
    class A {}
    class B {}
    class C {}
    class D {}
    class E {}
    class User {
       method(A,B,C,D,E)
    }
    User -up-> A
    User -up-> B
    User -up-> C
    User -up-> D
    User -up-> E
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-WSBkMf/plantuml-o74lIv.png]]

  - olması gereken
    #+begin_src plantuml results: output
    skinparam linetype ortho
    class A {}
    class B {}
    class C {}
    class D {}
    class E {}
    class P {
        A a
        B b
        C c
        D d
        E e
    }

    class User {
       method(P)
    }
    User -up-> P
    P -up-> A
    P -up-> B
    P -up-> C
    P -up-> D
    P -up-> E
    #+end_src

    #+RESULTS:
    [[file:/tmp/babel-WSBkMf/plantuml-SHJJia.png]]
- bu sorunu çözmede kullanılan refactoring teknikler;
  1. Replace Parameter with Method Call
  2. Preserve Whole Object
  3. Introduce Parameter Object

**** uyarılar
- sınıflar arası istenmeyen oranda bir *dependency* olacaksa methodları olduğu gibi bırakın (yukarıda verilen UML buna dahil. sadece örnek olsun diye vermiştim)
