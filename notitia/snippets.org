#+TITLE: Snippets
#+AUTHOR: savolla
#+DESCRIPTION: functions that help

* c
** extract information from a network packet

#+begin_src c
// network packet union made with bit-fields. since it is a union, bit extrction is done automtically
typedef union {
  uint32_t bitStream;

  struct {
    uint32_t crc : 2;
    uint32_t status : 1;
    uint32_t payload : 12;
    uint32_t bat : 3;
    uint32_t sensor : 3;
    uint32_t longAddr : 8;
    uint32_t shortAddr : 2;
    uint32_t addrMode : 1;
  } field;

} Packet;

int main(void) {

    Packet pkg = (Packet)0xffffffff;

    printf("crc      : %d\n", pkg.field.crc);
    printf("status   : %d\n", pkg.field.status);
    printf("payload  : %d\n", pkg.field.payload);
    printf("bat      : %d\n", pkg.field.bat);
    printf("sensor   : %d\n", pkg.field.sensor);
    printf("longAddr : %d\n", pkg.field.longAddr);
    printf("addrMode : %d\n", pkg.field.addrMode);
    printf("size : %lu\n", sizeof(pkg));
    printf("%x\n", pkg.bitStream);

    return 0;
}
#+end_src
** state machine implementation

[[file:./images/screenshot-136.png]]

#+begin_src c
// @author: savolla
// @date: Fri Apr 16 22:42:49 2021
// @desc: My first State Machine implementation in C

#include <stdio.h>

char password;
void A(void);
void B(void);
void C(void);
void D(void);
void (*state)();

int main(void) {
  state = A; // init state
  while (state != D) {
    state();
  }
  printf("accepted!");
  return 0;
}

// deffinitions
void A() {
    scanf("%c", &password);
    if (password == '0') {
       state = B;
    }
    else if (password == '1') {
        state = A;
    }
}

void B() {
    scanf("%c", &password);
    if (password == '0') {
       state = B;
    }
    else if(password == '1') {
        state = C;
    }
}

void C() {
    scanf("%c", &password);
    if (password == '0') {
       state = B;
    }
    else if(password == '1') {
        state = D;
    }
}

void D() {
}
#+end_src

* python
** get nth digit of a number

#+begin_src python
int getDigit( int number, int digit ) {
    return (number % (int)pow( 10, digit ) / (int)pow( 10, (digit -1 )));
}
#+end_src

