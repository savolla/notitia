#+TITLE: Snippets
#+AUTHOR: savolla
#+DESCRIPTION: functions that help

#+begin_src c
#include <stdio.h>
#include <stdint.h>


int main(void) {

    uintmax_t total = 5;

    printf("%zd", factorial(20));

    return 0;
}

#+end_src

* c
** extract information from a network packet

#+begin_src c
// network packet union made with bit-fields. since it is a union, bit extrction is done automtically
typedef union {
uint32_t bitStream;

struct {
uint32_t crc : 2;
uint32_t status : 1;
uint32_t payload : 12;
uint32_t bat : 3;
uint32_t sensor : 3;
uint32_t longAddr : 8;
uint32_t shortAddr : 2;
uint32_t addrMode : 1;
} field;

} Packet;

int main(void) {

Packet pkg = (Packet)0xffffffff;

printf("crc      : %d\n", pkg.field.crc);
printf("status   : %d\n", pkg.field.status);
printf("payload  : %d\n", pkg.field.payload);
printf("bat      : %d\n", pkg.field.bat);
printf("sensor   : %d\n", pkg.field.sensor);
printf("longAddr : %d\n", pkg.field.longAddr);
printf("addrMode : %d\n", pkg.field.addrMode);
printf("size : %lu\n", sizeof(pkg));
printf("%x\n", pkg.bitStream);

return 0;
}
#+end_src
** socket programming
*** includes needed for socket programming

#+begin_src c
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#+end_src

*** create socket

#+begin_src c
//                       Internet Socket      means use TCP
//                             /                   /
int network_socket = socket(AF_INET, SOCK_STREAM, 0);
//                                         \
//                                    Type of Socket
//                                        (TCP)
#+end_src
*** specify the address for socket

#+begin_src c
struct socket_in server_address;
server_address.sin_family = AF_INET;
server_address.sin_port = htons(9002);
server_address.sin_addr.s_addr = 0.0.0.0;
#+end_src
** count digits of a number
#+begin_src c
int32_t countDigits( intmax_t number ) {
    uint32_t digits = 0;
    do {
        number /= 10;
        digits++;
    } while ( number != 0 );
    return digits;
}
#+end_src
** factorial
#+begin_src c
uint64_t factorial( uint8_t number ) {
    if ( number == 1 || number == 0 ) {
        return 1;
    }
    return number * factorial( number -1 );
}
#+end_src

** state machine implementation

[[file:./images/screenshot-136.png]]

#+begin_src c
// @author: savolla
// @date: Fri Apr 16 22:42:49 2021
// @desc: My first State Machine implementation in C

#include <stdio.h>

char password;
void A(void);
void B(void);
void C(void);
void D(void);
void (*state)();

int main(void) {
state = A; // init state
while (state != D) {
state();
}
printf("accepted!");
return 0;
}

// deffinitions
void A() {
scanf("%c", &password);
if (password == '0') {
    state = B;
}
else if (password == '1') {
    state = A;
}
}

void B() {
scanf("%c", &password);
if (password == '0') {
    state = B;
}
else if(password == '1') {
    state = C;
}
}

void C() {
scanf("%c", &password);
if (password == '0') {
    state = B;
}
else if(password == '1') {
    state = D;
}
}

void D() {
}
#+end_src
* c++
** random number generation

#+begin_src cpp
#include <random>
#include <iostream>
using namespace std;

int generateRandomInteger( int min, int max ) {
    random_device rd;
    mt19937 rng(rd());
    uniform_int_distribution<int> uni( min, max);
    return uni(rng);
}
#+end_src
** using vectors

#+begin_src cpp
#include <vector>
#include <iostream>
using namespace std;

int main(void) {
    vector< int > v = {1,2,3,4};

    cout << v[2] << endl;
    return 0;
}

#+end_src

* python
** get nth digit of a number

#+begin_src python
int getDigit( int number, int digit ) {
return (number % (int)pow( 10, digit ) / (int)pow( 10, (digit -1 )));
}
#+end_src

