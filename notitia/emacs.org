#+TITLE: Emacs

* Facts
* Modes
** Org Mode
*** facts
+ *radio link*'ler tez ve referans dökümanları yazımında çok etkilidir | [[radio link]]
*** concept / term
**** radio link
mesela metin içinde *newton* geçen her yere wikipedia linkini eklemek istiyorsun, o zaman bunu kullanırsın. kullanıcı nerede newton görse, artık tıklanabilir bir link görür. [[radio link oluşturma][örnek]]
*** how to
**** döküman içi hızlı arama
Doom için : =SPC s b=
1. aranmak istenen şeyi yaz
2. =Enter=
**** radio link oluşturma
1. sayfanın herhangi bir yerine <<<>>> içine kelimeyi yaz

[[radio link]] nedir?

**** external sitelere link oluşturma?
1. use [[][]] structure
2. enter *url* in first bracket
3. enter *alias* in second bracket
**** show only headers on startup
add =#+STARTUP: overview= to the beginning of the file
**** add footnotes to the bottom
1. create a heading in org mode
2. add [fn::footnote content] after the heading. for example;
***** Heading [fn::footnote content]

**** convert org file to html from outside emacs
1. you need to open emacs as a daemon to make this work
   #+begin_src sh
   emacs --daemon
   #+end_src
2. use *emacsclient -e* command to use emacs comands outside emacs.
   #+begin_src sh
   emacsclient -e "(progn (find-file \"~/txt/notitia.org\") (org-html-export-to-html) (kill-buffer))"
   #+end_src
you can also use every other command this way.
**** enable line numbers in source blocks

+ this will export with line numbers starting from 1

#+begin_src python -n
while True:
    print("*****")
    print("Emacs is LOVE")
    print("*****")
#+end_src

+ line numbers will start from 20

#+begin_src python -n 20
while True:
    print("*****")
    print("Emacs is LOVE")
    print("*****")
#+end_src
**** disable table of contects

#+begin_src org
#+OPTIONS: toc:nil
#+end_src

**** auto generate table of contents
1. create a header on top of the org document
2. add :toc: word after header name
3. save the file
internal links will be generated
**** write your configs in org-mode

This is useful when your config files are huge and messy. this way of writing config files will help you to organize the code and make it more understandable. you can also create code documentations with org-mode. I'm going to use i3 config as an example. (ignore periods in code blocks) so here are the steps.

1. create a =README.org= next to your config file

2. add the title like on top of your file;
   #+begin_src org
   .#+TITLE: i3 Cofiguration
   #+end_src

3. add this property to write code blocks to the separate file (config)
   #+begin_src org
   .#+TITLE: i3 Cofiguration
   .#+PROPERTY: header-args :tangle config
   #+end_src

4. =SPC : org-babel-tangle= this will write your source blocks to the config

after that you will never gonna edit i3 config file again. all you is to come back to this README.org file and add some code blocks here

**** recude size of an image

1. import an image
2. write =#+ATTR_HTML::width 500= on top of the image
3. without attribute;
   [[file:./images/screenshot-74.png]]
4. with attribute
   #+ATTR_HTML::width 500
   [[file:./images/screenshot-74.png]]

*** problems and solutions
* Term
* Tutorials
* How To
** unfreez the emacs

sometimes emacs just freezes up. do the following

#+begin_src sh
pkill -SIGUSR2 emacs
#+end_src

* Problems & Solutions
* Configuration Frameworks
** Doom Emacs
*** tips
+ great modules to use:
1. *pass* for password storing
2. *irc*
3. *org-roam* better note taking
4. *magit* awesome git tool
5. *deft* browse the notes
*** how to :doom:emacs:howto:
**** create new keybinding for whichkey?
#+BEGIN_SRC elisp
(map! :leader :desc "toggle undo tree" "- c u" #'undo-tree-visualize )
#+END_SRC
**** do password management with pass
1. install pass on the system
#+BEGIN_SRC sh
sudo pacman -S pass
#+END_SRC
2. uncomment *:tools pass* in [[~/.doom.d/init.el][init.el]]
3. synchronize the doom
#+BEGIN_SRC sh
~/.doom.d/bin/doom sync
#+END_SRC
4. generate [[gpg]]
#+BEGIN_SRC sh
gpg --full-gen-key
#+END_SRC
5. generate your password directory
use email address that you entered while [[generate a gpg key][generating]] the gpg.
#+BEGIN_SRC sh
pass init $GPG_EMAIL
#+END_SRC
6. git integration for your passwords
this is a cool feature. you never loose your passwords even if you delete it!
#+BEGIN_SRC sh
pass git init
#+END_SRC
7. now fire up *doom*
8. open pass
SPC : pass
**** fast commit!
=SPC g g S c c "commit desc" C-c C-c q=
**** see the value of a variable?
1. =SPC ;=
2. type the variable name
3. =RET=
**** disable line wrapping
=SPC w t=
**** search usage of a function online
1. cursor over the *function*
2. =SPC s O=
3. =github RET=
4. add the extension of your programming language at the end of the promt;
example: /org-beamer-theme extension:el/
5. =RET=
**** convert org file to html on command line
1. start emacs daemon
   #+begin_src sh
   emacs --daemon
   #+end_src
**** how to block with doom
read [[https://ox-hugo.scripter.co/][this]]

**** add and delete projects in treemacs
***** I. way
this way will only affect the current workspace
=C-c C-p a=               add project to treemacs
=C-c C-p d=               remove project from treemacs
***** II. way
this will globally add your projects
1. =SPC :=
2. =treemacs-edit-workspaces=
3. add your project under *Default* like this;
   #+begin_src org
   ,** YOUR_PROJECT_NAME
        - path :: PATH_TO_PROJECT
   #+end_src
4. finish editing by doing =treemacs-finish-edit=

**** effective coding with doom emacs :tools:doom:emacs:programming:howto:
:PROPERTIES:
:EXPORT_FILE_NAME: programming-in-doom-emacs
:EXPORT_TITLE: programming in doom emacs
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
This is how I use [[https://github.com/hlissner/doom-emacs][doom emacs]] for daily coding. Doom and it's packages are working together to make developer's life easy. Here I made a complete list for you guys. This is a *step by step* guide to do coding on doom emacs. By the way when I say things like =C-c C-p= it means =CTRL + c + p=
***** before we start
to make things work enable *specified* modules in your *init* file
1. do =SPC f p= and select *init.el*
2. enable(uncomment) the following modules;
   - magit
   - treemacs
   - lookup
3. reload doom by doing =SPC h r r=
***** cloning projects
1. =SPC g C= to run magit clone
2. press =u= to specify repo url
3. paste your url with =Ctrl Shift v= (for linux)
4. specify the path for the repo
5. press =y= to make *origin* default branch
6. wait until the cloning is finished
7. press =q= to quit
***** adding projects
1. =SPC o p= to open *treemacs*
2. =C-c C-p a=
3. specify the *path* for your porject
4. now you see your project directory appeared in your *treemacs* menu
***** navigate files
1. =SPC SPC= brings menu with *all files* under your project root
2. type any keyword you want
you don't have to type entire file name. menu items will be reduced once you type some characters.
***** find symbols (method, variable, objects)
1. press =SPC /=
2. type your keyword or /function/, /variable/, /class/ or /struct/ names.
3. once you enter the keyword, doom will jump to that file instantly
4. =C-o= to go *back*
5. =C-i= to go *forward*
***** recent files
if you work on other things other than your project, for example editin some config files while coding etc, then you probably type the *file path* every single time to navigate to that config file. doom solves it with
1. =SPC f r= brings a menu or recently visited files
2. find and navigate
3. =C-o= to go *back*
4. =C-i= to go *forward*
***** lookup code
sometimes we can't find a good documentation on a method/module when coding. the best way to understand something is to looking at examples
1. navigate your cursor on method, module you want to understand
2. do =SCP s o=
3. choose *Github*
4. before hitting =RET= you can optionally specify the following items for more accurate results;
   - filename:
   - path:
   - extension:
here is an example for searching *printf* on github
#+begin_quote
printf extension:.c filename:main.c path:src
#+end_quote
***** find and replace projectwise
you can change a variable or method name projectwise. this is usefull in *code refactoring*. here is how to do that in doom;
1. =SPC /=
2. enter the *symbol name*. "emacs" in this example
3. =C-c C-e=
4. =:%s/emacs/doom/g=
5. =RET=
6. =Z Z=
there must be an easier way..

**** launch without X
#+BEGIN_SRC bash
emacs -nw
#+END_SRC
*** cheat sheet :doom:emacs:cheatsheet:

=SPC - t t=                                 toggle tabs
=SPC - t l=                                 list tabs
=SPC - t n=                                 next tab
=SPC - t p=                                 previous tab
=SPC - t o=                                 create new tab
=SPC - t k=                                 kill tab

=SPC - c t=                                 open tagbar
=SPC - c g=                                 run gdb
=SPC - c u=                                 open undo tree
=SPC t z=                                   toggle zen mode
=SPC /=                                     ag
=SPC f r=                                   fast navigate recent files
=SPC g g S c c "msg" C-c C-c q=             fast commit
=SPC / foo C-c C-e :%s/foo/bar/g RET Z Z=   find foo and replace with bar in project
=SPC X t=                                   enter a new todo
=SPC w t=                                   disable line wrapping

=SPC n r t a=                               add roam tag
=SPC n r t d=                               delete roam tag
=SPC n r G=                                 start [[http://localhost:8080][graph server]]
=SPC SPC=                                   find file in project tree

=C-c C-p a=                                 add project to treemacs
=C-c C-p d=                                 remove project from treemacs

=SPC s f=                                   locate file in system
=SPC s b=                                   search inside buffer (usefull for searching notes)

**** org mode :org:cheatsheet:
=SPC m f=                                   insert footnotes in org mode
=SPC m q=                                   insert tags quickly
=SPC m p [u|d]=                             increase or decrease TODO priority


*** problems & solutions
**** with-editor.elc failed to provide feature ‘with-editor’
#+begin_src sh
rm -rf ~/.emacs.d/.local/straight/build*/with-editor && doom sync
#+end_src
**** omnisharp sever is not installed
1. =SPC :=
2. =omnisharp-install-server=
3. =RET=
**** 'Re-entering top level after C stack overflow'
delete all undo-tree cache files in =~/.emacs.d/.local/cache/undo-tree=

** Spacemacs
*** key bindings

#+BEGIN_SRC sh
  spc f t   # toggle treemacs
  spc w c c # distraction free editing
  spc l o   # switch to custom layout
  spc h spc # lookup documentation for a layer
  spc j j   # easy motion on emacs. also can be used with commands
  spc j i   # show semantic tags in code. functions, dependencies etc.
  spc j l   # jump to line. I think it's more convinient that spc jj
  spc j q   # navigate on a variable and use this to see other occurencies
  spc m g g # go to deffinition
  C-o       # jump back through the window traverse history
  C-i       # jump forward through the window traverse history
  spc x d w # delete trailing white spaces
#+END_SRC

*** how to
  + create a custom layout
    put the following under *defun dotspacemacs/user-config ()*. The following code
    is just an example but you can find your way from here

    #+BEGIN_SRC emacs-lisp
      (spacemacs|define-custom-layout "@coding"
        :binding "d"
        :body
        (helm-projectile-switch-project)
        (split-window-right-and-focus)
        (split-window-below-and-focus)
        (multi-term) ;; launch shell
        (treemacs-select-window) ;; fire up file manager
        )
    #+END_SRC

    now restart emacs and press *SPC l o* then select *@coding*

  + see instant documentation about a function
    if you want to know what a specific function does just navigate your cursor on it
    and press *Shift K*

*** info
*** tips
