#+TITLE: Reading Lists

* Reading List to Become a Professional
** Job Interview Prep
1. Cracking the Coding Interview: 189 Programming Questions and Solutions
2. Programming Interviews Exposed: Coding Your Way Through the Interview
3. Introduction to Algorithms
4. The Algorithm Design Manual
5. Effective Java
6. Concurrent Programming in Java: Design Principles and Pattern
7. Modern Operating Systems
8. Programming Pearls
9. Discrete Mathematics for Computer Scientists
** Junior Software Engineer Reading List
*** Read This First
1. Pragmatic Thinking and Learning: Refactor Your Wetware
*** Fundementals
1. Code Complete 2
2. Software Estimation: Demystifying the Black Art
3. Software Engineering: A Practitioner's Approach
4. Refactoring: Improving the Design of Existing Code
5. Coder to Developer: Tools and Strategies for Delivering Your Software
6. Perfect Software: And Other Illusions about Testing
7. Getting Real: The Smarter, Faster, Easier Way to Build a Successful Web Application
8. Understanding Professional Software Environments
9. Agile Software Development: The Cooperative Game
10. Software Project Survival Guide
11. The Best Software Writing I: Selected and Introduced by Joel Spolsky
12. Debugging the Development Process: Practical Strategies for Staying Focused, Hitting Ship Dates, and Building Solid Teams
13. Rapid Development: Taming Wild Software Schedules
14. Peopleware: Productive Projects and Teams
*** Mentality
1. Slack: Getting Past Burnout, Busywork, and the Myth of Total Efficiency
2. Against Method
3. The Passionate Programmer: Creating a Remarkable Career in Software Development

*** History
1. The Mythical Man-Month: Essays on Software Engineering
2. Computing Calamities: Lessons Learned from Products, Projects, and Companies That Failed
3. The Deadline: A Novel About Project Management

** Mid Level Software Engineer Reading List
*** Read This First
1. Personal Development for Smart People: The Conscious Pursuit of Personal Growth

*** Fundementals
1. The Clean Coder: A Code of Conduct for Professional Programmers
2. Clean Code: A Handbook of Agile Software Craftsmanship
3. Solid Code
4. Code Craft: The Practice of Writing Excellent Code
5. Software Craftsmanship: The New Imperative
6. Writing Solid Code

*** Software Design
1. Head First Design Patterns: A Brain-Friendly Guide
2. Design Patterns: Elements of Reusable Object-Oriented Software
3. Domain-Driven Design: Tackling Complexity in the Heart of Software
4. Domain-Driven Design Distilled
5. Design Patterns Explained: A New Perspective on Object-Oriented Design
6. Design Patterns in C# - Even though this is specific to C# the pattern can be used in any OO language.
7. Refactoring to Patterns

*** Software Engineering Skill Sets
1. Building Microservices: Designing Fine-Grained Systems
2. Software Factories: Assembling Applications with Patterns, Models, Frameworks, and Tools
3. NoEstimates: How To Measure Project Progress Without Estimating
4. Object-Oriented Software Construction
5. The Art of Software Testing
6. Release It!: Design and Deploy Production-Ready Software
7. Working Effectively with Legacy Code
8. Test Driven Development: By Example

*** Databases
1. Database System Concepts
2. Database Management Systems
3. Foundation for Object / Relational Databases: The Third Manifesto
4. Refactoring Databases: Evolutionary Database Design
5. Data Access Patterns: Database Interactions in Object-Oriented Applications

*** User Experience
1. Don't Make Me Think: A Common Sense Approach to Web Usability
2. The Design of Everyday Things
3. Programming Collective Intelligence: Building Smart Web 2.0 Applications
4. User Interface Design for Programmers
5. GUI Bloopers 2.0: Common User Interface Design Don'ts and Dos

*** Mentality
1. jThe Productive Programmer
2. jExtreme Programming Explained: Embrace Change
3. jCoders at Work: Reflections on the Craft of Programming
4. jFacts and Fallacies of Software Engineering

*** History
1. Dreaming in Code: Two Dozen Programmers, Three Years, 4,732 Bugs, and One Quest for Transcendent Software
2. New Turning Omnibus: 66 Excursions in Computer Science
3. Hacker's Delight
4. The Alchemist
5. Masterminds of Programming: Conversations with the Creators of Major Programming Languages
6. The Information: A History, A Theory, A Flood

*** Specialist Skills
1. Peter Norton's Assembly Language Book for the IBM PC
2. Expert C Programming: Deep C Secrets
3. Enough Rope to Shoot Yourself in the Foot: Rules for C and C++ Programming
4. The C++ Programming Language
5. Effective C++: 55 Specific Ways to Improve Your Programs and Designs
6. More Effective C++: 35 New Ways to Improve Your Programs and Designs
7. More Effective C#: 50 Specific Ways to Improve Your C#
8. CLR via C#
9. Mr. Bunny's Big Cup o' Java
10. Thinking in Java
11. JUnit in Action
12. Functional Programming in Scala
13. The Art of Prolog: Advanced Programming Techniques
14. The Craft of Prolog
15. Programming Perl: Unmatched Power for Text Processing and Scripting
16. Dive into Python 3

** Senior Level Software Engineer Reading List
*** Read This First
1. Mastery: The Keys to Success and Long-Term Fulfillment

*** Fundamentals
1. Patterns of Enterprise Application Architecture
2. Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions
3. Enterprise Patterns and MDA: Building Better Software with Archetype Patterns and UML
4. Systemantics: How Systems Work and Especially How They Fail
5. Rework
6. Writing Secure Code
7. Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries

*** Development Theory
1. Growing Object-Oriented Software, Guided by Tests
2. Object-Oriented Analysis and Design with Applications
3. Introduction to Functional Programming
4. Design Concepts in Programming Languages
5. Code Reading: The Open Source Perspective
6. Modern Operating Systems
7. Extreme Programming Explained: Embrace Change
8. The Elements of Computing Systems: Building a Modern Computer from First Principles
9. Code: The Hidden Language of Computer Hardware and Software

*** Philosophy of Programming
1. Making Software: What Really Works, and Why We Believe It
2. Beautiful Code: Leading Programmers Explain How They Think
3. The Elements of Programming Style
4. A Discipline of Programming
5. The Practice of Programming
6. Computer Systems: A Programmer's Perspective
7. Object Thinking
8. How to Solve It by Computer
9. 97 Things Every Programmer Should Know: Collective Wisdom from the Experts

*** Mentality
1. Hackers and Painters: Big Ideas from the Computer Age
2. The Intentional Stance
3. Things That Make Us Smart: Defending Human Attributes In The Age Of The Machine
4. The Back of the Napkin: Solving Problems and Selling Ideas with Pictures
5. The Timeless Way of Building
6. The Soul Of A New Machine
7. WIZARDRY COMPILED
8. YOUTH
9. Understanding Comics: The Invisible Art

*** Software Engineering Skill Sets
1. Software Tools
2. UML Distilled: A Brief Guide to the Standard Object Modeling Language
3. Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development
4. Practical Parallel Programming
5. Past, Present, Parallel: A Survey of Available Parallel Computer Systems
6. Mastering Regular Expressions
7. Compilers: Principles, Techniques, and Tools
8. Computer Graphics: Principles and Practice in C
9. Michael Abrash's Graphics Programming Black Book
10. The Art of Deception: Controlling the Human Element of Security
11. SOA in Practice: The Art of Distributed System Design
12. Data Mining: Practical Machine Learning Tools and Techniques
13. Data Crunching: Solve Everyday Problems Using Java, Python, and more.

*** Design
1. The Psychology Of Everyday Things
2. About Face 3: The Essentials of Interaction Design
3. Design for Hackers: Reverse Engineering Beauty
4. The Non-Designer's Design Book

*** History
1. Micro-ISV: From Vision to Reality
2. Death March
3. Showstopper! the Breakneck Race to Create Windows NT and the Next Generation at Microsoft
4. The PayPal Wars: Battles with eBay, the Media, the Mafia, and the Rest of Planet Earth
5. The Business of Software: What Every Manager, Programmer, and Entrepreneur Must Know to Thrive and Survive in Good Times and Bad
6. In the Beginning...was the Command Line

*** Specialist Skills
1. The Art of UNIX Programming
2. Advanced Programming in the UNIX Environment
3. Programming Windows
4. Cocoa Programming for Mac OS X
5. Starting Forth: An Introduction to the Forth Language and Operating System for Beginners and Professionals
6. lex & yacc
7. The TCP/IP Guide: A Comprehensive, Illustrated Internet Protocols Reference
8. C Programming Language
9. No Bugs!: Delivering Error Free Code in C and C++
10. Modern C++ Design: Generic Programming and Design Patterns Applied
11. Agile Principles, Patterns, and Practices in C#
12. Pragmatic Unit Testing in C# with NUnit

** DevOps Reading List
1. Time Management for System Administrators: Stop Working Late and Start Working Smart
2. The Practice of Cloud System Administration: DevOps and SRE Practices for Web Services
3. The Practice of System and Network Administration: DevOps and other Best Practices for Enterprise IT
4. Effective DevOps: Building a Culture of Collaboration, Affinity, and Tooling at Scale
5. DevOps: A Software Architect's Perspective
6. The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations
7. Site Reliability Engineering: How Google Runs Production Systems
8. Cloud Native Java: Designing Resilient Systems with Spring Boot, Spring Cloud, and Cloud Foundry
9. Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation
10. Migrating Large-Scale Services to the Cloud

** Entrepreneur Reading List
1. Disrupted: My Misadventure in the Start-Up Bubble
2. The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win
3. The E-Myth Revisited: Why Most Small Businesses Don't Work and What to Do About It
4. The Art of the Start: The Time-Tested, Battle-Hardened Guide for Anyone Starting Anything
5. The Four Steps to the Epiphany: Successful Strategies for Products that Win
6. Permission Marketing: Turning Strangers into Friends and Friends into Customers
7. Ikigai
8. Reality Check: The Irreverent Guide to Outsmarting, Outmanaging, and Outmarketing Your Competition
9. Bootstrap: Lessons Learned Building a Successful Company from Scratch
10. The Marketing Gurus: Lessons from the Best Marketing Books of All Time
11. Content Rich: Writing Your Way to Wealth on the Web
12. The Web Startup Success Guide
13. The Best of Guerrilla Marketing: Guerrilla Marketing Remix
14. From Program to Product: Turning Your Code into a Saleable Product
15. This Little Program Went to Market: Create, Deploy, Distribute, Market, and Sell Software and More on the Internet at Little or No Cost to You
16. The Secrets of Consulting: A Guide to Giving and Getting Advice Successfully
17. The Innovator's Solution: Creating and Sustaining Successful Growth
18. Startups Open Sourced: Stories to Inspire and Educate
19. In Search of Stupidity: Over Twenty Years of High Tech Marketing Disasters
20. Do More Faster: TechStars Lessons to Accelerate Your Startup
21. Content Rules: How to Create Killer Blogs, Podcasts, Videos, Ebooks, Webinars (and More) That Engage Customers and Ignite Your Business
22. Maximum Achievement: Strategies and Skills That Will Unlock Your Hidden Powers to Succeed
23. Founders at Work: Stories of Startups' Early Days
24. Blue Ocean Strategy: How to Create Uncontested Market Space and Make Competition Irrelevant
25. Eric Sink on the Business of Software
26. Words that Sell: More than 6000 Entries to Help You Promote Your Products, Services, and Ideas
27. Anything You Want
28. Crossing the Chasm: Marketing and Selling High-Tech Products to Mainstream Customers
29. The Innovator's Dilemma: The Revolutionary Book that Will Change the Way You Do Business
30. Tao Te Ching
31. Philip & Alex's Guide to Web Publishing
32. The Tao of Programming
33. Zen and the Art of Motorcycle Maintenance: An Inquiry into Values
34. The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity

** Computer Science Grad School Reading List
1. All the Mathematics You Missed: But Need to Know for Graduate School
2. Introductory Linear Algebra: An Applied First Course
3. Introduction to Probability
4. The Structure of Scientific Revolutions
5. Science in Action: How to Follow Scientists and Engineers Through Society
6. Proofs and Refutations: The Logic of Mathematical Discovery
7. What Is This Thing Called Science?
8. The Art of Computer Programming
9. The Little Schemer
10. The Seasoned Schemer
11. Data Structures Using C and C++
12. Algorithms + Data Structures = Programs
13. Structure and Interpretation of Computer Programs
14. Concepts, Techniques, and Models of Computer Programming
15. How to Design Programs: An Introduction to Programming and Computing
16. A Science of Operations: Machines, Logic and the Invention of Programming
17. Algorithms on Strings, Trees, and Sequences: Computer Science and Computational Biology
18. The Computational Beauty of Nature: Computer Explorations of Fractals, Chaos, Complex Systems, and Adaptation
19. The Annotated Turing: A Guided Tour Through Alan Turing's Historic Paper on Computability and the Turing Machine
20. Computability: An Introduction to Recursive Function Theory
21. How To Solve It: A New Aspect of Mathematical Method
22. Types and Programming Languages
23. Computer Algebra and Symbolic Computation: Elementary Algorithms
24. Computer Algebra and Symbolic Computation: Mathematical Methods
25. Commonsense Reasoning
26. Using Language
27. Computer Vision
28. Alice's Adventures in Wonderland
29. Gödel, Escher, Bach: An Eternal Golden Braid
