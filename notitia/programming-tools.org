#+TITLE: Programming Tools
#+STARTUP: overview

* Build
** make
*** one Makefile for everything :tools:make:programming:
:PROPERTIES:
:EXPORT_FILE_NAME: one-makefile-for-everything
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
here! you found it! this is one single Makefile that fits all projects with this file structure:

#+begin_src txt
project /
├── include
├── build
├── lib
├── obj
├── src
├── test
├── main.c
└── Makefile
#+end_src

#+BEGIN_SRC makefile
TARGET_EXEC ?= a.out

BUILD_DIR ?= ./build
SRC_DIRS ?= ./src

SRCS := $(shell find $(SRC_DIRS) -name *.cpp -or -name *.c -or -name *.s)
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)
DEPS := $(OBJS:.o=.d)

INC_DIRS := $(shell find $(SRC_DIRS) -type d)
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

CPPFLAGS ?= $(INC_FLAGS) -MMD -MP

$(BUILD_DIR)/$(TARGET_EXEC): $(OBJS)
$(CC) $(OBJS) -o $@ $(LDFLAGS)

# assembly
$(BUILD_DIR)/%.s.o: %.s
$(MKDIR_P) $(dir $@)
$(AS) $(ASFLAGS) -c $< -o $@

# c source
$(BUILD_DIR)/%.c.o: %.c
$(MKDIR_P) $(dir $@)
$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# c++ source
$(BUILD_DIR)/%.cpp.o: %.cpp
$(MKDIR_P) $(dir $@)
$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@


.PHONY: clean

clean:
$(RM) -r $(BUILD_DIR)

-include $(DEPS)

MKDIR_P ?= mkdir -p
#+END_SRC
* Version Control
** git
*** how to
**** undo the "git add"
#+begin_src sh
git reset $YOUR_FILE
#+end_src
**** control a repository from outside
1. use *--git-dir=* option
2. specify the *.git* folder of your project
   #+begin_src sh
   git --git-dir=$HOME/path/to/.git
   #+end_src
3. you can now issue normal git commands after that string like:
   #+begin_src sh
   git --git-dir=$HOME/path/to/.git add -u
   git --git-dir=$HOME/path/to/.git commit -m "initial"
   #+end_src
**** store your credentials for automatic pushes
#+begin_quote
this is not secure! your password and username will be stored inside *.git* directory in *planetext*. enyone on your PC will have access to them. you've been warned!
#+end_quote

1. go to your repository
   #+begin_src sh
   cd $YOUR_REPO
   #+end_src
2. make some changes
3. modify the *git config* for password and username storing
   #+begin_src sh
   git config --global credential.helper store
   #+end_src
4. commit and push your changes
   #+begin_src sh
   git commit -m "username and password adjustment"
   git push -u origin $YOUR_BRANCH
   #+end_src
5. now the git utility will ask you *username* and *password*. enter those and you are good to go

after this operation, git won't ask for username and password for this repository. this is not a global modification btw. you have to do this for every repo
**** switch to specific commit
useful if you want to go back to the last checkpoint in your project. let's say you commited your project when it was working without problems. you code a little bit more and bam.. it's not working now.. insted of fixing bugs, you might go back in git commit history
1. get the last commit's *id*
   #+begin_src sh
git log
   #+end_src
2. go back to last commit
   #+begin_src sh
git reset --hard $COMMIT_ID
   #+end_src
now all the local changes you made will be lost
** github
*** how to
**** search code in Github :howto:tools:git:
:PROPERTIES:
:EXPORT_FILE_NAME: search-code-in-github
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
1. for example I'm searching for "setq" keyword which exists in ".doom.d" directory, file is called "config.el" and is written in "Emacs Lisp" language
2. go to [[https://www.github.com/search][github search]]
3. search for the following string
   #+begin_src txt
setq extension:el path:.doom.d filename:config.el language:"Emacs Lisp" extension:.el
   #+end_src
* Compilers
** nasm
*** how to
**** make binary executable
#+BEGIN_SRC sh
nasm -f bin -o test <CODE>.asm #
#+END_SRC
**** make elf executable
#+BEGIN_SRC sh
nasm -f elf -o test <CODE>.asm #
#+END_SRC
** gcc
*** how to
**** save .i, .o and .s files while compiling
#+begin_src sh
gcc -save-temps -o your_program your_program.c
#+end_src
* Binary Analysis
** objdump
*** how to
**** display only executable sections
#+BEGIN_SRC sh
objdump -d <BINARY>
#+END_SRC
**** display all sections
#+BEGIN_SRC sh
objdump -D <BINARY>
#+END_SRC
**** display with source code
- this requires =-g= option when compiling with *gdb*
#+BEGIN_SRC sh
objdump -S <BINARY>
#+END_SRC
**** switch to intel syntax
#+BEGIN_SRC sh
objdump -M intel -[d|D] <BINARY>
#+END_SRC
**** display assembly in 32-bit layout
#+BEGIN_SRC sh
objdump -M i386,intel -[d|D] <BINARY>
#+END_SRC
* Containers
** docker
*** concepts
*** tips
*** facts
*** how to
*** problems & solutions
* UML
** plantuml
*** concepts
*** tips
*** facts
*** how to
**** create a basic class diagram
1. use "results output" to show image result
  #+begin_src plantuml :results output
  @startuml
  class A {
      ...
      method1();
      method2();
  }
  class B {
      ...
      method3();
      method4();
  }
  A -> B
  @enduml
#+end_src
**** draw horizontal lines and vertical lines
1. use =->= for horizontal line drawings
2. use =-->= for vertical lines
**** avoid diagonal relation lines
add the following line under @startuml
#+begin_src plantuml
@startuml
skinparam linetype ortho
@enduml
#+end_src
**** increase output image size
add the following line under @startuml
#+begin_src plantuml
@startuml
skinparam dpi 300
@enduml
#+end_src
*** problems & solutions
* Debuggers
** radare2
:PROPERTIES:
:EXPORT_FILE_NAME: radare-notes
:EXPORT_TITLE: radare notes
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
*** key bindings
**** normal mode

#+BEGIN_SRC sh
V               # enter visual mode and show hexdump view
aaa             # analyse the binary. unlocks other functions. do this first you open up a binary
aaaa            # experimnetal analysis. might take more time for huge binaries
afl             # see all funcitons (also called symbols) in the binary
afll            # really cool color coded function list
s <FUNCTION>    # seek to <FUNCTION>
ii              # show imports don't forget to analyse first
iS              # show sections in memory
is              # show all symbols including global, local variables
iz              # show ascii strings
iI              # general binary information
#+END_SRC

*** visual mode

#+BEGIN_SRC sh
p               # disassembler view
pp              # debuggin view
ppp             # byte distribution view
pppp            # byte string view for copying in C or Pyhton
n               # seek to next function
N               # seek to previous funciton
#+END_SRC

*** how to

+ jump to a function from *debug* or *disassembler* view
   1. use j/k keys to navigate on ~call~ instruction
   2. when call instruction is on the top press ~<ENTER>~ key
   3. hit ~u~ to come back

+ see *hex dump* of a function from *disassembler* view
   1. navigate to call just like you do for jumping to funciton
   2. press ~<Shift> p~
   3. come back with ~p~

+ see where a specific function is called across the binary using ~xref~
   1. from *visual mode*
     - seek to the function you want to see where it's called
     - press ~<ENTER>~ key
     - do ~:axt~
   2. from *normal mode*
     - ~s <FUNCTION*NAME>~
     - ~axt~
     this iformation can also be seen from *visual mode* above function name. also if you want to
     see ~jumps~ from a function. use ~axf~

+ ~patch~ a binary
   1. ~r2 -w <BINARY>~ open the binary with *write* permissions
   2. ~aaa~ analyze
   3. ~V~ enter visual mode
   4. ~p~ go to disassembler view
   5. ~:s <ADDRESS*TO*MODIFY>~ seek to address you want to modify
   6. ~:e asm.var.sub=false~ "[var*4h]" notations don't work when modifying. change to [rbp - 4]
   7. ~A~ enter modification mode and *write new instruction in assembly*
   8. hit ~<ENTER>~ two times and done
   9. additionally you can set `asm.var.sub` back to ~true~ if you want

+ how to ~debug~ a binary
   1. ~r2 -d <BINARY>~ open binary with debug mode
   2. ~V~ enter visual mode
   3. ~pp~ enter *disassembler* view
   4. additionally you can increase the *stack size* if you want with ~:e stack.size=256~
   5. ~<F8>~ next instruction
   6. ~<F7>~ step into call
   7. ~db <FUNCTION|ADDRESS>~ set brakepoint
   8. ~dc~ continue. hits the first breakpoint it encounters
   9. ~do~ reopens binary. saves breakpoints so you don't have to set them everytime
   10. in case you lost hit ~.~ to come back to *ip*(instruction pointer)
   11. ~dsf~ step until end of frame. this is handy when you accidentally step into a function

*** info
1. most *visual mode* keys have a *command* equivalent
2. to show *hex dump* in non-visual mode use +*px <BYTE*AMOUNT>**
3. most function won't work in radare2 until you analyze the binary. use +*aaa** and *aaaa* for experimental analysis.
4. you can use *normal mode* commands in *visual mode* as well. use +*:** when you wanna run some r2 commands
5. with +*iI** some important information like *nx*(non-executable stack), *canary*, *pic*(position independent code) can be seen
6. if *pic* is true then the file will randomize *base address* for every run
7. use *<COMMAND>~..* to pipe output to *less* like shell

*** tips
1. always use ~-A~ argument when opening a binary with radare. so you don't have to do
   ~aaa~ everytime. ~-AA~ also can be used bug takes long time on huge binaries

* Web Development
** hugo
this is a static website generator
*** what is
+ draft: this is a parameter which determines the post state. if draft is =true= then the post will not be shown to users

*** how to
**** get started
1. install first
   #+begin_src sh
   sudo pacman -S hugo
   #+end_src
2. create a new site directory
   #+begin_src sh
   hugo new site $YOUR_SITE_NAME
   #+end_src
3. download a theme from [[https://themes.gohugo.io/][here]].
   #+begin_src sh
   cd $YOUR_SITE_NAME
   git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c
   #+end_src
4. start the server to run your site
   #+begin_src sh
   cd $YOUR_SITE_NAME
   hugo server
   #+end_src
   find the localhost address and port in the output and open this url in browser. this port number is usualy *1313*
5. open in browser
   #+begin_src sh
   $YOUR_BROSWER http://localholt:$PORT_NUMBER
   #+end_src
**** embed your telegram account
1. fire up your *telegram*
2. go to *settings*
3. click on your *username* (it has '@' at the beginning)
4. at the bottom of the menu, you will see a link like;
   #+begin_quote
https://t.me/YOUR_USERNAME
   #+end_quote
5. take this link and add to your website by following your theme's *social settings*

*** examples
**** config.toml file
#+begin_src toml
baseURL = "http://example.org/"
languageCode = "en-us"
DefaultContentLanguage = "en"
title = "Meghna"
theme = "meghna-hugo"
summaryLength = 10

[taxonomies]
  author = "author"
  category = "categories"
  tag = "tags"

# Menu
[menu]
    [[menu.nav]]
    name = "About Us"
    URL = "about"
    weight = 2

    [[menu.nav]]
    name = "Service"
    URL = "services"
    weight = 3

    [[menu.nav]]
    name = "Portfolio"
    URL = "portfolio"
    weight = 4

    [[menu.nav]]
    name = "Team"
    URL = "our-team"
    weight = 5

    [[menu.nav]]
    name = "Pricing"
    URL = "pricing"
    weight = 6

    [[menu.nav]]
    name = "Blog"
    URL = "blog"
    weight = 7

    [[menu.nav]]
    name = "Contact"
    URL = "contact-us"
    weight = 8

# Site params
[params]
home= "Home"
logo = "images/logo.png"
gmapAPI = "https://maps.googleapis.com/maps/api/js?key=AIzaSyCcABaamniA6OL5YvYSpB3pFMNrXwXnLwU&libraries=places"
# Meta data
description = "Responsive Multipurpose Parallax HTML5 Template"
author = "Themefisher"
# Google Analitycs
googleAnalitycsID = "Your ID"
custom_css = ["css/custom.css"]

    # Banner Section
    [params.banner]
    enable = true
    bgImage = "images/slider/hero-area.jpg"
    icon = "tf-ion-play"
    heading = "Experience the new reality"
    content= "Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugit, excepturi. At recusandae sit perferendis autem,iste tempora nostrum numquam sapiente!"
    btn = true
    btnText="Explore Us"
    btnURL="#services"

    # call to action
    [params.cta]
    enable = true
    title = "Great Design & Incredible Features"
    content = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Officiis tenetur odio impedit incidunt? Omnis accusantium ea reiciendis, fugit commodi nostrum."
    btnURL = "#"
    btnText = "Start a project with us"

    # counter
    [params.counter]
    enable = true
    bgImage = "images/backgrounds/bg-1.jpg"
        [[params.counter.counterItem]]
        title = "Happy Clients"
        icon = "tf-ion-android-happy"
        count = "320"

        [[params.counter.counterItem]]
        title = "Projects completed"
        icon = "tf-ion-archive"
        count = "565"

        [[params.counter.counterItem]]
        title = "Positive feedback"
        icon = "tf-ion-thumbsup"
        count = "95"

        [[params.counter.counterItem]]
        title = "Cups of Coffee"
        icon = "tf-ion-coffee"
        count = "2500"

    # footer
    [params.footer]
        copyright = "Themefisher Team"
        copyrightURL = "http://www.themefisher.com"

        # social Icons
        [[params.footer.socialIcon]]
        icon = "tf-ion-social-facebook"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-twitter"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-google-outline"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-youtube"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-linkedin"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-dribbble-outline"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-pinterest-outline"
        url = "#"
#+end_src
