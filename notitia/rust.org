#+TITLE: Rust
#+STARTUP: overview
#+AUTHOR: savolla
#+EMAIL: savolla@protonmail.com
#+DATE: Sat Jan  9 22:55:56 2021

* Tips

1. run =rustup doc= to read local rust documentation

2. run =cargo run= _to run a project_. using =cargo build= everytime is time consuming

3. brake long lines like this;
   #+begin_src rust
io::stdin().read_line(&mut guessed_number).expect("failed to read line bro..");

// convert the upper line into this;

io::stdin()
    .read_line(&mut guessed_number)
    .expect("failed to read line bro..");
   #+end_src

4. when creating a bare-metal application, use the following macros at the start of the code
   #+begin_src rust
#![deny(unsafe_code)] //
#![no_main] // don't use main function. use "entry point" instead
#![no_std] // don't use OS abstractions. use "core" instead
   #+end_src

* Facts

1. Rust uses a *main* function like in C and C++

2. *cargo* creates git repository automatically. also creates ~src~ directory and ~main.rs~ inside

3. =cargo check= command can check the project if it compiles. but does not generate an executable. this saves time

4. =cargo build= command can be useful when building cloned repositories

5. all variables in rust are =immutable= by default

6. rust uses =&= notation to specify *references*. just like in C

7. all references are *immutable* by default. so we need to specify mutable reference with =&mut $REFERNCE_NAME=

8. rust cretes can be found in [[https://crates.io/][crates.io]]

9. when using external *cretes* include them under =[dependencies]= section in ~Cargo.toml~. Once we include a new dependency, run =cargo build= to download those

10. a *crete* called =core= is used on bare-metal applications by using the following macro;
    #+begin_src rust
#![no_std]
    #+end_src

11. when function's return type is =!= then it means that this function _can't terminate_ or _never returns_. This function type is used in *Embedded Applications*

12. rust compiler *rustc* can act as a _cross-compiler_!.

* How To
** syntax
*** comment in rust
#+begin_src rust
// this is a comment
#+end_src
*** variable definition
*** for loop
*** foreach loop
*** while
*** do while
*** if - else
*** function definition
*** struct definition
*** main function
*** define entry point

#+begin_src rust
fn entry() -> ! {
    // some code
}
#+end_src

** maintain

1. install Rust
#+begin_src bash :results none
curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh
#+end_src

2. update Rust
#+begin_src sh :results none
rustup update
#+end_src

3. uninstall Rust
#+begin_src sh :results none
rustup self uninstall
#+end_src

** write a simple ~hello world~

#+begin_src rust :results output
fn main() {
    println!("Hello, World!");
}
#+end_src

** compile rust code :rustc:

#+begin_src sh
rustc $RUST_FILE.rs
#+end_src

** create a new rust project :cargo:

#+begin_src sh
cargo new $PROJECT_NAME
#+end_src

** build rust project :cargo:

#+begin_src sh
cd $YOUR_RUST_PROJECT
cargo build
#+end_src

** generate code for production :cargo:

#+begin_src sh
cd $YOUR_RUST_PROJECT
cargo build --release
#+end_src
** embedded
*** add cross-compiler functionality to ~rustc~

#+begin_src sh
rustup target add $TARGET_TRIPLE
#+end_src

here is the [[./rust-platform-support.org][list of targets]] supported by *rust*

* Concepts
** rustup
command line utility to install, update, delete *rust* language
** Rustacean
rust fan
** cargo
project builder, package manager. makes life easier for rustaceans
** TOML
"Tomâ€™s Obvious, Minimal Language" is used for rust project configuration. configuration can be found in ~Cargo.toml~
** prelude

very small *module* that rust includes in every program by default

** crate

rust module that can be downloaded with *cargo* or built into the rust language

* Tools
** rustup
** cargo

* Cretes
** cortex-m-rt

"Cortex-M Runtime". Startup code and minimal runtime for Cortex-M microcontrollers. Used in ARM Cortex-M$N$ based MCU applications

* Tutorials
