#+TITLE: Algorithms Data Structures
#+DESCRIPTION: Notes for Algorithms and Data Structures
#+STARTUP: latexpreview

* Big O
** facts
+ if there are no inputs to an algorithm then it considered as $O(1)$
  #+begin_src c
void f( void ) {
    for ( int i = 0; i < 100000; i++ )
}
  #+end_src
** Big O examples
*** O(1)
**** ex1
#+begin_src c
void f( void ) {
    for ( int i = 0; i < 10000; i++ ) {
        printf("%d\n", A[i]);
    }
}
#+end_src

$1000 => O(1)$

*** O(n)
**** ex1
#+begin_src c
void f( int A[], size_t size ) {
    for ( int i = 0; i < size; i++ ) {
        printf("%d\n", A[i]);
    }
}
#+end_src

$n => O(n)$

**** ex2
#+begin_src c
void f( int A[], size_t size ) {
    for ( int i = 0; i < size; i++ ) {
        printf("%d\n", A[i]);
    }
    for ( int i = 0; i < size; i++ ) {
        printf("%d\n", A[i]);
    }
}
#+end_src

$n + n = 2n => O(n)$

**** ex3
#+begin_src c
void f( void ) {
    for ( int i = 0; i < size; i++ ) {
        printf("%d\n", A[i]);
        for ( int i = 0; i < 10000; i++ ) {
            printf("%d\n", A[i]);
        }
    }
}
#+end_src

$n * 1000 => O(n)$

*** O(nÂ²)
#+begin_src c
void f( int A[], size_t size ) {
    for ( int i = 0; i < size; i++ ) {
        for ( int j = 0; j < size; j++ ) {
            printf("%d\n", A[j]);
        }
    }
}
#+end_src
*** O(n*m)
**** ex1
#+begin_src c
void f( int A[], size_t size_A, int B[], size_t size_B ) {
    for ( int i = 0; i < size_A; i++ ) {
        for ( int j = 0; j < size_B; j++ ) {
            printf("%d, %d\n", A[j], B[i]);
        }
    }
}
#+end_src

=size_A= is n and =size_B= is m. so this algorithm will run =O(size_A * size_B)=

$n * m => O(n*m)$
*** O(m^n)
**** ex1
#+begin_src c
void fib( int a ) {
    if ( a == 1 )
        return 1;
    else if ( a <= 0 )
        return 0;
    else
        return fib( a - 1 ) + fib( a - 2 );
}
#+end_src

This algorithm runs recursively and since it does two recursive calls, that means its execution will look line a binary tree. So it's $O(2^n)$

* Algorithms
* Data Structures
** howto
*** choose the right data structure
**** Linked List
***** useful when you need;
+ fast insertion $O(1)$ (finding index is not included since it's $O(n)$)
+ fast deletion $O(1)$ (finding index is not included since it's $O(n)$)
+ inserting elements in any position
***** ~not~ useful when you need;
+ accessing random elements. it always needs linearly search through elements to find given index $O(n)$. *Arrays* perform well in this situation
**** Circular Linked List
***** useful when you need
+ application that repeatedly go around the list. (for example CPU scheduler which cycles through processes)
+ to implement [[https://en.wikipedia.org/wiki/Fibonacci_heap][Fibonacci Heap]]
+ to implement [[https://en.wikipedia.org/wiki/Queue_(abstract_data_type)][Queue]]
+ represent a deck of cards in a game.
**** Doubly Linked List
***** useful when you need
+ faster *deletion*
+ faster _reverse_ iteration
**** Stack
***** useful when you need
+ LIFO application
+ expression evaluation like =(1 + 3) * (5 - 9)=
+ syntax parsing (compiler applications)
+ backtracking (e.g. finding the correct path in a maze)
**** Queue
***** useful when you need
+ FIFO application
+ *order* of elements
+ removing or adding to _both ends_.
