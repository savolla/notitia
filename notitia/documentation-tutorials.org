#+TITLE: Documentation

* How To Write Effective Documentation

+ Docs will be read by *users* so when writing docs don't explain all the architecture of the system. Focus on the things that can help users get things done.

+ the helper question when writing something into docs is

  #+begin_quote
Does the end-user need to know about that?
  #+end_quote

+ Documentation is *bad* when it's *long*. Don't write fvery single detail. The *motto* is *Write Less*

+ When starting to write a new documentation, always write the *outlines first*. Outlines help us to write meaningful docs. here are the examples of some useful outlines;

  1. Who is this for
  2. What is the reader trying to get done

  after those outlines, the only thing you need to do is the *filling the details*. Writing outline first helps us writing less

+ Write with *structure*. By structure I mean;

  1. bullets ( *, -, + )
  2. numeric steps (1. 1) 1- )
  3. discrete paragraphs on /context change/

  *simplify* sentences. Don't use complex and hard to understand sentences.

+ Be *concise*. Use _didactic_ language instead of passive language. You write a documentation. Not a story.

[[https://www.youtube.com/watch?v=R6zeikbTgVc][reference]]

* Writing Technical Docs

+ There are 2 problems with Documentation;

  1. Documentation Rots. /(it's easyly gets outdated as code evolves)/
  2.
