#+TITLE: Linux
#+STARTUP: overview

* How To
** see lastly modified 5 files
#+begin_src sh
ls -tl | head -n 5
#+end_src
** pause a program
this can be usefull when you want to pause a running script or a program
1. find the process id and assign it to a variable
   #+begin_src sh
   PROCESS_ID=$(ps aux | grep -i $YOUR_PROCESS | grep -v grep | awk '{ print $2 }')
   #+end_src
2. pause the process.
   #+begin_src sh
   kill -STOP $PROCESS_ID
   #+end_src
3. process will stop. now you can bring it back to live with:
   #+begin_src sh
   kill -CONT $PROCESS_ID
   #+end_src

*** I have a better idea
let's add two functions in /.bashrc/ !
1. open up =~/.bashrc= then add the following
   #+begin_src sh
pause() {
   PROCESS_ID=$(ps aux | grep -i $1 | grep -v grep | awk '{ print $2 }')
   kill -STOP $PROCESS_ID
}

cont() {
   PROCESS_ID=$(ps aux | grep -i $1 | grep -v grep | awk '{ print $2 }')
   kill -CONT $PROCESS_ID
}
   #+end_src

2. refresh your =.bashrc=
   #+begin_src sh
source ~/.bashrc
   #+end_src
** unfuck subtitles
#+begin_src bash
iconv -f iso-8859-9 bozuk-encoding.srt > turkce-encoding.srt
#+end_src
** find all font names in system
    #+BEGIN_SRC bash
    fc-list
    #+END_SRC

** set time and date
   #+BEGIN_SRC bash
   date +%Y%m%d -s "20120418" # date
   date +%T -s "11:14:00" # time
   #+END_SRC

** zip files
*** zip a directory

   #+BEGIN_SRC bash
   zip -r $ARCHIVE_NAME.zip $DIRECTORY_TO_ZIP
   #+END_SRC
*** zip a file

#+begin_src sh
zip file.zip file
#+end_src

** sync clock with network or set system clock
   #+BEGIN_SRC bash
   pacman -S ntp # install the service first
   systemctl enable ntpd.service # enable the service
   timedatectl set-ntp 1 # update clock
   hwclock --systohc
   systemctl start ntpd # start the service
   #+END_SRC

** add a directory to $PATH
*** temporary
#+BEGIN_SRC bash
PATH=$PATH:/path/to/directory
export PATH
#+END_SRC
*** permanent
add the temporary commands into .bashrc or .zshrc
** convert images to pdf

#+begin_src sh
convert img1 img2 img3 document.pdf
#+end_src
** disable sudo for a specific command

#+begin_src sh
sudo vim /etc/sudoers.d/$YOUR_UTILITY
#+end_src

Add the following

#+begin_src sh
savolla ALL=(root) NOPASSWD: $ABSOLUTE_PATH_TO_YOUR_UTILITY
#+end_src

** generate random number
#+begin_src sh
echo $RANDOM
#+end_src

#+RESULTS:
: 29712
** mount an image
*** iso

+ You'll get an error because ISO is read-only file system. just ignore the error

  #+begin_src sh
sudo mount $PATH_TO_ISO /mnt/$OPTIONAL_DIR -t iso9660 -o loop
  #+end_src

*** img
The problem is that the .img files are not images of a partition, but of a whole disk. That means they start with a bootloader and a partition table. You have to find out the offset of the partition and mount it with the offset option of mount.
If you do a
Code:

#+begin_src sh
fdisk -l /path/to/image
#+end_src

it will show you the block-size and the start-block of the partition. You can use that to calculate the offset.
For example, I have an image of a bootable stick with a 4GB FAT32 partition. The output of the fdisk command is

Code:
#+begin_src sh
Disk Stick.img: 3984 MB, 3984588800 bytes
249 heads, 6 sectors/track, 5209 cylinders, total 7782400 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x0004bfaa

Device      Boot      Start         End      Blocks   Id  System
Stick.img1  *         128       8015999     4007936    b  W95 FAT32
#+end_src

~512 * 128 = 65536.~

So I have a block-size of 512 bytes and the start-block is 128. The offset is
So the mount command would be
Code:

#+begin_src sh
mount -o loop,offset=65536 Stick.img /mnt/tmp
#+end_src

*** windows partition
** see how many CPU cores I have

#+begin_src sh
grep -c ^processor /proc/cpuinfo
#+end_src
** replace all text patterns to something else

#+begin_src sh
find <path_to_directory> -type f -exec sed -i 's/<search_text>/<replace_text>/g' {} \;
#+end_src
** connect android to linux

#+begin_src sh
sudo pacman -S android-file-transfer
sudo android-file-transfer
#+end_src
** convert any audio format to mp3

#+begin_src sh
ffmpeg -i $WAV_FILE -acodec mp3 $MP3_FILE
#+end_src

* Distros
 * [[./alpine.org][alpine]]
 * [[./ubuntu.org][ubuntu]]
* tips

+ When creating symbolic links, specify *full path* to each operand

  #+begin_src sh
ln -s /opt/FreeTube/freetube /usr/bin/freetube
  #+end_src
