#+TITLE: Notitia
#+AUTHOR: Oleksiy Nehlyadyuk
#+EMAIL: savolla@protonmail.com
#+DATE: Fri Nov 13 09:19:17 2020
#+LANGUAGE: en
#+STARTUP: overview
#+HUGO_BASE_DIR: ~/txt/blog/
#+HUGO_SECTION: en/posts

* Topics
** web programming
** probability and statistics
** SOLID principles
*** SRP
*** OCP
*** LSP
*** ISP
*** DIP
** Embedded Systems
*** articles
+ [[https://jaycarlson.net/][jay carlson's entire website]]
*** books
1. An Embedded Software Primer
   [[file:./images/screenshot-09.png]]
   According to the Professor at ODTU who gives courses on embedded systems, he recommended this book as the "best resource"

*** tips
*** facts
*** how to
*** concepts
*** problems & solutions
** software architecture
*** notes from armağan amcalar's youtube stream
+ *design* and *architecuture* are different things
+ what is software design?
  when you design classes, interfaces, controllers etc.
+ what is software architecture
  when you design how component should communicate, which pattern you will be using
+ every developer should understand and implement software architecture.
+ before attempting to make a software always go through these steps;
  1. software architecture
  2. software design
  3. coding
+ some kinds of software architecture;
  1. domain driven design
  2. even sourcing
  3. event driven architecture
  4. serverless architecture
  5. monolith architecture
  6. microservices architecture
+ *system architecture* and *software architectures* are different things
+ system architecture is not something that has restricted rules or formulas. one developer can;
  1. combine two or more architectures
  2. customize existing architectures
+ read Martin Fowler and Bob Martin's books
**** domain driven design (DDD)
+ still arguable if it is a design technique or arthitecture
+ it's intent is to merge business world and software world. it is a translator between business and software
+ if an architect designs a domain driven design architecture and he/she is not familiar with business the final result won't be very accurate
+ it's second intent is to create a software that scalable. so when you add a new feature, the next feature won't be hard to implement with ddd
+ a good example of ddd is an ERP software. it contains some discrete modules and each module is a *domain*;
  1. fatura
  2. satınalma
  3. stok yönetimi
  4. teslimat
+ domain driven design will consider every domain as a different and discrete software. those softwares are called modules in ERP. every module is developed by people who has experience and concrete knowledge with said domain.
+ modules will communicate with some each other by interfaces when added.
+ modules/domains can work on their own since those are concrete softwares
+ the biggest difference of DDD from other architectures is that every module is completely discrete and one module can be glued together with interfaces
**** event sourcing
+ every unit of the system communicate with other units via signals. signals are called *events*
+ for example when a user scrolls the page or click on a button, then those buttons or scroll bars send some events to some other units
+ every unit knows which signal it recieves
+ event deiven architecture is more discributed than DDD. because in DDD, there are static interfaces between modules. in event sourcing, modules ara completely discrete
+ in Event Sourcing, modules are *completely unaware* from each other and there is a program called *broker* which handles signals coming from modules and sends those signals to other modules
+ in ESA, one signal can be sent to multiple modlues/services. (sometimes 0 which is bad..)


* Programming
** languages
*** c
**** facts
***** struct variable assignment
you can't assign values to variables in a struct. for example the following code will spit out an error
  #+begin_src c
typedef struct A {
    int x = 333;
}
  #+end_src
the valid version of the above code is:
  #+begin_src c
typedef struct A {
    int x;
}
  #+end_src
***** struct sizes don't make sense
the following struct's size is 12 bytes.
#+begin_src c
typedef struct A {
    int x;
    char y;
    int z;
} A;
#+end_src
this doesn't make sense right? because;
- int x  : 4 bytes
- char y : 1 byte
- int z  : 4 bytes
it must be 9 bytes.. but in fact, compilers make padding operations to keep the memory layout stable. for example after defining variable x which occupies 4 bytes, compiler occupies 1 byte for variable y and right after that does 3 bytes padding! now our memory layout becomes stable ($$2^n$$). then it occupies 4 more bytes for variable z which is 4 bytes. and sizeof operator returns 12

consider the following example of code, where we define one more *char* variable after y;
#+begin_src c
typedef struct A {
    int x;
    char y;
    char k; // new char
    // 2 bytes padding
    int z;
} A;
#+end_src
=sizeof()= operator returns 12 again. because this time compiler adds 2 more bytes padding right after 'k' variable. now it makes sense

**** concept
**** how to
***** define a struct
#+begin_src c
typedef struct A{
    int a;
    char c;
} A;
#+end_src
**** problems & solutions
*** perl
**** facts
+ perl's extension is *.pl*
+ perl is more useful than shell scripting because it is compatible with other shells
+ perl is very powerfull when it comes to *Regex*
+ perl is used for;
  1. linux sysasmin
  2. network programming
  3. database handling
  4. email handling
  5. web development
+ perl competes with python
+ perl is more secure than shell
+ every expression must end with a semicolon ';'

**** concepts
***** shebang
this must be on the first line of every perl script
#+begin_src perl
#!/usr/bin/perl
#+end_src
**** how to
***** run perl program
1. open up a file
   #+begin_src sh
emacs program.pl
   #+end_src
2. write some code
   #+begin_src perl
#!/usr/bin/perl
print("what's your name?");
$name = <STDIN>;
print("hello $name");
   #+end_src

*** python
**** facts
+ sınıf metodları hiç parametre almasa bile, içinde mutlaka *self* parametresi barındırmalıdır. örnek: [[sınıf oluşturmak]]
+ python'da bir sınıf oluştururken __init__ metodu kullanmak zorunda değiliz.
+ python'da kalıtım almak için sadece sınıf tanımlamasında, sınıf isminin yanına, parantez içine super classın adını yazmak yeterlidir. örnek: [[python'da inheritance]]
+ kalıtım almış bir sınıfın base sınıfınından method çağırmak için *super* keywordü kullanılır. örnek: [[base class'a ulaşmak]]
+ private değişken tanımlamak için, değişkenin başına iki kere '_' koymamız gerekir. örnek: [[private değişken oluşturmak]]
**** consepts
***** __init__
python classları için kullanılan *constructor*. diğer çoğu dilde genelde sınıfın adı kullanılır init yerine ama python'da bu şekilde. örnek: [[sınıf oluşturmak]]
***** self
C++'daki *this*'in aynısı. bunun özel bi olayı var, sınıf oluştururken kesinlikle her methodun içine parametre olarak verilmelidir. örnek : [[sınıf oluşturmak]]
***** format string
normalde print fonksiyonu içine yazdığımız string'e dışardan bir değişken eklemeye kalktığımızda, stringi ve değişkenleri + ile toplamamız vs gerekir. bunun yerine format string kullanılır. örnek: [[format string oluşturma]]
***** pipenv
kesinlikle virtualenv'den daha kullanışlı bir pakettir. bununla sanal ortam oluşturmak için [[virtual environment oluşturmak][şuna]] bak
**** builtin function
***** type()
- *işlev*: bir objenin sınıfını döndürür
- *params*: objenin kendisi
- *kullanım*: [[pt1]]
**** howto
***** bir objenin sınıfını nasıl döndürürüz | <<pt1>>
#+BEGIN_SRC python :results output
msg = "hello"
print(type(msg))
#+END_SRC

#+RESULTS:
: <class 'str'>
***** sınıf oluşturmak
#+BEGIN_SRC python :results output
class Dog:
# constructor
def __init__(self): # self must be here
    print("New Dog is created")

def bark(self):
    print("BARK!")

d = Dog() # instantiation
d.bark() # bark the dog
#+END_SRC

#+RESULTS:
: New Dog is created
: BARK!

***** class property'si oluşturma ve erişme
#+BEGIN_SRC python :results output
class Dog:
# class properties
name = ""
age = 0

# constructor
def __init__(self, dog_name):
    self.name = dog_name # set name property

d = Dog("Ares")
print(d.name)
#+END_SRC

#+RESULTS:
: Ares
***** format string oluşturma
normal print fonksiyonunun içine, tıknaktan önce bir *f* karakteri eklenir

#+BEGIN_SRC python :results output
name = "savolla"
age = 28
print(f"Hi! My name is {name} and I'm {age} years old")
#+END_SRC

#+RESULTS:
: Hi! My name is savolla and I'm 28 years old
***** python'da inheritance
#+BEGIN_SRC python :results output
class Mammal:
pass

class Human(Mammal):
pass

class Dog(Mammal):
pass
#+END_SRC

***** base class'a ulaşmak
#+BEGIN_SRC python :results output
class Mammal:
age = 12;

class Human(Mammal):
def someMethod(self):
    print(super().age)

h = Human()
h.someMethod()
#+END_SRC

#+RESULTS:
: 12
***** private değişken oluşturmak
#+BEGIN_SRC python :results output
class A:
public_var = 11
__private_var = 43

m = A()
print(m.public_var) # this will be printed
print(m.__private_var) # this won't
#+END_SRC

#+RESULTS:
: 11
: 43
***** virtual environment oluşturmak
1. önce *pipenv* paketi kurulur
#+BEGIN_SRC sh
sudo pip install pipenv
#+END_SRC
2. proje klasörü oluşturulup oraya girilir ve şu komut yazılır
#+BEGIN_SRC sh
pipenv shell
#+END_SRC
bu komuttan sonra, klasör adı ile bir ortam oluşacaktır. terminalin solunda projenin adı görünecek ve bu dizince bir Pipfile oluşacaktır. onu elleme lazım o.
3. istenen python paketleri kurulur. sanal dizinde olduğundan emin ol
#+BEGIN_SRC sh
sudo pipenv install django==3.0.1
#+END_SRC
artık ne kuruluyorsa bu klasöre kurulacak ve sistemden tamamen izole bir şekilde çalışacaktır
4. paket silme
#+BEGIN_SRC sh
sudo pipenv uninstall django==3.0.1
#+END_SRC
5. ortamdan çıkmak istersen
#+BEGIN_SRC sh
exit
#+END_SRC
***** pipenv ile requirements.txt'den dependency'leri kurmak
bazen bir projenin düzgün çalışması için *requirements.txt* dosyasıyla beraber gelir
#+BEGIN_SRC sh
pipenv install -r ./requirements.txt
#+END_SRC
***** +scrape web with python+
****** create a python environment
1. install *pypenv* for easily creating /healthy/ python environments
   #+begin_src sh
sudo pip install pipenv
   #+end_src
2. create your project directory (web-scraper in this example)
   #+begin_src sh
mkdir web-scraper && cd web-scraper
   #+end_src
3. create and start the enviroment
   #+begin_src sh
pipenv shell
   #+end_src
   after this command a new file called =Pipfile= will be created. don't mess with it yet
****** install dependencies
1. install *bs4* module for /html parsing/
   #+begin_src sh
sudo pipenv install bs4
   #+end_src
2. install *requests* for taking html code from websites
   #+begin_src sh
sudo pipenv install requests
   #+end_src
3. install *fake-useragent* to avoid captchas
   #+begin_src sh
sudo pipenv install fake-useragent
   #+end_src
****** import modules

1. create a python file and open it with your favorite text editor
   #+begin_src sh
touch web-scrapping-application.py
emacs web-scrapping-application.py
   #+end_src

2. add the following to your file
   #+begin_src python
from urllib.request import urlopen as req
from bs4 import BeautifulSoup as soup
from fake_useragent import UserAgent

   #+end_src
3. execute the file
   #+begin_src sh
python web-scrapping-application.py
   #+end_src

if you don't get any import errors, then it means that modules are installed and you're ready to go.

****** retrieve the web page

1. add the *url* of the site that your want to scrape.
    #+begin_src py
url = "https://github.com/savolla"
    #+end_src

2. get the html content from the internet. this might take a while depending on your internet connection and size of the page
   #+begin_src py
webpage = req(url)
   #+end_src

3. assign html content to a variable
   #+begin_src py
page_html = req.read()
   #+end_src

4. close the connection
   #+begin_src py
req.close()
   #+end_src

5. make the html code manageble
   #+begin_src py
page_html = soup(page_html, "html.parser")
   #+end_src

****** extract content from html
1. go to your browser and find the section you want to scrape
2. right click on this section and select "inspect element"
3. find the elements you want to scrape. (div, span, a..)
4. crop your html content

   #+begin_src python
container = page_html.find_all("div", {"class":"div-class-name"})
   #+end_src
   container is a list of divs now. every element in this list is a class of =div-class-name=

5. check how many items container have
***** delete the elements from a list
#+begin_src python :results output
x = [1,2,3,4]
x.remove(x[0]) # remove the first element
print(x)
#+end_src

#+RESULTS:
: [2, 3, 4]

***** change list elements
this example changes all 2's to 0
#+begin_src python
a=[1,2,1,2,1,2]
a = [0 if x==2 else x for x in a]
#+end_src
***** convert list to string
=WARNING= list items must be type of string
#+begin_src python
x = ['h', 'e', 'l', 'l', 'o']
x = ''.join(x)
#+end_src

**** problems & solutions
**** modules
***** matplotlib
****** facts
+ matplotlib, veri grafiği çizdirme kütüphanesidir
+
****** concept
******* subplot()
+ birden fazla grafiği aynı anda çizdirmek için kullanılan bir matplotlib methodudur. örnek için [[birden fazla grafiği üst üste çizdirme][şuna]] ve [[birden fazla grafiği yan yana çizdirme][şuna]] bak
+ örnek kullanım: subplot(1,2,1)

****** howto
******* basit bir grafik oluşturma
#+BEGIN_SRC python :results graphics
from matplotlib import pyplot as plt
import numpy as np

x = np.linspace(0,5,50)       # 0'dan başla, 5er 5er 50'ye kadar giden bir dizi oluştur
y = x ** 2                    # x dizisininin karesini al ve y'ye ata
plt.plot(x,y)                 # grafiği oluştur
plt.title("squares")          # grafik başlığı
plt.xlabel("x ekseni")        # x eksenine başlık ata
plt.ylabel("y ekseni")        # y eksenine başlık ata
plt.show()                    # grafiği göster
#+END_SRC

******* birden fazla grafiği üst üste çizdirme
+ üst üste çizdirmek için, iki grafiğin subplot fonksiyonundaki son parametrelerin aynı olması gerekir
#+BEGIN_SRC python
from matplotlib import pyplot as plt
import numpy as np

# first graphic
x1 = np.array([1,2,3,4,5,6,7,8])
y1 = np.array([8,7,6,5,4,3,2,1])
plt.subplot(1,1,1)
plt.plot(x1, y1, 'r')

# second graphic
x2 = np.array([1,2,3,4,5,6,7,8])
y2 = np.array([1,2,3,4,5,6,7,8])
plt.subplot(1,1,1)
plt.plot(x2, y2, 'b')

plt.show()
#+END_SRC

******* birden fazla grafiği yan yana çizdirme
#+BEGIN_SRC python
from matplotlib import pyplot as plt
import numpy as np

# first graphic
x1 = np.array([1,2,3,4,5,6,7,8])
y1 = np.array([8,7,6,5,4,3,2,1])
plt.subplot(1,2,1)                  # son parametreye dikkat
plt.plot(x1, y1, 'r')

# second graphic
x2 = np.array([1,2,3,4,5,6,7,8])
y2 = np.array([1,2,3,4,5,6,7,8])
plt.subplot(1,2,2)                  # son parametreye dikkat
plt.plot(x2, y2, 'b')

plt.show()
#+END_SRC

****** problems & solutions
******* Tkinter hatası alınıyorsan şunu dene
#+BEGIN_SRC sh
xrdb -load /dev/null
xrdb -query
#+END_SRC

***** seaborn
****** facts
****** concept
****** howto
****** problems & solutions
***** pandas
****** facts
****** concept
****** howto
****** problems & solutions
***** sklearn
****** facts
****** concept
****** howto
****** problems & solutions
***** bs4
used for parsing html text. widely used in *web scrapping*
****** facts
****** concept
****** how to
******* navigate the html tree
you can zoom into html content by using *dot* operator in bs4
#+begin_src python
page_html.title # get title
page_html.body.p # get the first p element in body
page_html.body.find_all("p") # find all p elements inside body
page_html.body.find_all(attrs={"itemprop":"description"})[0].text # you just need this
#+end_src
****** problems & solutions
***** selenium
****** methods
#+begin_src python
driver.get("https://savolla.github.io")     # open up a page
driver.title                                # get page title
driver.close()                              # close the driver
#+end_src
****** how to
******* install
1. create a python environment

   #+begin_src sh
sudo pip install pipenv
mkdir project
cd project
pipenv shell
   #+end_src

2. install selenium

   #+begin_src sh
sudo pipenv install selenium
   #+end_src

3. install *chromium*. this package comes with *chromedriver* which we will need
   #+begin_src sh
pacman -S chromium
   #+end_src
******* run webdriver
#+begin_src python
from selenium import webdriver
driver = webdriver.Chrome()
driver.get("https://savolla.github.io") # open up a page
driver.close() # close the driver
#+end_src
******* search google
#+begin_src python
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

driver = webdriver.Chrome()
driver.get("https://google.com")
search_bar = driver.find_element_by_name("q") # you can search by other things as well
search_bar.send_keys("Kurotogake bandcamp")
search_bar.send_keys(Keys.RETURN)
#+end_src
******* get page source
this is usefull when websited block automatic http requests.
#+begin_src python
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

driver = webdriver.Chrome()
driver.get("https://github.com/savolla")
page_html = driver.page_source  # now you have all the html content in page_html
#+end_src
******* find elements in html
#+begin_src python
from selenium.webdriver.common.by import By

#+end_src

*** bash
*** javascript
**** concepts
***** JSON
+ javascript object notation
+ data representation format
+ used in *config* files
+ supported types;
  1. strings: "hello world", "savolla"
  2. numbers: 10, 1.5, -30
  3. boolean: true, false
  4. null: null
  5. arrays: [1,2,3], ["Hello", "world"]
  6. objects: {"key":"value"}, {"age":30}
+ everything in json is _valid javascript code_
**** tips
**** facts
**** how to
***** create a json file
this is actually an _array_ in javascript. this is why it starts with '[]'
#+begin_src js
[
    {
        "name":"software engineering",
        "delay": 2,
        "book":
        [
            {"name" : "codecomplete2"},
            {"name" : "codecomplete2"},
            {"name" : "codecomplete2"},
            {"name" : "codecomplete2"},
            {"name" : "codecomplete2"}
        ]
]
#+end_src
***** display json contents in html
1. paste the json string inside script tag and make it a string by surroud it with `
2. use =JSON.parse= method to make JSON parsable with indexes

#+begin_src html
<html>
  <head>
    <meta charset="UTF-8"/>
    <title>MultiTasker</title>
  </head>
  <body>
    <script type="text/javascript">
      let topics =
        `[
                {
                    "name":"software engineering",
                    "delay": 2,
                    "book":
                    [
                        {"name" : "codecomplete2"},
                        {"name" : "Applying UML"},
                        {"name" : "clean code"},
                        {"name" : "clean coder"},
                        {"name" : "solid principles"}
                    ]
                }
        ]`
        console.log( JSON.parse(topics)[0].book)
    </script>
  </body>
</html>
#+end_src
**** problems & solutions
*** vhdl
**** facts
+ HDL : Hardware Descriptive Language
+ found in 1981
+ IEEE standard
+ initially created for ASIC synthesis

*** verilog
**** facts
+ found in 1985
+ IEEE standar
+
**** how to
***** create a basic module

#+BEGIN_SRC verilog
module And(x, y, out);
input x, y;
output out;
assign out = x & y;
endmodule
#+END_SRC

***** work with array of inputs and outputs

#+BEGIN_SRC verilog
module And(x, y, out);
input [15:0] x, y; // [15:0] is the syntax of 16-bit arrays
output [15:0] out;
assign out = x & y;
endmodule
#+END_SRC

***** [X] for loop in verilog

#+BEGIN_SRC verilog
integer k;                                // you have to define integer k outside
for (k = 0; k <= 15; k=k+1) begin         // note that k++ does not work in verilog
Xor tmp(x[k], y[k], out[k]);
end
#+END_SRC

*** c#
**** frameworks
***** .Net Core
****** concepts
******* methods
******** Startup.cs/ConfigureServices
+ sets some initial configurations for the project. web app will read and run this method first
+ the following line will be there by default to make MVC work

#+BEGIN_SRC cpp
services.AddCountrollersWithViews();
#+END_SRC

******** Startup.cs/Configure
+ this determines if web app should run in development mode or product mode
+ under this method, developers can add a special setting that makes site routing according to Controllers;

#+BEGIN_SRC cpp
endpoints.MapDefaultControllerRoute();
#+END_SRC

****** how to
******* use getter and setter methods
in C# there is no need to write long *get* and *set* functions like in C++. you simply put those inside property
#+BEGIN_SRC cpp
public class Joke
{
    public int Id {get; set;}
    public string joke_question {get; set;}
    public string joke_answer {get; set;}
}
#+END_SRC
******* create a simple website with .NET Core MVC
this tutorial will create a website with a database. also this will be only applicable on *windows* platform and *visual studio 2019*
******** project creation
1. open up visual studio and press *create a new project*
2. select *ASP .NET Core Web Application*
3. Name your Project
4. select *Web Application (Model-View-Controller)* and change the *authentication* to *Individual User Accounts*
5. .Net Core will generate lots of code for us. so we don't need to do everything from scratch
6. run the project. let visual studio download whatever it needs to download. the first run will take some time btw
******** folders and MVC
+ three directories are so important in *solution explorer*;
1. *Model* : where classes are defined. for example a shopping website has Customer, Shipping classes in Model directory
2. *View* : displays the data to the user. this folder contains different kinds of files called *razor pages*
    - razor pages
    + are combinations of *html* and *c#*.
    + file extension of the razor page is *.cshtml*
3. *Controller* : controls _when_ pages appear. what data should they show to the user
******** create first page
here we will use *Model* and *View* to create first page
1. right click on *Model/Add/Class*
2. select *Class* from popup menu and name your class (Joke.cs) and press *Add*
3. create some properties if you like. see [[shortcuts]] for visual studio (optinal)
4. you _must create_ an *empty constructor* of the class. because  it will be used by other classes. because of visual studio generated lots of code for us, we actually don't know exactly what those codes are (yet)
5. unfold *Data* directory from solution explorer (will be used later)
6. right click on *Controller/Add/Controller*
7. select *MVC Controller with Views, using Entity Framework* from popup
8. from popup menu, on *Model* section, select the _name of the class you just created_ in Model directory (Joke Class)
9. for *Data Context Class*, press _plus button_ (or add)
10. look at the solution explorer's *Data* section. in textbox, delete the highlighted part and write what you see under Data directory (ApplicationDbContext in my case)
11. tick everyhting below (3 of things need to be ticked)
12. click *create*. this might take some time. after this step, several new directories will be created in our solution (you need internet connection for this to work)
******** database migration
our pages will not be *dynamic* if we don't create a database. Here are steps for database creation;

1. check if a file starts with *0000000* is created under *Data/Migrations* directory. this contains some database informations.
2. go to *Tools/NuGet Package Manager/Package Manager Console* to open package manager. wait for initialization
3. enter the command:
#+BEGIN_SRC sh
add-migration "first-database-migration"
#+END_SRC
after this command, a c# file will be created under *Data/Migrations*. This is a code that creates a database table (Joke Table) see [[ORM]]
4. finally enter this command in package manager console to create a new database inside SQL server
#+BEGIN_SRC sh
update-database
#+END_SRC

now go and check the tables of our newly created database if you want by clicking *View/SQL Server Object Explorer* (optional). now we have a website with database connected

******** add our controller to the front page
go to *Views/Shared/_Layout.cshtml* and copy one of the *nav-bar* classes and change it to
#+BEGIN_SRC html
asp-controller="Jokes" <!-- out controller's name -->
asp-action="Index" <!-- front page of our Joke controller -->
#+END_SRC
this will add *Jokes view* to the front page.
******** add search bar feature I

1. go to *_Layout.cshtml* and copy another *nav-bar* element and start modifying it;
#+BEGIN_SRC html
asp-controller="Jokes" <!-- out controller's name -->
asp-action="ShowSearchForm" <!-- this will be our search bar -->
<a>Search</a> <!-- change link to more reasonable name -->
#+END_SRC

*ShowSearchForm* doesn't exist yet. So we need to define it in *Jokes Controller*. if you try to access this link, it will give "page not found" error

2. go to *Controllers/JokesController.cs* and copy the first *Task* method and start modifying it
#+BEGIN_SRC c++
public async Task<IActionResult> ShowSearchForm() { // we changed Index to ShowSearchForm
    return View(); // we deleted everything inside the paranthesis
}
#+END_SRC

3. right click on *ShowSearchForm* in the code and click *Add View*. select *Razor View* instead of empty one
(we could create a view called *ShowSearchForm* under *View* folder but we choose the shorter way)

4. on the popup menu;
- leave the View Name as is
- Template : create
- Model Class : Joke
- options:
    [x] partial view
    [x] reference script

this *will not* create a search bar. we will modify this code to make a search bar now

******** add search bar feature II

1. open *View/Jokes/ShowSearchForm.cshtml*

2. since do not *modify* or *create* Jokes Model, we delete this line;
#+BEGIN_SRC html
@model JokesWebsite.Models.Joke
#+END_SRC

3. there is a line at the bottom for Joke validation. it's basically check if user inputs a joke in correct format. delete this line as well
#+BEGIN_SRC html
@section Scripts {
@{await Html.RenderPartialAsync("__ValidationScriptPartial");}
}
#+END_SRC

4. finaly convert the code into this:
#+BEGIN_SRC html
<h4>Search for a Joke</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="ShowSearchResults"> <!-- where we want to go after submition -->
            <div class="form-group">
                <label for="SearchPhrase" class="control-label"></label>
                <input name="SearchPhrase" class="form-control" />          <!-- SearchPhrase will be a parameter -->
            </div>

            <div class="form-group">
                <input type="submit" value="Search" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>
<div>
    <a asp-action="Index">Back to List</a>
</div>
#+END_SRC

5. *SearchPhrase* will go to our Joke Controller's *ShowSearchResults* method as a parameter. Go to *Controllers/JokeController.sh*
#+BEGIN_SRC cpp
// GET: Jokes/ShowSearchResults
public async Task<IActionResult> ShowSearchResults(string SearchPhrase)  // SearchPhrase is coming from ShowSearchForm
{
    return View("Index", await _context.Joke.Where( j => j.JokeQuestion.Contains
                (SearchPhrase)).ToListAsync());
}
#+END_SRC

this code snippet uses a lambda function inside the return statement

now we have a section with search

******** show joke owner
:LEFT_HERE:
******** hide the joke answer
******** limit "create" for logged users
**** how to
*** java
**** concepts
***** nested classes
- java allows you to define a class into another class. they called nested classes
****** inner class
- inner class _have access_ to outer class members
- inner class' main function _cannot be static_

  #+begin_src java
  public class OuterClass {
      int a = 3;
      public class InnerClass {
          int b = a; // can use outer class' members
      }
  }
  #+end_src

****** inner static class
- inner static classes _don't have access_ to outer class members

  #+begin_src java
  public class OuterClass {
      int a = 3;
      public static class InnerClass {
          int b = a; // this is not allowed
      }
  }
  #+end_src
***** Maven, Gradle and Ant
they are three build tools for java
***** swing
+ this is a library for GUI development in java.
+ it is really *outdated* but it teaches the basics
**** tips
+ if you don't know the name of the exception while making try catch methods, you can always make the program spit this error and then get the name from the error log
+ all SQL queries must be used in try-catch blocks. because query result may not be return something
+ if you see "Must be Caught" errors then this statment must be used in try-catch blocks
+ when working with databases, whatch out those varchar[25] varaibles. java gets those variables as *string* so strings are not limited to 25. always check the length before storing varchar elements from java to database.
+ when adding values to database, use =execute= method. when getting some value from database use =executeQuery=. the "executeQuery" method will return a =Resultset= object. catch it
+ when querying a database, give the full path to tables. like =databas_ename.table_name=. this is important. mysql might allow this kind of notation since it is a full blown database application. JDBC is not that clever
**** facts
+ non-static class members can't be used with *this* keyword

  #+begin_src java
public class A {
    public static int x;
    public static assign() {
        this.x = 111; // spits out error
    }
}
  #+end_src

  correct code: remove *this*
  #+begin_src java
public class A {
    public static int x;
    public static assign() {
        x = 111; // works fine
    }
}
  #+end_src
+ in java, you can't include more than one package
  #+begin_src java
package path.to.package1;
package path.to.package2; // second one is not allowed
  #+end_src

**** how to
***** use linked lists
****** create item
#+begin_src java
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class JavaLinkedListApp {
    public static void main(String[] args) {
        List<String> x = new ArrayList<String>();
        x.add("item 1");
        x.add("item 2");
        x.add("item 3");
        x.add("item 4");
        System.out.println("Liste: " + x);
    }
}
#+end_src
****** set/change items
use =set= method to do this
#+begin_src java
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class JavaLinkedListApp {
    public static void main(String[] args) {
        List<String> x = new ArrayList<String>();
        x.add("item 1");
        x.set(1,"ITEM 1"); // set method
        System.out.println("Liste: " + x);
    }
}
#+end_src
****** remove an item
use =remove= method to do this
#+begin_src java
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class JavaLinkedListApp {
    public static void main(String[] args) {
        List<String> x = new ArrayList<String>();
        x.add("item 1");
        x.add("item 2");
        x.remove(0);
        x.remove(1);
        System.out.println("Liste: " + x);
    }
}
#+end_src
****** sort items
use =Collections.sort()= sorts *alphabetically*
#+begin_src java
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class JavaLinkedListApp {
    public static void main(String[] args) {
        List<String> x = new ArrayList<String>();
        x.add("item 1");
        x.add("item 2");
        x.add("item 3");
        x.add("item 4");
        Collections.sort(x);
        System.out.println("Liste: " + x);
    }
}
#+end_src

****** reverse sort items
use =Collections.reverse()= sorts *alphabetically*
#+begin_src java
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class JavaLinkedListApp {
    public static void main(String[] args) {
        List<String> x = new ArrayList<String>();
        x.add("item 1");
        x.add("item 2");
        x.add("item 3");
        x.add("item 4");
        Collections.reverse(x);
        System.out.println("Liste: " + x);
    }
}
#+end_src
***** handle errors
#+begin_src java
public static int takeNumberData() {
    Scanner input = new Scanner(System.in);
    String data;
    int number;
    data = input.next();
    try {
        number = Integer.parseInt(data);
    } catch (NumberFormatException e) {
        System.out.println("this is not a number!");
        return -1;
    }
    return number;
}
#+end_src
***** create a swing application
1. open up *netbeans*
2. create new project
3. select; Ant -> Java Application
4. name your project
5. untick "create main class"
6. wait for project creation
7. right click on your project;
   New -> JFrame Form
8. name your form
9. a new frame with controls will be open
***** create a blank GUI window
we use JFrame class from swing library to do this
#+begin_src java
import javax.swing.JFrame;

public class GUI {
    public GUI() {
        JFrame frame = new JFrame();
    }

    public static void main(String[] args) {
        new GUI();
    }
}
#+end_src
***** use database in java
***** type cast in java
#+begin_src java
int number = 11;
String text = (String)number;
#+end_src
***** iterate java list/array
+ the traditional =arr[0]= notation doesn't work in java
#+begin_src java
ArrayList<int> x = new ArrayList<int>();
x.add(1);
x.add(2);

x.get(0); // 0th index
#+end_src
**** problems & solutions
*** sql
**** concepts
**** tips
**** facts
**** how to
***** write search query
#+begin_src sql
SELECT #column1, #column2 FROM #tablename WHERE #columnN = #search_keyword;
SELECT * FROM #tablename WHERE #column_N = #search_keyword;
SELECT * FROM #tablename WHERE #column_N LIKE #search_keyword;
#+end_src
***** delete values from table
#+begin_src sql
DELETE FROM #table_name WHERE #column_name = #value
#+end_src
**** problems & solutions

** databases
*** mysql
**** facts
**** concepts
**** how to
***** enter date format
+ in mysql you enter date like this =2020-03-20=
***** change the type of a column
#+begin_src sql
ALTER TABLE $tabl_name MODIFY COLUMN $colmn_name $your_type;
#+end_src
+ if you are working from mysql's GUI, then you can TAB complete type name
***** insert values
#+begin_src sql
--                                                                                                       values to add
--            table name                                                                           .---------------------------.
--             /                                                                                  /         |          |        \
insert into Personel (PersonelName, PersonelSurname, PersonelSalary, PersonelBirthday) values ("Ahmet", "Albayrak", "2000", "1990-05-06");
--                          \               |                |             /
--                           '--------------------------------------------'
--                                            column names
#+end_src
**** problems & solutions
*** mongodb

* Tools
** text editors
*** emacs
**** General
***** facts
***** concept / term
***** tutorials / howto
***** problems and solutions
**** Org Mode
***** facts
+ *radio link*'ler tez ve referans dökümanları yazımında çok etkilidir | [[radio link]]
***** concept / term
****** radio link
mesela metin içinde *newton* geçen her yere wikipedia linkini eklemek istiyorsun, o zaman bunu kullanırsın. kullanıcı nerede newton görse, artık tıklanabilir bir link görür. [[radio link oluşturma][örnek]]
***** tutorial / howto
****** döküman içi hızlı arama
1. Emacs için : =C-c C-j=
Doom için : =SPC m .=
2. aranmak istenen şeyi yaz
3. =Enter=
****** radio link oluşturma
1. sayfanın herhangi bir yerine <<<>>> içine kelimeyi yaz

[[radio link]] nedir?

****** external sitelere link oluşturma?
1. use [[][]] structure
2. enter *url* in first bracket
3. enter *alias* in second bracket
****** show only headers on startup
add =#+STARTUP: overview= to the beginning of the file
****** add footnotes to the bottom
1. create a heading in org mode
2. add [fn::footnote content] after the heading. for example;
******* Heading [fn::footnote content]

****** convert org file to html from outside emacs
1. you need to open emacs as a daemon to make this work
   #+begin_src sh
   emacs --daemon
   #+end_src
2. use *emacsclient -e* command to use emacs comands outside emacs.
   #+begin_src sh
   emacsclient -e "(progn (find-file \"~/txt/notitia.org\") (org-html-export-to-html) (kill-buffer))"
   #+end_src
you can also use every other command this way.
****** enable line numbers in source blocks
+ this will export with line numbers starting from 1
#+begin_src python -n
while True:
    print("*****")
    print("Emacs is LOVE")
    print("*****")
#+end_src

+ line numbers will start from 20
#+begin_src python -n 20
while True:
    print("*****")
    print("Emacs is LOVE")
    print("*****")
#+end_src

***** problems and solutions
*** doom
**** tips
+ great modules to use:
1. *pass* for password storing
2. *irc*
3. *org-roam* better note taking
4. *magit* awesome git tool
5. *deft* browse the notes
**** how to
***** create new keybinding for whichkey?
#+BEGIN_SRC elisp
(map! :leader :desc "toggle undo tree" "- c u" #'undo-tree-visualize )
#+END_SRC
***** do password management with pass
1. install pass on the system
#+BEGIN_SRC sh
sudo pacman -S pass
#+END_SRC
2. uncomment *:tools pass* in [[~/.doom.d/init.el][init.el]]
3. synchronize the doom
#+BEGIN_SRC sh
~/.doom.d/bin/doom sync
#+END_SRC
4. generate [[gpg]]
#+BEGIN_SRC sh
gpg --full-gen-key
#+END_SRC
5. generate your password directory
use email address that you entered while [[generate a gpg key][generating]] the gpg.
#+BEGIN_SRC sh
pass init $GPG_EMAIL
#+END_SRC
6. git integration for your passwords
this is a cool feature. you never loose your passwords even if you delete it!
#+BEGIN_SRC sh
pass git init
#+END_SRC
7. now fire up *doom*
8. open pass
SPC : pass
***** fast commit!
=SPC g g S c c "commit desc" C-c C-c q=
***** see the value of a variable?
1. =SPC ;=
2. type the variable name
3. =RET=
***** disable line wrapping
=SPC w t=
***** search usage of a function online
1. cursor over the *function*
2. =SPC s O=
3. =github RET=
4. add the extension of your programming language at the end of the promt;
example: /org-beamer-theme extension:el/
5. =RET=
***** convert org file to html on command line
1. start emacs daemon
   #+begin_src sh
   emacs --daemon
   #+end_src
***** how to block with doom
read [[https://ox-hugo.scripter.co/][this]]

***** add and delete projects in treemacs
****** I. way
this way will only affect the current workspace
=C-c C-p a=               add project to treemacs
=C-c C-p d=               remove project from treemacs
****** II. way
this will globally add your projects
1. =SPC :=
2. =treemacs-edit-workspaces=
3. add your project under *Default* like this;
   #+begin_src org
   ,** YOUR_PROJECT_NAME
        - path :: PATH_TO_PROJECT
   #+end_src
4. finish editing by doing =treemacs-finish-edit=

***** effective coding with doom emacs :tools:doom:emacs:programming:howto:
:PROPERTIES:
:EXPORT_FILE_NAME: programming-in-doom-emacs
:EXPORT_TITLE: programming in doom emacs
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
This is how I use [[https://github.com/hlissner/doom-emacs][doom emacs]] for daily coding. Doom and it's packages are working together to make developer's life easy. Here I made a complete list for you guys. This is a *step by step* guide to do coding on doom emacs. By the way when I say things like =C-c C-p= it means =CTRL + c + p=
****** before we start
to make things work enable *specified* modules in your *init* file
1. do =SPC f p= and select *init.el*
2. enable(uncomment) the following modules;
   - magit
   - treemacs
   - lookup
3. reload doom by doing =SPC h r r=
****** cloning projects
1. =SPC g C= to run magit clone
2. press =u= to specify repo url
3. paste your url with =Ctrl Shift v= (for linux)
4. specify the path for the repo
5. press =y= to make *origin* default branch
6. wait until the cloning is finished
7. press =q= to quit
****** adding projects
1. =SPC o p= to open *treemacs*
2. =C-c C-p a=
3. specify the *path* for your porject
4. now you see your project directory appeared in your *treemacs* menu
****** navigate files
1. =SPC SPC= brings menu with *all files* under your project root
2. type any keyword you want
you don't have to type entire file name. menu items will be reduced once you type some characters.
****** find symbols (method, variable, objects)
1. press =SPC /=
2. type your keyword or /function/, /variable/, /class/ or /struct/ names.
3. once you enter the keyword, doom will jump to that file instantly
4. =C-o= to go *back*
5. =C-i= to go *forward*
****** recent files
if you work on other things other than your project, for example editin some config files while coding etc, then you probably type the *file path* every single time to navigate to that config file. doom solves it with
1. =SPC f r= brings a menu or recently visited files
2. find and navigate
3. =C-o= to go *back*
4. =C-i= to go *forward*
****** lookup code
sometimes we can't find a good documentation on a method/module when coding. the best way to understand something is to looking at examples
1. navigate your cursor on method, module you want to understand
2. do =SCP s o=
3. choose *Github*
4. before hitting =RET= you can optionally specify the following items for more accurate results;
   - filename:
   - path:
   - extension:
here is an example for searching *printf* on github
#+begin_quote
printf extension:.c filename:main.c path:src
#+end_quote
****** find and replace projectwise
you can change a variable or method name projectwise. this is usefull in *code refactoring*. here is how to do that in doom;
1. =SPC /=
2. enter the *symbol name*. "emacs" in this example
3. =C-c C-e=
4. =:%s/emacs/doom/g=
5. =RET=
6. =Z Z=
there must be an easier way..

**** cheat sheet

=SPC - t t=                                 toggle tabs
=SPC - t l=                                 list tabs
=SPC - t n=                                 next tab
=SPC - t p=                                 previous tab
=SPC - t o=                                 create new tab
=SPC - t k=                                 kill tab

=SPC - c t=                                 open tagbar
=SPC - c g=                                 run gdb
=SPC - c u=                                 open undo tree
=SPC t z=                                   toggle zen mode
=SPC /=                                     ag
=SPC f r=                                   fast navigate recent files
=SPC g g S c c "msg" C-c C-c q=             fast commit
=SPC / foo C-c C-e :%s/foo/bar/g RET Z Z=   find foo and replace with bar in project
=SPC X t=                                   enter a new todo
=SPC w t=                                   disable line wrapping

=SPC n r t a=                               add roam tag
=SPC n r t d=                               delete roam tag
=SPC n r G=                                 start [[http://localhost:8080][graph server]]
=SPC SPC=                                   find file in project tree

=C-c C-p a=                                 add project to treemacs
=C-c C-p d=                                 remove project from treemacs

=SPC s f=                                   locate file in system

**** problems & solutions
***** with-editor.elc failed to provide feature ‘with-editor’
#+begin_src sh
rm -rf ~/.emacs.d/.local/straight/build*/with-editor && doom sync
#+end_src
***** omnisharp sever is not installed
1. =SPC :=
2. =omnisharp-install-server=
3. =RET=

*** vim
**** blog
***** less known vim tricks :vim:howto:tools:
:PROPERTIES:
:EXPORT_FILE_NAME: less-known-vim-tricks
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
****** ourput redirection
+ you can redirect outputs of a *shell command* in vim
  1. press =ESC=
  2. =:r !ls -la=
  3. =RET=
****** whitespace removal
+ remove all *trailing whitespaces*. you can also make the following a *permanent macro*
  1. press =ESC=
  2. =:%s/\s\+$//e=
  3. =RET=
****** time travel
+ show the file 10 mins *ago*
  1. press =ESC=
  2. =:earlier 10m=
  3. =RET=
+ show the file *after* 10 mins
  1. press =ESC=
  2. =:later 10m=
  3. =RET=
**** code blocks
+ essential vimrc
#+BEGIN_SRC sh
set tabstop=4
set shiftwidth=4
set expandtab
syntax on
inoremap jk <Esc>
#+END_SRC
**** how to
***** permanent macros in vim :vim:howto:tools:
:PROPERTIES:
:EXPORT_FILE_NAME: permanent-macros-in-vim
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
this is a short *step by step* tutorial to save your *vim macro* and use it everytime
1. fire up *vim*
2. do =q a=
3. create your macro
4. press =q= to finish
5. exit vim =:q!=
6. =vim ~/.vimrc=
7. type =let @q = ''=
8. put your cursor on *first single quote*
9. do =" a p=
10. macro should be pasted inside single quotes like:
#+begin_src sh
let @q = 'your_macro_content'
#+end_src
11. save and exit =ESC :wq=
12. fire up *vim* again
13. do =@ q=
now you should have your macro saved. after this moment everytime you open a vim session, this macro will be read from =.vimrc= and you will able to use it.
***** redirect command output into vim session
1. press =ESC=
2. =:r !ls -la=
3. =RET=
***** remove all trailing whitespaces
1. press =ESC=
2. =:%s/\s\+$//e=
3. =RET=
***** time travel
+ show the file 10 mins *ago*
  1. press =ESC=
  2. =:earlier 10m=
  3. =RET=
+ show the file *after* 10 mins
  1. press =ESC=
  2. =:later 10m=
  3. =RET=

*** spacevim
**** tutorials / howto
***** how to installation
1. install dependencies
#+BEGIN_SRC sh
sudo pacman -S neovim
sudo pacman -S clang
sudo pip install --user pynvim
sudo pip3 install --user pynvim
#+END_SRC
2. download and install
#+BEGIN_SRC sh
curl -sLf https://spacevim.org/install.sh | bash
#+END_SRC
3. open nvim and type *VimProcInstall*
#+BEGIN_SRC sh
nvim
:VimProcInstall
#+END_SRC
4. restart nvim. it will download all the plugins

***** essential keys
1. <F3> opens *file manager*
2. <F2> opens *Tagbar*
3. \ is the leader in spacevim
***** open configuration
SPC f v d
*** visual studio
**** shortcuts
1. create a class property by doing:
=prop TAB TAB=
2. constructor
=ctor TAB TAB=

** programming tools
*** make
**** one Makefile for everything :tools:make:programming:
:PROPERTIES:
:EXPORT_FILE_NAME: one-makefile-for-everything
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
here! you found it! this is one single Makefile that fits all projects with this file structure:

#+begin_src txt
project /
├── include
├── build
├── lib
├── obj
├── src
├── test
├── main.c
└── Makefile
#+end_src

#+BEGIN_SRC makefile
TARGET_EXEC ?= a.out

BUILD_DIR ?= ./build
SRC_DIRS ?= ./src

SRCS := $(shell find $(SRC_DIRS) -name *.cpp -or -name *.c -or -name *.s)
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)
DEPS := $(OBJS:.o=.d)

INC_DIRS := $(shell find $(SRC_DIRS) -type d)
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

CPPFLAGS ?= $(INC_FLAGS) -MMD -MP

$(BUILD_DIR)/$(TARGET_EXEC): $(OBJS)
$(CC) $(OBJS) -o $@ $(LDFLAGS)

# assembly
$(BUILD_DIR)/%.s.o: %.s
$(MKDIR_P) $(dir $@)
$(AS) $(ASFLAGS) -c $< -o $@

# c source
$(BUILD_DIR)/%.c.o: %.c
$(MKDIR_P) $(dir $@)
$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# c++ source
$(BUILD_DIR)/%.cpp.o: %.cpp
$(MKDIR_P) $(dir $@)
$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@


.PHONY: clean

clean:
$(RM) -r $(BUILD_DIR)

-include $(DEPS)

MKDIR_P ?= mkdir -p
#+END_SRC
*** microsoft SQL Server
**** how to
***** create more than one primary keys in a table
this technique is called *clustered primary key*
#+begin_src sql
CREATE TABLE [dbo].[StudentCourse]
(
    [StudentId] INT NOT NULL,
    [CourseId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ("StudentId","CourseId"),
    CONSTRAINT [FK_StudentCourse_Course] FOREIGN KEY ([CourseId]) REFERENCES [Course]([CourseId]),
    CONSTRAINT [FK_StudentCourse_Student] FOREIGN KEY ([StudentId]) REFERENCES [Student]([StudentId])
)
#+end_src

*** github
**** how to
***** search code in Github :howto:tools:git:
:PROPERTIES:
:EXPORT_FILE_NAME: search-code-in-github
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
1. for example I'm searching for "setq" keyword which exists in ".doom.d" directory, file is called "config.el" and is written in "Emacs Lisp" language
2. go to [[https://www.github.com/search][github search]]
3. search for the following string
   #+begin_src txt
setq extension:el path:.doom.d filename:config.el language:"Emacs Lisp" extension:.el
   #+end_src
*** hugo
this is a static website generator
**** what is
+ draft: this is a parameter which determines the post state. if draft is =true= then the post will not be shown to users

**** how to
***** get started
1. install first
   #+begin_src sh
   sudo pacman -S hugo
   #+end_src
2. create a new site directory
   #+begin_src sh
   hugo new site $YOUR_SITE_NAME
   #+end_src
3. download a theme from [[https://themes.gohugo.io/][here]].
   #+begin_src sh
   cd $YOUR_SITE_NAME
   git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c
   #+end_src
4. start the server to run your site
   #+begin_src sh
   cd $YOUR_SITE_NAME
   hugo server
   #+end_src
   find the localhost address and port in the output and open this url in browser. this port number is usualy *1313*
5. open in browser
   #+begin_src sh
   $YOUR_BROSWER http://localholt:$PORT_NUMBER
   #+end_src
***** embed your telegram account
1. fire up your *telegram*
2. go to *settings*
3. click on your *username* (it has '@' at the beginning)
4. at the bottom of the menu, you will see a link like;
   #+begin_quote
https://t.me/YOUR_USERNAME
   #+end_quote
5. take this link and add to your website by following your theme's *social settings*

**** examples
***** config.toml file
#+begin_src toml
baseURL = "http://example.org/"
languageCode = "en-us"
DefaultContentLanguage = "en"
title = "Meghna"
theme = "meghna-hugo"
summaryLength = 10

[taxonomies]
  author = "author"
  category = "categories"
  tag = "tags"

# Menu
[menu]
    [[menu.nav]]
    name = "About Us"
    URL = "about"
    weight = 2

    [[menu.nav]]
    name = "Service"
    URL = "services"
    weight = 3

    [[menu.nav]]
    name = "Portfolio"
    URL = "portfolio"
    weight = 4

    [[menu.nav]]
    name = "Team"
    URL = "our-team"
    weight = 5

    [[menu.nav]]
    name = "Pricing"
    URL = "pricing"
    weight = 6

    [[menu.nav]]
    name = "Blog"
    URL = "blog"
    weight = 7

    [[menu.nav]]
    name = "Contact"
    URL = "contact-us"
    weight = 8

# Site params
[params]
home= "Home"
logo = "images/logo.png"
gmapAPI = "https://maps.googleapis.com/maps/api/js?key=AIzaSyCcABaamniA6OL5YvYSpB3pFMNrXwXnLwU&libraries=places"
# Meta data
description = "Responsive Multipurpose Parallax HTML5 Template"
author = "Themefisher"
# Google Analitycs
googleAnalitycsID = "Your ID"
custom_css = ["css/custom.css"]

    # Banner Section
    [params.banner]
    enable = true
    bgImage = "images/slider/hero-area.jpg"
    icon = "tf-ion-play"
    heading = "Experience the new reality"
    content= "Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugit, excepturi. At recusandae sit perferendis autem,iste tempora nostrum numquam sapiente!"
    btn = true
    btnText="Explore Us"
    btnURL="#services"

    # call to action
    [params.cta]
    enable = true
    title = "Great Design & Incredible Features"
    content = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Officiis tenetur odio impedit incidunt? Omnis accusantium ea reiciendis, fugit commodi nostrum."
    btnURL = "#"
    btnText = "Start a project with us"

    # counter
    [params.counter]
    enable = true
    bgImage = "images/backgrounds/bg-1.jpg"
        [[params.counter.counterItem]]
        title = "Happy Clients"
        icon = "tf-ion-android-happy"
        count = "320"

        [[params.counter.counterItem]]
        title = "Projects completed"
        icon = "tf-ion-archive"
        count = "565"

        [[params.counter.counterItem]]
        title = "Positive feedback"
        icon = "tf-ion-thumbsup"
        count = "95"

        [[params.counter.counterItem]]
        title = "Cups of Coffee"
        icon = "tf-ion-coffee"
        count = "2500"

    # footer
    [params.footer]
        copyright = "Themefisher Team"
        copyrightURL = "http://www.themefisher.com"

        # social Icons
        [[params.footer.socialIcon]]
        icon = "tf-ion-social-facebook"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-twitter"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-google-outline"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-youtube"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-linkedin"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-dribbble-outline"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-pinterest-outline"
        url = "#"
#+end_src
*** docker
**** concepts
**** tips
**** facts
**** how to
**** problems & solutions

** command line utility
*** imagemagick
**** how to
***** resize an image (ignore aspect ratio)
#+BEGIN_SRC sh
convert example.png -resize 200x100 example.png
#+END_SRC
***** resize an image (respect aspect ratio)
#+BEGIN_SRC sh
convert example.png -resize %50 example.png
#+END_SRC
***** convert between formats
#+BEGIN_SRC sh
convert howtogeek.png howtogeek.jpg
#+END_SRC
***** rotate an image
#+BEGIN_SRC sh
convert howtogeek.jpg -rotate 90 howtogeek-rotated.jpg
#+END_SRC
***** negate an image
#+BEGIN_SRC sh
convert splash.png -negate splash.png
#+END_SRC
*** vboxmanage
**** how to
***** start a vm
#+begin_src sh
vboxmanage startvm win10
#+end_src
***** take a snapshot of a vm
#+begin_src sh
vboxmanage snapshot win10 take $NAME
#+end_src
***** restore snapshot
#+begin_src sh
vboxmanage snapshot win10 restore $NAME
#+end_src
*** bc
**** how to
***** use bc
#+begin_src sh
echo "1+1" | bc # outputs 2
#+end_src
*** gpg :tools:howto:gpg:
:PROPERTIES:
:EXPORT_FILE_NAME: what-is-gpg
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_TITLE: what is gpg
:EXPORT_AUTHOR: savolla
:END:
+ also called *gnu privacy guard*
+ this is a key which helps to encrypt and decript files
+ there are 2 types of gpg keys;
1. private : unlocks everything you lock with that
2. public : you send to other people
+ gpg keys _expire_ ! so you need to generate them once or twice a year
**** how to
***** generate a gpg key
1. first generate personal key:
   #+BEGIN_SRC sh
gpg --full-gen-key
   #+END_SRC
2. choose *RSA and RSA*
3. choose *4096* for maximum security
4. choose *y = 1* to make the key expire in one year
5. enter your *real name and surname*
6. enter your *email*
7. confirm
8. enter a password. this is the password of your key. _DON'T FORGET IT_

***** encrypt files with gpg
1. navigate to directory you want to encrypt (here I generate a random file)
   #+BEGIN_SRC sh
echo "secret message" > ~/secret-file.txt
   #+END_SRC

2. encrypt the file
   #+BEGIN_SRC sh
# -r : recepient (in this case me)
# -e : file to encrypt
gpg -r your_mail@provider.com -e secret-file.txt
   #+END_SRC
   after this command, a file with *gpg* extension will be created. so now you can put this file (*secret-file.txt.gpg*) on the internet and no one will know what it is

3. remove the original file (optional)
   + basic remove
   #+BEGIN_SRC sh
rm secret-file.txt
   #+END_SRC

   + deep remove (more secure)
   #+BEGIN_SRC sh
shred -u secret-file.txt
   #+END_SRC

***** decrypt files with gpg
1. decrypt command
   #+BEGIN_SRC sh
gpg -d secret-file.txt
   #+END_SRC
2. then enter the password of your *gpg key*. the password you entered while [[generate a gpg key][generating]] the key
*** git
**** how to
***** undo the "git add"
#+begin_src sh
git reset $YOUR_FILE
#+end_src
***** control a repository from outside
1. use *--git-dir=* option
2. specify the *.git* folder of your project
   #+begin_src sh
   git --git-dir=$HOME/path/to/.git
   #+end_src
3. you can now issue normal git commands after that string like:
   #+begin_src sh
   git --git-dir=$HOME/path/to/.git add -u
   git --git-dir=$HOME/path/to/.git commit -m "initial"
   #+end_src
***** store your credentials for automatic pushes
#+begin_quote
this is not secure! your password and username will be stored inside *.git* directory in *planetext*. enyone on your PC will have access to them. you've been warned!
#+end_quote

1. go to your repository
   #+begin_src sh
   cd $YOUR_REPO
   #+end_src
2. make some changes
3. modify the *git config* for password and username storing
   #+begin_src sh
   git config --global credential.helper store
   #+end_src
4. commit and push your changes
   #+begin_src sh
   git commit -m "username and password adjustment"
   git push -u origin $YOUR_BRANCH
   #+end_src
5. now the git utility will ask you *username* and *password*. enter those and you are good to go

after this operation, git won't ask for username and password for this repository. this is not a global modification btw. you have to do this for every repo
***** switch to specific commit
useful if you want to go back to the last checkpoint in your project. let's say you commited your project when it was working without problems. you code a little bit more and bam.. it's not working now.. insted of fixing bugs, you might go back in git commit history
1. get the last commit's *id*
   #+begin_src sh
git log
   #+end_src
2. go back to last commit
   #+begin_src sh
git reset --hard $COMMIT_ID
   #+end_src
now all the local changes you made will be lost
*** stow
restores dotfiles from a directory
*** youtube-dl
**** how to
***** download video with best quality
#+begin_src sh
youtube-dl -f 22 $VIDEO_LINK
#+end_src
***** download a playlist
#+begin_src sh
youtube-dl -cio -f 22 '%(autonumber)s-%(title)s.%(ext)s' $VIDEO_LINK
#+end_src
*** rofi
program launcher and more
**** how to
***** change theme
#+begin_src sh
rofi-theme-selector
#+end_src

** hardware
*** CASIO fx-991ex
**** how to
***** solve and equation for x
1. enter an equation. for example:
/x + 7 = 10/
2. press: *SHIFT CALC*
you will see x=some_value. don't worry. this is just x with previous stored value
3. press *=*
now you see the value for x
***** take percentage of a number
/$NUMBER * $percentage %/

** retroarch
*** facts
**** best cores for specific platforms
+ *snes* : bsnes-hd beta
+ *n64*: mupen43plus-next
+ *ps1*: epsxe
* Concepts
** ORM
+ this is a technique that *takes the class* and converts it's properties into a database table
+ for example consider this class:
#+BEGIN_SRC python
class Human:
    id = 0
    name = ""
    surname = ""
    birthday = ""
#+END_SRC
this class will be converted to the *database table* called *Human*

| Id | name | surname | birthday |
|----+------+---------+----------|
|    |      |         |          |

+ Window's ORM technology is the *Entity Framework*

** MVC
+ Model, View and Controller
+ it's a *design pattern*
+ found in 1970
+ currently widely adopted in *Web Development*
+ examples of MVC frameworks;
  1. .Net Core
  2. Ruby on Rails
  3. Express
+ Model : contains all classes
+ Controller : instantiates classes from Model and returns them to View
+ View : represents Controller's results to the user
** Layered Architecture
+ this is a standard in software development
+ software must respond to variety of requirements. this can't be done if our software is coupled and messy. so this standard was developed. it makes software open to new requirements
+ 3 pillars of Layered Architecture;
  1. Data Layer (database)
  2. Business Layer (UML / Logic)
  3. Presentation Layer (UI / UX)
*** data layer
this layer is responsible for data transmission between business layer and database.
#+begin_src text

    +----+          +------+          +----------+
    | DB | <------> | Data | <------> | Business |
    +----+   data   | Layer|   data   | Layer    |
                    +------+          +----------+

#+end_src
this layer manages different kind of tables like /user tables/, /report tables/, /general application tables/

*** business layer
operates retrieved data from data layer. basic CRUD operations or other application spesific logic, permissions works there

*** presentation layer
how user sees the results from business layer. this includes some User Interface Design thingies. user interface might be;
1. desktop form application
2. web
3. console

** NoSQL
+ NoSQL = "Not Only SQL"
+ it's a database but;
  a. uses XML or JSON instead of tables
  b. stores data into RAM instead of harddisk
** Turing Completeness
** CMS
** EmbOS

* Linux
** how to
*** manage dotfiles
**** create dotfiles
1. initialize git
#+begin_src sh
git init --bare $HOME/.dotfiles
#+end_src

2. add alias to your .bashrc
#+begin_src sh
alias dotfiles="/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME"
#+end_src

3. don't show untracked files since they are too much
#+begin_src sh
cd ~/.dotfiles
git config status.showUntrackedFiles no
#+end_src

4. source the .bashrs
#+begin_src sh
source ~/.bashrc
#+end_src

5. add your dotfiles
#+begin_src sh
dotfiles add $YOUR_DOTFILE
#+end_src

6. commit
#+begin_src sh
dotfiles commit
#+end_src

7. create a repository called *dotfiles* on *github*

8. essentials
#+begin_src sh
dotfiles branch -M main
dotfiles remote add origin https://github.com/savolla/dotfiles.git
dotfiles push -u origin main
#+end_src

**** restore dotfiles on a new system

1. install *stow*
#+begin_src sh
sudo pacman -S stow
#+end_src

2. clone your dotfiles from github
#+begin_src sh
git clone https://github.com/savolla/dotfiles.git ~/.dotfiles
#+end_src

3. restore your dotfiles
#+begin_src sh
cd ~/.dotfiles
stow *
#+end_src

*** see lastly modified 5 files
#+begin_src sh
ls -tl | head -n 5
#+end_src
*** pause a program
this can be usefull when you want to pause a running script or a program
1. find the process id and assign it to a variable
   #+begin_src sh
   PROCESS_ID=$(ps aux | grep -i $YOUR_PROCESS | grep -v grep | awk '{ print $2 }')
   #+end_src
2. pause the process.
   #+begin_src sh
   kill -STOP $PROCESS_ID
   #+end_src
3. process will stop. now you can bring it back to live with:
   #+begin_src sh
   kill -CONT $PROCESS_ID
   #+end_src

**** I have a better idea
let's add two functions in /.bashrc/ !
1. open up =~/.bashrc= then add the following
   #+begin_src sh
pause() {
   PROCESS_ID=$(ps aux | grep -i $1 | grep -v grep | awk '{ print $2 }')
   kill -STOP $PROCESS_ID
}

cont() {
   PROCESS_ID=$(ps aux | grep -i $1 | grep -v grep | awk '{ print $2 }')
   kill -CONT $PROCESS_ID
}
   #+end_src

2. refresh your =.bashrc=
   #+begin_src sh
source ~/.bashrc
   #+end_src

* Project Journal
** Library Automation in C# .NET Form
+ :conclusion: it turns out that a .NET project can have multiple forms
+ :howto: to add a new form to aproject;
  1. right click solution root
  2. =Add=
  3. =new item=
  4. select =form (windows form)=
  5. click =add=
+ :log: i renamed my newly created form "crud_ogrenciler"
+ :conclusion: visual studio makes it simple for renaming stuff projectwise
+ :log: i copyed and pasted buttons from the first menu to newly created form. so the user will think he is still in the same menu
+ :log: changed names of both forms to "Library Automation"
+ :conclusion: when i add an element and press 't', it directly focuses to properties menu and changes the *text* field. so I don't need to find a property every time from properties menu. I'll try other characters now
+ :conclusion: it is not about 't'. when i select any element from the form and press any key, it changes it's text area. it must be button, label etc
+ :log: added a line seperator below buttons. so it will look like a toolbar
+ :howto: adding a line seperator;
  1. add a *Label* control to your form.
  2. set *Label* Text to empty.
  3. set *BorderStyle* to Fixed3D.
  4. set *AutoSize* to false.
  5. set *size* to 800,2
+ :log: after button placement is done, I'll need to display retriewed results from the database (student and book database) inside form. I found a tutorial [[https://www.youtube.com/watch?v=RRmdwqHKN7A][here]] for this operation
+ :conclusion: gridview element let's us to enter, edit and delete data by default. so maybe I won't need separate add, edit and delete buttons
+ I paused and stopped building the view layer. beause it is unclear if something is going to work as I expected or not. I started to build the database now. and i realised that I suck too much in desktop applications. I don't design a database in my life. so I need a tutorial..
+

* Music
** recommendations :music:
:PROPERTIES:
:EXPORT_FILE_NAME: music-recommendations
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:EXPORT_TITLE: savolla's music recommendations
:END:
[[file:./images/screenshot-12.png]]
Here I made some album recommendations. this is my personal playlist which consists of very "non-normie" stuff. albums in this list will start with the most "normie" music and will incrementally get heavier
*** level 1
easier to digest and fun
+ [[https://tokyoroseofficial.com/album/chases-2][Tokyo Rose - Chases 2 ]]
[[file:./images/screenshot-14.png]]
  great synthwave album.. my favorite song on this is *midnight chase*
+ [[https://dancewiththedead.bandcamp.com/album/loved-to-death][Dance with the Dead - Loved to Death]]
[[file:./images/screenshot-15.png]]
  synthwave + some metal elements. great if you like distortion guitar riffs. this one includes *awesome* guitar solos. and the production is just incredible
+ [[https://alix2084.bandcamp.com/album/alix-2084-ep-2][ALIX 2084 (EP)]]
[[file:./images/screenshot-16.png]]
  directly jump to *Elevator Dance Party* song. great work and really underrated. those tempo changes will shake your brain inside
+ [[https://megadrive.bandcamp.com/album/hardwired-v14][Mega Drive - Hardwired V1.4]]
[[file:./images/screenshot-17.png]]
  *Dataline* *Dataline* *Dataline* !!
+ [[https://www.youtube.com/watch?v=Xw5AiRVqfqk][Aphex Twin - Selected Ambient Works 85-92]]
[[file:./images/screenshot-18.png]]
  legent album from a legend
+ [[https://plini.bandcamp.com/album/sweet-nothings][Plini - Sweet Nothings]]
[[file:./images/screenshot-19.png]]
  I bet this will be the sweetest thing you will ever listened. your ears will overflow with candies

*** level 2
still electronic but with some interesting elements
+ [[https://www.youtube.com/watch?v=OooYpuBd3gY][Heptaedium - "A M E N"]]
[[file:./images/screenshot-20.png]]
  did you ever listened to *break core*? edgy..
+ [[https://www.youtube.com/watch?v=nzvLiwUK3R8][Aphex Twin Live at Field Day]]
[[file:./images/screenshot-21.png]]
  did you ever experienced ear bleeding? just skip to 1:51:00 and wait.

*** level 3
still electronic but.. this time adding depression
+ [[https://boardsofcanada.bandcamp.com/album/twoism][Boards of Canada - Twoism]]
[[file:./images/screenshot-22.png]]
  this album might look harmless but wait until your soul evaporates completely
+ [[https://www.youtube.com/watch?v=PkVenDN7Y9A][Hrsta - Ghosts Will Come And Kiss Our Eyes]]
[[file:./images/screenshot-23.png]]
  don't listen to this if you lost someone recently
+ [[https://www.youtube.com/watch?v=szk5vGqPn2U][The LONGING - Original Soundtrack]]
[[file:./images/screenshot-24.png]]
  wait 400 days

*** level 4
dark ambient passage. contains some depressive and horror materials. you also might want to stop there and enjoy 1st, 2nd and 3rd levels because things get non-normie here
+ [[https://www.youtube.com/watch?v=ZKa5LwFgAOA][Gates of Morheim - Omagatoki]]
[[file:./images/screenshot-25.png]]
  contains ethnic sounds. it's like a ritual music + dark ambient elements
+ [[https://www.youtube.com/watch?v=g3xQCMDz5Vs][Kurotokage - Call To The Deep]]
[[file:./images/screenshot-27.png]]
  similar to Gates of Morheim but deeper and darker. this album will make you dizzy and tired
+ [[https://cryochamber.bandcamp.com/album/kapnobatai][Atrium Carceri - Kapnobatai]]
[[file:./images/screenshot-28.png]]
  things get serious and deep after this. especialy after the track called "A Stroll Through the Ancient City"
+ [[https://cryochamber.bandcamp.com/album/dubbed-in-black][Alt3r3d Stat3 - Dubbed in Black]]
[[file:./images/screenshot-29.png]]
  paranormal stuff

*** level 5
"guitars and drums" era begins but without vocals. gets heavier and heavier
+ [[https://www.youtube.com/watch?v=4z9X0htC3mg][Modern Day Babylon - Travelers]]
[[file:./images/screenshot-30.png]]
  my first djent album. this is the first metal album without vocals on this list
+ [[https://amoghsymphony.bandcamp.com/album/the-quantum-hack-code][Amogh Symphony - The Quantum Hack Code]]
  [[file:./images/screenshot-10.png]]
  awesome concept album. there are some Indian ethnic elements on that one. good one.
+ [[https://www.youtube.com/watch?v=qcpmtd-baKU][Heptaedium - KAWAII!!]]
[[file:./images/screenshot-31.png]]
  underrated stuff. has some djenty elements also inherits from *nintendo core* genre. really interesting album
+ [[https://www.youtube.com/watch?v=QlebB9SlrSs][Heptaedium - Underground Business]]
[[file:./images/screenshot-32.png]]
  have some edgy songs. heavier than the first one KAVAII!!
+ [[https://thehelixnebula.bandcamp.com/releases][The Helix Nebula - Meridian]]
[[file:./images/screenshot-33.png]]
  now we're talking..
+ [[https://www.youtube.com/watch?v=WngGXkLEJ0Y][Infant Annihilator - The Palpable Leprosy of Pollution]]
[[file:./images/screenshot-34.png]]
  this will beat the shit out of your ears..

*** level 6
vocals come to play. death metal, technical death metal stuff. list gets *heavier and heavier*.
+ [[https://www.youtube.com/watch?v=TTs9AUo5R3U][Dissonance In Design - Sentient ]]
[[file:./images/screenshot-35.png]]
  technical death metal album but without crazy riffs
+ [[https://konkeror.bandcamp.com/][Konkeror - The Abysmal Horizons]]
[[file:./images/screenshot-37.png]]
  just heavy.. skip to "Towers" song you'll get what i mean
+ [[https://www.youtube.com/watch?v=RL84JVt6sjs][Bloodbath - Live At Wacken 2005]]
[[file:./images/screenshot-38.png]]
  this is the best metal live performance
+ [[https://www.youtube.com/watch?v=St6lJaiHYIc][Edge of Sanity - Crimson]]
[[file:./images/screenshot-39.png]]
  this album contains only one song
+ [[https://www.youtube.com/watch?v=cOhEgg2jNSw][Bloodbath - Unblessing The Purity]]
[[file:./images/screenshot-40.png]]
  blasting the virginborn
+ [[https://www.youtube.com/watch?v=dm3i7fWufrw][Ouroboros - Glorification of a Myth]]
[[file:./images/screenshot-41.png]]
  fine album. lots of solos and great (hard to play) guitar riffs
+ [[https://www.youtube.com/watch?v=5-E4ZRZg2bY][Krallice - Diotima]]
[[file:./images/screenshot-42.png]]
  actual masterpiece. check *Telluric Rings* song if you still with me
+ [[https://www.youtube.com/watch?v=9MIHr_Ypql4][Krallice - Dimensional Bleedthrough]]
[[file:./images/screenshot-43.png]]
  I like those feedbacks man..
+ [[https://zenithpassage.bandcamp.com/album/cosmic-dissonance-remastered][The Zenith Passage - Cosmic Dissconance]]
[[file:./images/screenshot-44.png]]
  i don't know in which category should I put this album
+ [[https://www.youtube.com/watch?v=ShiEuQk5agg][Inferi - The Path of Apotheosis]]
[[file:./images/screenshot-45.png]]
  this is one of those albums when your entire body chills. guitars sound awesome and played by highly skilled musicians. those tremolo pickings man..
+ [[https://uniqueleaderrecords.bandcamp.com/album/dasein][First Fragment - Dasein]]
[[file:./images/screenshot-46.png]]
  this album contains some guitar techniques...
+ [[https://www.youtube.com/watch?v=_TfPd0jlavA][Rings of Saturn -  Embryonic Anomaly]]
[[file:./images/screenshot-47.png]]
  brain drill but with major scales
+ [[https://spawnofpossession.bandcamp.com/album/incurso][Spawn Of Possession - Incurso]]
[[file:./images/screenshot-48.png]]
  wait until "Bodiless Sleeper" song

*** level 7
deepest depths of hell..
+ [[https://www.youtube.com/watch?v=uXNHYb14U7U][Vital Remains - Icons of Evil]]
[[file:./images/screenshot-53.png]]
  extremely satanic and brutal. those harmonic minor scales will blow your mind. this album is the first one on this list because of it's melodic elements. next ones are not melodic anymore
+ [[https://severetorture.bandcamp.com/][Severe Torture - Slaughtered]]
[[file:./images/screenshot-49.png]]
  brutality takes another form
+ [[https://cryptopsyofficial.bandcamp.com/album/none-so-vile][Cryptopsy - None So Vile]]
[[file:./images/screenshot-50.png]]
  insane vocals and drums
+ [[https://www.youtube.com/watch?v=xGGK93eqAMo][Abominable Putridity - The Anomalies Of Artificial Origin]]
[[file:./images/screenshot-51.png]]
  Russians know that stuff.
+ [[https://www.youtube.com/watch?v=Uc-E9KODwpM][Extermination Dismemberment - Serial Urbicide]]
[[file:./images/screenshot-52.png]]
  heaviest thing i've ever heard
** blast beats
1. traditional blast
   [[file:./images/screenshot-03.png]]
2. hyper blast
   [[file:./images/screenshot-04.png]]
3. bomb blast
   [[file:./images/screenshot-05.png]]
4. pussy blast
   [[file:./images/screenshot-06.png]]
5. diarrhea blast
    [[file:./images/screenshot-07.png]]
* Book Notes
** Cracking the Coding Interview Notes :book:
:PROPERTIES:
:EXPORT_FILE_NAME: cracking-the-coding-interview-notes
:EXPORT_TITLE: *Cracking the Coding Interview* Notes
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
*** Chapter 1
+ recruiters look for the following;
  - analytical skills
    a. how *confidently* you solved the problem
    b. how *optimal* was your solution
    c. how *fast* you are
    d. how *efficient* was your algorithm
  - coding skills
    a. how *clean* your code is
    b. how *good* your *style* was
    c. did you *handle errors* or not
  - computer science knowledge. do you have *strong foundation* or not
  - did you make *challanging* / *interesting* projects before or not
  - do you *communicate well* or not
+ having knowledge of data structures and algorithms is really important and positively corelates with being a good developer
+ the reason behind *whiteboard coding* is that recruiters want you to focus on _actual problem solving_ instead of struggling in *restricted* computer environment when compilers spit errors all over the place. the code you write does not need to be perfect and it's okay if it contains some syntactical errors. just show to the interviewer how you approach to the problem and write an acceptable code
+ companies usually follow a pattern when selecting interview questions. there are two types of questions;
  1. algorithm questions
  2. technology questions (do you have experience with techonology X?)
+ interviewers always compare your performance to other's that came before and after you. even if you think that you performed well, a japanese hacker who came before you can change all the game. it's all about luck m8
+ don't think that you've been rejected immediately if you don't get response in 2-3 days. your interviewer might still work on your and other assessments. be patient and calm
+ if you've been rejected but really want that job you must wait for at least *6 months* before re-application.
*** Chapter 2
+ before face-to-face interview you always get a *screen* interview. this is actually a phone interview where skype or relative apps are used
+ coding and algorithms questions are asked during the screen interview. questions are hard as ones that asked in face-to-face interview
+ sometimes interviewer might give you a *homework* which you solve and send the code through e-mail. (rare case)
+ the most of the time questions are asked in real time and you try to solve them while interviewer watches (common case)
+ you do one or two screens before they take you to face-to-face arena

*** Chapter 3
+ aşağıdaki maddelerde, bazı _değişken_ durumlar anlatılmıştır;

  - görüşmeciler (interviewer) çok tecrübeli ve uzun süre çalışan geliştiricileri, daha düşük standartlarda görüp algoritmik soruları daha kolay sorabilir. ne de olsa bu insanlar mezun olalı yıllar olmuştur ve görüşmeciler, onların paslandıklarının farkındadırlar

  - bazı şirketlerde de tam tersi olabilir. yani uzun süre çalışanların daha çok problem çözdüğünü ve bu konuda yıllar geçtikçe daha iyi olduklarını düşünürler ve yeni mezunlara göre daha zor sorabilirler

  - çoğu zaman tecrübeli kişilere *system tasarımı* soruları gelirken yeni mezun olanlar bu konuda çalşma yapmadıkları için (daha çok akademik derslere ağırlık verdiklerinden) genelde bu sorulardan kurtulabilirler

  - yeni mezunlara göre tecrübelilerin, sorulara çok daha ayrıntılı cevap vermeleri beklenir. yani yeni mezunsak iş çok daha kolay. sadece algoritma sorularına çalışmamız (hackerrank, codewars) ve şu an zaman varken bol bol proje yapmamız yeterli olacaktır. tecrübelilerin iş bulması bizden daha zor

+ *skill atrophy*: bir yetenek ya da bilgi kullanılmadığında, o yeteneğin körelmesi anlamına gelir. bizim perspektifimizden bakıldığında, algoritma ve kodlama bir yetenektir ve asla atrofiye uğramaması gerekir

#+begin_quote
kitapta bu bölümde, SDET ve PM ile ilgili kariyer ve görüşme tavsiyeleri verilmiş. bu bizi şu anda ilgilendirmiyor.
#+end_quote

+ SDET: (software design engineer and tester) yazılımları test eden elemanlardır. bunların genelde normal bir developerdan daha iyi olması beklenir çünkü bu iş aynı zamanda *kalite kontrol*'ün yazılım camiasındaki karşılığıdır. bu yüzden bir SDET'in iş bulması demek, buraya kadar bahsi geçen pozisyonlardan daha çok çalışması gerek demek oluyor

+ PM (Product Manager): daha çok takım yönetimi yapan ve geliştiricilerin ürettiği yazılımın sorumluluğunu üstlenen elemandır. kod yazmaktan çok işin business tarafıyla ilgilenir

+ bir startup'a katılmak istiyorsan;

  - CV'de ilk göze çarpan kısmın, *yapılan projeler* olması gerekir. startup alım süreçlerinde CV incelemesi sırasında kişinin ne kadar *girişimci* ve programlama konusunda ne kadar *üretken* olduğu, bu kısımda göze çarpar. yani "ben şu dilleri biliyorum", "şu teknolojileri biliyorum"'a bakmazlar (genelde)

  - kesinlikle, bir startup görüşmecisiyle "samimi" ve "arkadaşça" iletişim kurulması gerekir. şirket henüz çok küçüktür ve insanlar yanlarında genelde takılabilecekleri insanlar arar. burada işin sosyal tarafı, iş tarafı kadar ağır basabilir

  - startup'daki projede kullanılan dil ile ilgili çok iyi bir derinliğe sahip ol çünkü sorular genelde dil spesifik gelir. (bir startup'a göre dil öğrenmek değil de bildiğimiz dilde iş yapan bir startup'a başvurmak çok daha efektif olur)

  - strtuplar tecrübe de isterler. buradan benim çıkarttığım, büyük şirketler, tecrübeli developerları görüşme esnasında çok hırpalarken, startuplarda genelde iş küçük olduğundan tecrübelileri havada kapıyor olabilirler. bu yüzden yeni mezun birinin büyük bir şirkette iş bulması, startup'da iş bulmasından daha kolaydır (?)

#+begin_quote
buradan sonrası, şirket içi iş görüşmelerinden ve interviewerlara tavsiyelerden bahsediyor. bizim için şu anlık önemli değil
#+end_quote












*** Chapter 4

* Foreign Languages
** English
*** unknown words
=concise=               özlü, kısa
=conservative=          muhafazakar
=contenteditable=       memnun
=prescient=             ileri görüşlü
=th+ sauruses=           eş anlamlı
=constitute=            oluşturmak
=predicate=             yüklem
=subsequent=            sonraki
=evidently=             belli ki
=however=               ancak
=rigorously=            titizlikle
=vocabulary=            kelime bi+ gisi
=precisely=             kesin olarak
=differing=             farklı
=intern=                asistan
=uncharted=             keşvedilmemiş
=curated=
=suppress=              bastırmak
=superstition=          batıl inanç
=initiative=            girişim
=entrepreneurial=       girişimci
=diligence=             çalışkanlık
** Русский
*** неизвестные слова
* Template
** facts
** concept / term
** tutorial / howto
** quiz
** lists / tables
** code blocks
** problems and solutions
* Idea
