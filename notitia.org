#+TITLE: Notitia
#+AUTHOR: Oleksiy Nehlyadyuk
#+EMAIL: savolla@protonmail.com
#+DATE: Fri Nov 13 09:19:17 2020
#+LANGUAGE: en
#+STARTUP: overview
#+HUGO_BASE_DIR: ~/txt/blog/
#+HUGO_SECTION: en/posts

* Topics
** Software Engineering
*** tips
+ Bir katman, diğer bir katmanı *new*'lememelidir. onun yerine her zaman araya bir *interface* konulmalıdır. Bu sayede SOLID'in DIP ilkesi çalışmış olur
**** Kod yazarken dikkat edilmesi gerekenler
***** 1. Encapsulation
****** method encapsulation'ı
bir method yazarken, if else, ya da switch case silsilesi başladı ise o ifleri ve elseleri başka bir methoda aktar
+ eski kod;
  #+begin_src cpp
  class A {
  public:
      int method1( int param ) {
          /*
             bazı önemli kodlar (10 satır)
          */
         if ( param == 12 ) {
             return 24;
         }
         else if ( param == 13 ) {
             return 25;
         }
         else {
             return 26;
         }
      }
  }
  #+end_src
+ yeni kod;
  #+begin_src cpp
  class A {
  public:
      int method1( int value ) {
          /*
             bazı önemli kodlar (10 satır)
          ,*/
          return getValue( value );
      }

      int getValue ( int value ) {
         if ( value == 12 ) {
             return 24;
         }
         else if ( value == 13 ) {
             return 25;
         }
         else {
             return 26;
         }
      }
  }
  #+end_src
****** class encapsulation
baktın yukarıdaki kod örneğinde, ayrılan method daha çok iş yapmaya başladı, fonksiyonalitesi arttı, o zaman bu mehodu da küçük methodlara ayırıp ayrı bir class aç
***** 2. Programming to Interface
+ code *reuse* için kullanılan prensiptir. sınıfları birbirine bağımlı hale getirmeden kullanman gerekir. bunu nasıl yaparız? aşağıda birbirine bağımlı sınıflar gösterilmiştir;
  #+begin_src plantuml :results output
  @startuml
  class A {
      ...
      method1()
  }
  class B {
      ...
      method2()
      method3()
      method4()
  }
  A -> B
  @enduml
  #+end_src

  #+RESULTS:
  [[file:/tmp/babel-AKVKVd/plantuml-nebork.png]]
+ yukarıdaki UML diyagramının kod karşılığı;
  - A.cpp
    #+begin_src cpp
    #include "B.cpp"

    class A {
      B b;
    public:
      void method1() {
        b.method2();
        b.method3();
      }
    };
    #+end_src
  - B.cpp
    #+begin_src cpp
    class B {
    public:
      void method2() { /* some code */}
      void method3() { /* some code */}
      void method4() { /* some code */}
    };
    #+end_src
+ A sınıfı, B'yi import etti ve B'den sadece 2 method kullandı. method4 de B.cpp ile beraber geldi ki A ona ihtiyaç duymuyor. bu senaryoda yarın öbür gün B yerine başka bir sınıf kullanmak istersek, A classında bir çok değişiklik yapmamız gerekir. bunu önlemek için *programming to interface* dizayn prensibini kullanırız. UML diyagramı ve kod örneği aşağıda verilmiştir;
  #+begin_src plantuml :results output
  @startuml
  class A {
      ...
      method1()
  }
  class B {
      ...
      method2()
      method3()
      method4()
  }
  interface IC {
      method2()
      method3()
  }
  A -> IC
  IC <|.. B
  @enduml
  #+end_src

  #+RESULTS:
  [[file:/tmp/babel-AKVKVd/plantuml-d1lACU.png]]

  yukarıdaki UML diyagramına göre, A class'ı artık direk B'ye bağlıd değil. ikisi arsına bir interface koyduk (Abstract class) ve A sınıfı bu interface'i include ediyor. B ise bu interface'i implemente ediyor;

  - A.cpp
    #+begin_src cpp
    #include "IC.cpp"

    class A {
        public:
            void method1() {
                method2() {/* some code */}
                method3() {/* some code */}
            }
    };
    #+end_src
  - IC.cpp
    #+begin_src cpp
    class IC {
    public:
        virtual void method2() = 0;
        virtual void method3() = 0;
    };
    #+end_src
  - B.cpp
    #+begin_src cpp
    #include "IC.cpp"
    class B : public IC {
        public:
            void method2() {/* some code */}
            void method3() {/* some code */}
            void method4() {/* some code */}
    };
    #+end_src
*** concepts
**** UML
***** arrows and their meanings
****** inheritance
+ UML representation
  #+begin_src plantuml :results output
    @startuml
    class A{}
    class B{}
    A -|> B
    @enduml
    #+end_src
  #+RESULTS:
  [[file:/tmp/babel-AKVKVd/plantuml-B49axT.png]]
+ relation
  A *is a* B
****** composition
+ UML representation
  #+begin_src plantuml :results output
    @startuml
    class A{}
    class B{}
    A *-> B
    @enduml
    #+end_src
  #+RESULTS:
  [[file:/tmp/babel-AKVKVd/plantuml-SSWv0Y.png]]
+ relation
  A *has a* B
****** aggregation
+ UML representation
  #+begin_src plantuml :results output
    @startuml
    class A{}
    class B{}
    A o-> B
    @enduml
    #+end_src
  #+RESULTS:
  [[file:/tmp/babel-AKVKVd/plantuml-6uvrGL.png]]
+ relation
  A *may have a* B
****** association
+ UML representation
  #+begin_src plantuml :results output
    @startuml
    class A{}
    class B{}
    A -> B
    @enduml
    #+end_src
  #+RESULTS:
  [[file:/tmp/babel-AKVKVd/plantuml-3DBNuI.png]]
+ relation
  A *uses* B
****** implementation
+ UML representation
  #+begin_src plantuml :results output
    @startuml
    class A{}
    interface B{}
    A .up.|> B
    @enduml
    #+end_src
  #+RESULTS:
  [[file:/tmp/babel-AKVKVd/plantuml-O3lcOD.png]]
+ relation
  A *implements* B
****** dependency
+ UML representation
  #+begin_src plantuml :results output
    @startuml
    class A{}
    interface B{}
    A .up.> B
    @enduml
    #+end_src
  #+RESULTS:
  [[file:/tmp/babel-AKVKVd/plantuml-dWqnIQ.png]]
+ relation
  A *needs* B *to be able to work*
**** SOLID principles
***** SRP
+ about sizes of *classes* and *methods*
+ rules;
  a. every *operation* should be a separate class
  b. classes should be _small_
  c. class methods should be max 15-20 lines of code
+ SRP creates bunch of classes but here are the benefits;
  a. easier to debug
  b. new developers will adapt faster to codebase
  c. code is easier to read
  d. development speed increases

***** OCP
+ about *interfaces*
+ rules;
  a. we should not modify the existing and already tested and working classes when new scenario comes out
  b. to extend the functionality use *Startegy Pattern*. it is like *Dependency Injection*
  c. violate this principle when your code has some bugs. open and modify the existing code to fix the issue
  d. if switch and case statements started to show up in methods it's time for open close principle

***** LSP
+ about *subclasses*
***** ISP
+ about *large interfaces*
***** DIP
+ about *separating dependencies*
**** Dependency Injection (DI)

*** Software Architecture
**** notes from armağan amcalar's youtube stream
+ *design* and *architecuture* are different things
+ what is software design?
  when you design classes, interfaces, controllers etc.
+ what is software architecture
  when you design how component should communicate, which pattern you will be using
+ every developer should understand and implement software architecture.
+ before attempting to make a software always go through these steps;
  1. software architecture
  2. software design
  3. coding
+ some kinds of software architecture;
  1. domain driven design
  2. even sourcing
  3. event driven architecture
  4. serverless architecture
  5. monolith architecture
  6. microservices architecture
+ *system architecture* and *software architectures* are different things
+ system architecture is not something that has restricted rules or formulas. one developer can;
  1. combine two or more architectures
  2. customize existing architectures
+ read Martin Fowler and Bob Martin's books
+ Model View Controller (MVC) is _not an architecture_. it is a _software design technique_
***** Domain Driven Design (DDD)
+ still arguable if it is a design technique or arthitecture
+ it's intent is to merge business world and software world. it is a translator between business and software
+ if an architect designs a domain driven design architecture and he/she is not familiar with business the final result won't be very accurate
+ it's second intent is to create a software that scalable. so when you add a new feature, the next feature won't be hard to implement with ddd
+ a good example of ddd is an ERP software. it contains some discrete modules and each module is a *domain*;
  1. fatura
  2. satınalma
  3. stok yönetimi
  4. teslimat
+ domain driven design will consider every domain as a different and discrete software. those softwares are called modules in ERP. every module is developed by people who has experience and concrete knowledge with said domain.
+ modules will communicate with some each other by interfaces when added.
+ modules/domains can work on their own since those are concrete softwares
+ the biggest difference of DDD from other architectures is that every module is completely discrete and one module can be glued together with interfaces
***** Event Driven Design (EDD)
+ every unit of the system communicate with other units via signals. signals are called *events*
+ for example when a user scrolls the page or click on a button, then those buttons or scroll bars send some events to some other units
+ every unit knows which signal it recieves
+ event deiven architecture is more discributed than DDD. because in DDD, there are static interfaces between modules. in event sourcing, modules ara completely discrete
+ in Event Sourcing, modules are *completely unaware* from each other and there is a program called *broker* which handles signals coming from modules and sends those signals to other modules
+ in EDD, one signal can be sent to multiple modlues/services. (sometimes 0 which is bad..)
+ event sourcing is very scalable because you can always add a new modules to the system which listens a specific signal
+ down side of that architecture is those signals are just flying around and you have to log every single signal to a file. it is very complex
+ another complex sides are *naming the servies* and namespaceing services (putting those signals into a category like "purchase events", "user events" etc)
+ event driven design;
  - increases the freedom of individual modules (zero coupling ?)
  - increases complexity of signal management
+ one question is very rapid in EDD "I just threw that event but which module recieved?"

***** Microservice Architecture
+ in this architecture *containers* are the key
+ these containers are actually an operating system but very small operatin systems
+ every container contains a separate and standalone application which can run on its own
+ every container service can be written with different programming language. this is really beneficial because we can unplug a container from the system, write it with a new technology/language and then plug it back
+ containers communicate with a program called Rest API. it is really looks like event driven design;
  - events : containers
  - broker : Rest API
+ when something goes wrong in a container, all the system continues to work without any problems. developers can easily roll back the problematic container to more stable/working version to bring system back to life, take a copy of buggy container, fix the bug and plug it in again
+ microservice architecture is also very beneficial from social perspective. people simply don't want to depend on each other. every team writes it's own container and ships it
+ also every container has it's own database. there is no centralized database which make it very secure. hacker must hack every container to access all the data
***** Service Orriented Architecture (SOA)
***** Event Sourcing
+ this is a solution to EDD's event management
+ basically all sent events are logged into a database with thsese information;
  1. event name
  2. event type
  3. event parameters
  4. event history
+ event sourcing is useful in *debugging* because all events are stored and with history. developers can pause the application or roll back to more older version etc
*** Software Design
*** Design Patterns
**** facts
+ designs usually start with *Factory Method* and then evolves toward;
  1. Abstract Factory
  2. Prototype
  3. Builder
+ more flexibiliry = more complex code
**** concepts
***** programming to an interface
+ this is a *design principle*
+ the keyword =interface= sometimes confuced with "interface keyword" in Java and C#. but this is not the keyword is discussed here
**** how to

** Embedded Systems
*** articles
+ [[https://jaycarlson.net/][jay carlson's entire website]]
+ [[https://www.livecareer.com/resume-search/r/senior-embedded-software-engineer-29aac52d404b476e87fdb747db1370e7][good example CV for embedded systems]]
*** books
1. An Embedded Software Primer
   [[file:./images/screenshot-09.png]]
   According to the Professor at ODTU who gives courses on embedded systems, he recommended this book as the "best resource"

*** tips
*** facts
*** how to
*** concepts
**** I²C
- developed by Philips (now NXP)
- serial communication protocol
- I²C enables designers to add more GPIO pins to MCU
- some MCUs have this feature
- I²C bus consists of two data lines;
  1. SDA (serial data line)
  2. SCA (serial clock line)
- with I²C you can add bunch of *slaves* such as;
  a. SPD EEPROMS
  b. LED/LCD drivers
  c. NVRAM CHIPS
  d. DAC, ADC
  e. Sound Controller
  f. sensors
  g. write/read real time clocks
- slaves are easily replacable
- here is how I²C looks like
 [[file:./images/screenshot-71.png]]
**** NVRAM
- non volatile RAM
- data does not go away when power goes off
- this is a costy component
 [[file:./images/screenshot-72.png]] 

*** problems & solutions
* Programming
** languages
*** c
**** facts
***** struct variable assignment
you can't assign values to variables in a struct. for example the following code will spit out an error
  #+begin_src c
typedef struct A {
    int x = 333;
}
  #+end_src
the valid version of the above code is:
  #+begin_src c
typedef struct A {
    int x;
}
  #+end_src
***** struct sizes don't make sense
the following struct's size is 12 bytes.
#+begin_src c
typedef struct A {
    int x;
    char y;
    int z;
} A;
#+end_src
this doesn't make sense right? because;
- int x  : 4 bytes
- char y : 1 byte
- int z  : 4 bytes
it must be 9 bytes.. but in fact, compilers make padding operations to keep the memory layout stable. for example after defining variable x which occupies 4 bytes, compiler occupies 1 byte for variable y and right after that does 3 bytes padding! now our memory layout becomes stable ($$2^n$$). then it occupies 4 more bytes for variable z which is 4 bytes. and sizeof operator returns 12

consider the following example of code, where we define one more *char* variable after y;
#+begin_src c
typedef struct A {
    int x;
    char y;
    char k; // new char
    // 2 bytes padding
    int z;
} A;
#+end_src
=sizeof()= operator returns 12 again. because this time compiler adds 2 more bytes padding right after 'k' variable. now it makes sense

**** concept
**** how to
***** define a struct
#+begin_src c
typedef struct A{
    int a;
    char c;
} A;
#+end_src
**** problems & solutions
*** c++
**** facts
+ in C++ there is no =interface= keyword. but we can still implement intrefaces with classes
**** how to
***** implement interfaces in c++
1. create a class with only abstract methods with =virtual= keywords and adding ==0= to the ent of methods. and don't forget *virtual destructor*
   #+begin_src cpp
   // Shape.cpp
   class Shape {
   public:
       virtual ~Shape() = default;
       virtual double calculateArea() = 0;
   }
   #+end_src
2. now create a class that implements that interface;
   #+begin_src cpp
   // Triangle.cpp
   #include "Shape.cpp"

   class Triangle : public Shape {
   public:
       double height, floor;
       double calculateArea() {
            return (height * floor) / 2;
       }
   }
   #+end_src
3. here is how this code will look in UML;
   #+begin_src plantuml :results output
@startuml
interface Shape {
    calculateArea()
}
class Triangle {
    height : double
    floor : double
    calculateArea()
}
Triangle .up.|> Shape
@enduml
   #+end_src

   #+RESULTS:
   [[file:/tmp/babel-AKVKVd/plantuml-f7twXB.png]]

*** perl
**** facts
+ perl's extension is *.pl*
+ perl is more useful than shell scripting because it is compatible with other shells
+ perl is very powerfull when it comes to *Regex*
+ perl is used for;
  1. linux sysasmin
  2. network programming
  3. database handling
  4. email handling
  5. web development
+ perl competes with python
+ perl is more secure than shell
+ every expression must end with a semicolon ';'

**** concepts
***** shebang
this must be on the first line of every perl script
#+begin_src perl
#!/usr/bin/perl
#+end_src
**** how to
***** run perl program
1. open up a file
   #+begin_src sh
emacs program.pl
   #+end_src
2. write some code
   #+begin_src perl
#!/usr/bin/perl
print("what's your name?");
$name = <STDIN>;
print("hello $name");
   #+end_src

*** python
**** facts
+ sınıf metodları hiç parametre almasa bile, içinde mutlaka *self* parametresi barındırmalıdır. örnek: [[sınıf oluşturmak]]
+ python'da bir sınıf oluştururken __init__ metodu kullanmak zorunda değiliz.
+ python'da kalıtım almak için sadece sınıf tanımlamasında, sınıf isminin yanına, parantez içine super classın adını yazmak yeterlidir. örnek: [[python'da inheritance]]
+ kalıtım almış bir sınıfın base sınıfınından method çağırmak için *super* keywordü kullanılır. örnek: [[base class'a ulaşmak]]
+ private değişken tanımlamak için, değişkenin başına iki kere '_' koymamız gerekir. örnek: [[private değişken oluşturmak]]
**** consepts
***** __init__
python classları için kullanılan *constructor*. diğer çoğu dilde genelde sınıfın adı kullanılır init yerine ama python'da bu şekilde. örnek: [[sınıf oluşturmak]]
***** self
C++'daki *this*'in aynısı. bunun özel bi olayı var, sınıf oluştururken kesinlikle her methodun içine parametre olarak verilmelidir. örnek : [[sınıf oluşturmak]]
***** format string
normalde print fonksiyonu içine yazdığımız string'e dışardan bir değişken eklemeye kalktığımızda, stringi ve değişkenleri + ile toplamamız vs gerekir. bunun yerine format string kullanılır. örnek: [[format string oluşturma]]
***** pipenv
kesinlikle virtualenv'den daha kullanışlı bir pakettir. bununla sanal ortam oluşturmak için [[virtual environment oluşturmak][şuna]] bak
**** builtin function
***** type()
- *işlev*: bir objenin sınıfını döndürür
- *params*: objenin kendisi
- *kullanım*: [[pt1]]
**** howto
***** bir objenin sınıfını nasıl döndürürüz | <<pt1>>
#+BEGIN_SRC python :results output
msg = "hello"
print(type(msg))
#+END_SRC

#+RESULTS:
: <class 'str'>
***** sınıf oluşturmak
#+BEGIN_SRC python :results output
class Dog:
# constructor
def __init__(self): # self must be here
    print("New Dog is created")

def bark(self):
    print("BARK!")

d = Dog() # instantiation
d.bark() # bark the dog
#+END_SRC

#+RESULTS:
: New Dog is created
: BARK!

***** class property'si oluşturma ve erişme
#+BEGIN_SRC python :results output
class Dog:
# class properties
name = ""
age = 0

# constructor
def __init__(self, dog_name):
    self.name = dog_name # set name property

d = Dog("Ares")
print(d.name)
#+END_SRC

#+RESULTS:
: Ares
***** format string oluşturma
normal print fonksiyonunun içine, tıknaktan önce bir *f* karakteri eklenir

#+BEGIN_SRC python :results output
name = "savolla"
age = 28
print(f"Hi! My name is {name} and I'm {age} years old")
#+END_SRC

#+RESULTS:
: Hi! My name is savolla and I'm 28 years old
***** python'da inheritance
#+BEGIN_SRC python :results output
class Mammal:
pass

class Human(Mammal):
pass

class Dog(Mammal):
pass
#+END_SRC

***** base class'a ulaşmak
#+BEGIN_SRC python :results output
class Mammal:
age = 12;

class Human(Mammal):
def someMethod(self):
    print(super().age)

h = Human()
h.someMethod()
#+END_SRC

#+RESULTS:
: 12
***** private değişken oluşturmak
#+BEGIN_SRC python :results output
class A:
public_var = 11
__private_var = 43

m = A()
print(m.public_var) # this will be printed
print(m.__private_var) # this won't
#+END_SRC

#+RESULTS:
: 11
: 43
***** virtual environment oluşturmak
1. önce *pipenv* paketi kurulur
#+BEGIN_SRC sh
sudo pip install pipenv
#+END_SRC
2. proje klasörü oluşturulup oraya girilir ve şu komut yazılır
#+BEGIN_SRC sh
pipenv shell
#+END_SRC
bu komuttan sonra, klasör adı ile bir ortam oluşacaktır. terminalin solunda projenin adı görünecek ve bu dizince bir Pipfile oluşacaktır. onu elleme lazım o.
3. istenen python paketleri kurulur. sanal dizinde olduğundan emin ol
#+BEGIN_SRC sh
sudo pipenv install django==3.0.1
#+END_SRC
artık ne kuruluyorsa bu klasöre kurulacak ve sistemden tamamen izole bir şekilde çalışacaktır
4. paket silme
#+BEGIN_SRC sh
sudo pipenv uninstall django==3.0.1
#+END_SRC
5. ortamdan çıkmak istersen
#+BEGIN_SRC sh
exit
#+END_SRC
***** pipenv ile requirements.txt'den dependency'leri kurmak
bazen bir projenin düzgün çalışması için *requirements.txt* dosyasıyla beraber gelir
#+BEGIN_SRC sh
pipenv install -r ./requirements.txt
#+END_SRC
***** +scrape web with python+
****** create a python environment
1. install *pypenv* for easily creating /healthy/ python environments
   #+begin_src sh
sudo pip install pipenv
   #+end_src
2. create your project directory (web-scraper in this example)
   #+begin_src sh
mkdir web-scraper && cd web-scraper
   #+end_src
3. create and start the enviroment
   #+begin_src sh
pipenv shell
   #+end_src
   after this command a new file called =Pipfile= will be created. don't mess with it yet
****** install dependencies
1. install *bs4* module for /html parsing/
   #+begin_src sh
sudo pipenv install bs4
   #+end_src
2. install *requests* for taking html code from websites
   #+begin_src sh
sudo pipenv install requests
   #+end_src
3. install *fake-useragent* to avoid captchas
   #+begin_src sh
sudo pipenv install fake-useragent
   #+end_src
****** import modules

1. create a python file and open it with your favorite text editor
   #+begin_src sh
touch web-scrapping-application.py
emacs web-scrapping-application.py
   #+end_src

2. add the following to your file
   #+begin_src python
from urllib.request import urlopen as req
from bs4 import BeautifulSoup as soup
from fake_useragent import UserAgent

   #+end_src
3. execute the file
   #+begin_src sh
python web-scrapping-application.py
   #+end_src

if you don't get any import errors, then it means that modules are installed and you're ready to go.

****** retrieve the web page

1. add the *url* of the site that your want to scrape.
    #+begin_src py
url = "https://github.com/savolla"
    #+end_src

2. get the html content from the internet. this might take a while depending on your internet connection and size of the page
   #+begin_src py
webpage = req(url)
   #+end_src

3. assign html content to a variable
   #+begin_src py
page_html = req.read()
   #+end_src

4. close the connection
   #+begin_src py
req.close()
   #+end_src

5. make the html code manageble
   #+begin_src py
page_html = soup(page_html, "html.parser")
   #+end_src

****** extract content from html
1. go to your browser and find the section you want to scrape
2. right click on this section and select "inspect element"
3. find the elements you want to scrape. (div, span, a..)
4. crop your html content

   #+begin_src python
container = page_html.find_all("div", {"class":"div-class-name"})
   #+end_src
   container is a list of divs now. every element in this list is a class of =div-class-name=

5. check how many items container have
***** delete the elements from a list
#+begin_src python :results output
x = [1,2,3,4]
x.remove(x[0]) # remove the first element
print(x)
#+end_src

#+RESULTS:
: [2, 3, 4]

***** change list elements
this example changes all 2's to 0
#+begin_src python
a=[1,2,1,2,1,2]
a = [0 if x==2 else x for x in a]
#+end_src
***** convert list to string
=WARNING= list items must be type of string
#+begin_src python
x = ['h', 'e', 'l', 'l', 'o']
x = ''.join(x)
#+end_src

**** problems & solutions
**** modules
***** matplotlib
****** facts
+ matplotlib, veri grafiği çizdirme kütüphanesidir
+
****** concept
******* subplot()
+ birden fazla grafiği aynı anda çizdirmek için kullanılan bir matplotlib methodudur. örnek için [[birden fazla grafiği üst üste çizdirme][şuna]] ve [[birden fazla grafiği yan yana çizdirme][şuna]] bak
+ örnek kullanım: subplot(1,2,1)

****** howto
******* basit bir grafik oluşturma
#+BEGIN_SRC python :results graphics
from matplotlib import pyplot as plt
import numpy as np

x = np.linspace(0,5,50)       # 0'dan başla, 5er 5er 50'ye kadar giden bir dizi oluştur
y = x ** 2                    # x dizisininin karesini al ve y'ye ata
plt.plot(x,y)                 # grafiği oluştur
plt.title("squares")          # grafik başlığı
plt.xlabel("x ekseni")        # x eksenine başlık ata
plt.ylabel("y ekseni")        # y eksenine başlık ata
plt.show()                    # grafiği göster
#+END_SRC

******* birden fazla grafiği üst üste çizdirme
+ üst üste çizdirmek için, iki grafiğin subplot fonksiyonundaki son parametrelerin aynı olması gerekir
#+BEGIN_SRC python
from matplotlib import pyplot as plt
import numpy as np

# first graphic
x1 = np.array([1,2,3,4,5,6,7,8])
y1 = np.array([8,7,6,5,4,3,2,1])
plt.subplot(1,1,1)
plt.plot(x1, y1, 'r')

# second graphic
x2 = np.array([1,2,3,4,5,6,7,8])
y2 = np.array([1,2,3,4,5,6,7,8])
plt.subplot(1,1,1)
plt.plot(x2, y2, 'b')

plt.show()
#+END_SRC

******* birden fazla grafiği yan yana çizdirme
#+BEGIN_SRC python
from matplotlib import pyplot as plt
import numpy as np

# first graphic
x1 = np.array([1,2,3,4,5,6,7,8])
y1 = np.array([8,7,6,5,4,3,2,1])
plt.subplot(1,2,1)                  # son parametreye dikkat
plt.plot(x1, y1, 'r')

# second graphic
x2 = np.array([1,2,3,4,5,6,7,8])
y2 = np.array([1,2,3,4,5,6,7,8])
plt.subplot(1,2,2)                  # son parametreye dikkat
plt.plot(x2, y2, 'b')

plt.show()
#+END_SRC

****** problems & solutions
******* Tkinter hatası alınıyorsan şunu dene
#+BEGIN_SRC sh
xrdb -load /dev/null
xrdb -query
#+END_SRC

***** seaborn
****** facts
****** concept
****** howto
****** problems & solutions
***** pandas
****** facts
****** concept
****** howto
****** problems & solutions
***** sklearn
****** facts
****** concept
****** howto
****** problems & solutions
***** bs4
used for parsing html text. widely used in *web scrapping*
****** facts
****** concept
****** how to
******* navigate the html tree
you can zoom into html content by using *dot* operator in bs4
#+begin_src python
page_html.title # get title
page_html.body.p # get the first p element in body
page_html.body.find_all("p") # find all p elements inside body
page_html.body.find_all(attrs={"itemprop":"description"})[0].text # you just need this
#+end_src
****** problems & solutions
***** selenium
****** methods
#+begin_src python
driver.get("https://savolla.github.io")     # open up a page
driver.title                                # get page title
driver.close()                              # close the driver
#+end_src
****** how to
******* install
1. create a python environment

   #+begin_src sh
sudo pip install pipenv
mkdir project
cd project
pipenv shell
   #+end_src

2. install selenium

   #+begin_src sh
sudo pipenv install selenium
   #+end_src

3. install *chromium*. this package comes with *chromedriver* which we will need
   #+begin_src sh
pacman -S chromium
   #+end_src
******* run webdriver
#+begin_src python
from selenium import webdriver
driver = webdriver.Chrome()
driver.get("https://savolla.github.io") # open up a page
driver.close() # close the driver
#+end_src
******* search google
#+begin_src python
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

driver = webdriver.Chrome()
driver.get("https://google.com")
search_bar = driver.find_element_by_name("q") # you can search by other things as well
search_bar.send_keys("Kurotogake bandcamp")
search_bar.send_keys(Keys.RETURN)
#+end_src
******* get page source
this is usefull when websited block automatic http requests.
#+begin_src python
from selenium import webdriver
from selenium.webdriver.common.keys import Keys

driver = webdriver.Chrome()
driver.get("https://github.com/savolla")
page_html = driver.page_source  # now you have all the html content in page_html
#+end_src
******* find elements in html
#+begin_src python
from selenium.webdriver.common.by import By

#+end_src

*** bash
*** vhdl
**** facts
+ HDL : Hardware Descriptive Language
+ found in 1981
+ IEEE standard
+ initially created for ASIC synthesis

*** verilog
**** facts
+ found in 1985
+ IEEE standar
+
**** how to
***** create a basic module

#+BEGIN_SRC verilog
module And(x, y, out);
input x, y;
output out;
assign out = x & y;
endmodule
#+END_SRC

***** work with array of inputs and outputs

#+BEGIN_SRC verilog
module And(x, y, out);
input [15:0] x, y; // [15:0] is the syntax of 16-bit arrays
output [15:0] out;
assign out = x & y;
endmodule
#+END_SRC

***** [X] for loop in verilog

#+BEGIN_SRC verilog
integer k;                                // you have to define integer k outside
for (k = 0; k <= 15; k=k+1) begin         // note that k++ does not work in verilog
Xor tmp(x[k], y[k], out[k]);
end
#+END_SRC

*** c#
**** frameworks
***** .Net Core
****** concepts
******* methods
******** Startup.cs/ConfigureServices
+ sets some initial configurations for the project. web app will read and run this method first
+ the following line will be there by default to make MVC work

#+BEGIN_SRC cpp
services.AddCountrollersWithViews();
#+END_SRC

******** Startup.cs/Configure
+ this determines if web app should run in development mode or product mode
+ under this method, developers can add a special setting that makes site routing according to Controllers;

#+BEGIN_SRC cpp
endpoints.MapDefaultControllerRoute();
#+END_SRC

****** how to
******* use getter and setter methods
in C# there is no need to write long *get* and *set* functions like in C++. you simply put those inside property
#+BEGIN_SRC cpp
public class Joke
{
    public int Id {get; set;}
    public string joke_question {get; set;}
    public string joke_answer {get; set;}
}
#+END_SRC
******* create a simple website with .NET Core MVC
this tutorial will create a website with a database. also this will be only applicable on *windows* platform and *visual studio 2019*
******** project creation
1. open up visual studio and press *create a new project*
2. select *ASP .NET Core Web Application*
3. Name your Project
4. select *Web Application (Model-View-Controller)* and change the *authentication* to *Individual User Accounts*
5. .Net Core will generate lots of code for us. so we don't need to do everything from scratch
6. run the project. let visual studio download whatever it needs to download. the first run will take some time btw
******** folders and MVC
+ three directories are so important in *solution explorer*;
1. *Model* : where classes are defined. for example a shopping website has Customer, Shipping classes in Model directory
2. *View* : displays the data to the user. this folder contains different kinds of files called *razor pages*
    - razor pages
    + are combinations of *html* and *c#*.
    + file extension of the razor page is *.cshtml*
3. *Controller* : controls _when_ pages appear. what data should they show to the user
******** create first page
here we will use *Model* and *View* to create first page
1. right click on *Model/Add/Class*
2. select *Class* from popup menu and name your class (Joke.cs) and press *Add*
3. create some properties if you like. see [[shortcuts]] for visual studio (optinal)
4. you _must create_ an *empty constructor* of the class. because  it will be used by other classes. because of visual studio generated lots of code for us, we actually don't know exactly what those codes are (yet)
5. unfold *Data* directory from solution explorer (will be used later)
6. right click on *Controller/Add/Controller*
7. select *MVC Controller with Views, using Entity Framework* from popup
8. from popup menu, on *Model* section, select the _name of the class you just created_ in Model directory (Joke Class)
9. for *Data Context Class*, press _plus button_ (or add)
10. look at the solution explorer's *Data* section. in textbox, delete the highlighted part and write what you see under Data directory (ApplicationDbContext in my case)
11. tick everyhting below (3 of things need to be ticked)
12. click *create*. this might take some time. after this step, several new directories will be created in our solution (you need internet connection for this to work)
******** database migration
our pages will not be *dynamic* if we don't create a database. Here are steps for database creation;

1. check if a file starts with *0000000* is created under *Data/Migrations* directory. this contains some database informations.
2. go to *Tools/NuGet Package Manager/Package Manager Console* to open package manager. wait for initialization
3. enter the command:
#+BEGIN_SRC sh
add-migration "first-database-migration"
#+END_SRC
after this command, a c# file will be created under *Data/Migrations*. This is a code that creates a database table (Joke Table) see [[ORM]]
4. finally enter this command in package manager console to create a new database inside SQL server
#+BEGIN_SRC sh
update-database
#+END_SRC

now go and check the tables of our newly created database if you want by clicking *View/SQL Server Object Explorer* (optional). now we have a website with database connected

******** add our controller to the front page
go to *Views/Shared/_Layout.cshtml* and copy one of the *nav-bar* classes and change it to
#+BEGIN_SRC html
asp-controller="Jokes" <!-- out controller's name -->
asp-action="Index" <!-- front page of our Joke controller -->
#+END_SRC
this will add *Jokes view* to the front page.
******** add search bar feature I

1. go to *_Layout.cshtml* and copy another *nav-bar* element and start modifying it;
#+BEGIN_SRC html
asp-controller="Jokes" <!-- out controller's name -->
asp-action="ShowSearchForm" <!-- this will be our search bar -->
<a>Search</a> <!-- change link to more reasonable name -->
#+END_SRC

*ShowSearchForm* doesn't exist yet. So we need to define it in *Jokes Controller*. if you try to access this link, it will give "page not found" error

2. go to *Controllers/JokesController.cs* and copy the first *Task* method and start modifying it
#+BEGIN_SRC c++
public async Task<IActionResult> ShowSearchForm() { // we changed Index to ShowSearchForm
    return View(); // we deleted everything inside the paranthesis
}
#+END_SRC

3. right click on *ShowSearchForm* in the code and click *Add View*. select *Razor View* instead of empty one
(we could create a view called *ShowSearchForm* under *View* folder but we choose the shorter way)

4. on the popup menu;
- leave the View Name as is
- Template : create
- Model Class : Joke
- options:
    [x] partial view
    [x] reference script

this *will not* create a search bar. we will modify this code to make a search bar now

******** add search bar feature II

1. open *View/Jokes/ShowSearchForm.cshtml*

2. since do not *modify* or *create* Jokes Model, we delete this line;
#+BEGIN_SRC html
@model JokesWebsite.Models.Joke
#+END_SRC

3. there is a line at the bottom for Joke validation. it's basically check if user inputs a joke in correct format. delete this line as well
#+BEGIN_SRC html
@section Scripts {
@{await Html.RenderPartialAsync("__ValidationScriptPartial");}
}
#+END_SRC

4. finaly convert the code into this:
#+BEGIN_SRC html
<h4>Search for a Joke</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="ShowSearchResults"> <!-- where we want to go after submition -->
            <div class="form-group">
                <label for="SearchPhrase" class="control-label"></label>
                <input name="SearchPhrase" class="form-control" />          <!-- SearchPhrase will be a parameter -->
            </div>

            <div class="form-group">
                <input type="submit" value="Search" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>
<div>
    <a asp-action="Index">Back to List</a>
</div>
#+END_SRC

5. *SearchPhrase* will go to our Joke Controller's *ShowSearchResults* method as a parameter. Go to *Controllers/JokeController.sh*
#+BEGIN_SRC cpp
// GET: Jokes/ShowSearchResults
public async Task<IActionResult> ShowSearchResults(string SearchPhrase)  // SearchPhrase is coming from ShowSearchForm
{
    return View("Index", await _context.Joke.Where( j => j.JokeQuestion.Contains
                (SearchPhrase)).ToListAsync());
}
#+END_SRC

this code snippet uses a lambda function inside the return statement

now we have a section with search

******** show joke owner
:LEFT_HERE:
******** hide the joke answer
******** limit "create" for logged users
***** Windows Form
****** controls
+ *group box* : a container of elements. it provides an easier way to access the elements
+ *link label* : this is a label. when clicked, it redirects the user to a web page
****** facts
+ the difference between *show()* and *showDialog()* is the show() will let you do operations on previous form while showDialog() won't
****** how to
******* open a new form when a button is clicked
1. double click on the button. a new button click event method will be generated
2. create a new object of your form
3. use show() method to pop the form when clicked
   #+begin_src c++
   YOUR_FORM f = new YOUR_FORM();
   f.show();
   #+end_src
******* exit the application
there are two exit methods in windows form applications
#+begin_src c++
Application.Exit();
Environment.Exit(0);
#+end_src
**** how to
*** java
**** concepts
***** nested classes
- java allows you to define a class into another class. they called nested classes
****** inner class
- inner class _have access_ to outer class members
- inner class' main function _cannot be static_

  #+begin_src java
  public class OuterClass {
      int a = 3;
      public class InnerClass {
          int b = a; // can use outer class' members
      }
  }
  #+end_src

****** inner static class
- inner static classes _don't have access_ to outer class members

  #+begin_src java
  public class OuterClass {
      int a = 3;
      public static class InnerClass {
          int b = a; // this is not allowed
      }
  }
  #+end_src
***** Maven, Gradle and Ant
they are three build tools for java
***** swing
+ this is a library for GUI development in java.
+ it is really *outdated* but it teaches the basics
**** tips
+ if you don't know the name of the exception while making try catch methods, you can always make the program spit this error and then get the name from the error log
+ all SQL queries must be used in try-catch blocks. because query result may not be return something
+ if you see "Must be Caught" errors then this statment must be used in try-catch blocks
+ when working with databases, whatch out those varchar[25] varaibles. java gets those variables as *string* so strings are not limited to 25. always check the length before storing varchar elements from java to database.
+ when adding values to database, use =execute= method. when getting some value from database use =executeQuery=. the "executeQuery" method will return a =Resultset= object. catch it
+ when querying a database, give the full path to tables. like =databas_ename.table_name=. this is important. mysql might allow this kind of notation since it is a full blown database application. JDBC is not that clever
**** facts
+ non-static class members can't be used with *this* keyword
  #+begin_src java
public class A {
    public static int x;
    public static assign() {
        this.x = 111; // spits out error
    }
}
  #+end_src

  correct code: remove *this*
  #+begin_src java
public class A {
    public static int x;
    public static assign() {
        x = 111; // works fine
    }
}
  #+end_src
+ in java, you can't include more than one package
  #+begin_src java
package path.to.package1;
package path.to.package2; // second one is not allowed
  #+end_src
+ you don't have to import classes if they are in the same package

**** how to
***** use linked lists
****** create item
#+begin_src java
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class JavaLinkedListApp {
    public static void main(String[] args) {
        List<String> x = new ArrayList<String>();
        x.add("item 1");
        x.add("item 2");
        x.add("item 3");
        x.add("item 4");
        System.out.println("Liste: " + x);
    }
}
#+end_src
****** set/change items
use =set= method to do this
#+begin_src java
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class JavaLinkedListApp {
    public static void main(String[] args) {
        List<String> x = new ArrayList<String>();
        x.add("item 1");
        x.set(1,"ITEM 1"); // set method
        System.out.println("Liste: " + x);
    }
}
#+end_src
****** remove an item
use =remove= method to do this
#+begin_src java
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class JavaLinkedListApp {
    public static void main(String[] args) {
        List<String> x = new ArrayList<String>();
        x.add("item 1");
        x.add("item 2");
        x.remove(0);
        x.remove(1);
        System.out.println("Liste: " + x);
    }
}
#+end_src
****** sort items
use =Collections.sort()= sorts *alphabetically*
#+begin_src java
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class JavaLinkedListApp {
    public static void main(String[] args) {
        List<String> x = new ArrayList<String>();
        x.add("item 1");
        x.add("item 2");
        x.add("item 3");
        x.add("item 4");
        Collections.sort(x);
        System.out.println("Liste: " + x);
    }
}
#+end_src

****** reverse sort items
use =Collections.reverse()= sorts *alphabetically*
#+begin_src java
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

public class JavaLinkedListApp {
    public static void main(String[] args) {
        List<String> x = new ArrayList<String>();
        x.add("item 1");
        x.add("item 2");
        x.add("item 3");
        x.add("item 4");
        Collections.reverse(x);
        System.out.println("Liste: " + x);
    }
}
#+end_src
***** handle errors
#+begin_src java
public static int takeNumberData() {
    Scanner input = new Scanner(System.in);
    String data;
    int number;
    data = input.next();
    try {
        number = Integer.parseInt(data);
    } catch (NumberFormatException e) {
        System.out.println("this is not a number!");
        return -1;
    }
    return number;
}
#+end_src
***** create a swing application
1. open up *netbeans*
2. create new project
3. select; Ant -> Java Application
4. name your project
5. untick "create main class"
6. wait for project creation
7. right click on your project;
   New -> JFrame Form
8. name your form
9. a new frame with controls will be open
***** create a blank GUI window
we use JFrame class from swing library to do this
#+begin_src java
import javax.swing.JFrame;

public class GUI {
    public GUI() {
        JFrame frame = new JFrame();
    }

    public static void main(String[] args) {
        new GUI();
    }
}
#+end_src
***** use database in java
***** type cast in java
#+begin_src java
int number = 11;
String text = (String)number;
#+end_src
***** iterate java list/array
+ the traditional =arr[0]= notation doesn't work in java
#+begin_src java
ArrayList<int> x = new ArrayList<int>();
x.add(1);
x.add(2);

x.get(0); // 0th index
#+end_src
**** problems & solutions
*** sql
**** concepts
**** tips
**** facts
**** how to
***** write search query
#+begin_src sql
SELECT #column1, #column2 FROM #tablename WHERE #columnN = #search_keyword;
SELECT * FROM #tablename WHERE #column_N = #search_keyword;
SELECT * FROM #tablename WHERE #column_N LIKE #search_keyword;
#+end_src
***** delete values from table
#+begin_src sql
DELETE FROM #table_name WHERE #column_name = #value
#+end_src
***** write insert query
#+begin_src sql
insert into ( #column1, #column2, #colum3 ) values ( "value1", "value2", "value3" );
#+end_src
**** problems & solutions
*** html
:PROPERTIES:
:EXPORT_FILE_NAME: html-cheat-sheet
:EXPORT_TITLE: HTML Cheat Sheet
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
**** how to
+ create a *heading*?
  #+BEGIN_SRC html
<h1>Heading</h1>
  #+END_SRC
+ create a *paragraph element*?
  #+BEGIN_SRC html
<p>paragraph</p>
  #+END_SRC
+ create an *image element*?
  notice there are _no closing forward slashes_ in *img* elements
  #+BEGIN_SRC html
<img src="path/to/image">
  #+END_SRC
+ *break a line*?
  #+BEGIN_SRC html
<br/>
  #+END_SRC
+ tell html to use latest html version?
  by putting the *docstring*
  #+BEGIN_SRC html
<!DOCTYPE html>
  #+END_SRC
+ generate all *initial html structure* with *emmet*?
  =! + TAB=
+ generate a *div* with a *class* with *emmet*?
  =div.class_name + TAB=
+ generate a *div* with an *id* with *emmet*?
  =div#id_name + TAB=
+ create 5 div elements with unique class names?
  =.container$*5=
+ get *dummy text* for experimenting?
  __NUMBER__ is a number of words you want
  =lorem__NUMBER__ + TAB=
+ get 5 dummy texts that has 4 words per line ?
  =lorem__WORDS__*__LINES__=
+ display an image ?
  #+BEGIN_SRC html
<img src="./path/to/image.png" alt="alternative text"/>
  #+END_SRC
+ display images from internet (external images)?
  #+BEGIN_SRC html
<img src="http://www.addrsofpic.com/pic.png" alt="blah" />
  #+END_SRC
+ *adjust the size* of very big images?
  just use *width*. height will be adjusted automatically as soon as we don't specify it explicitly.
  #+BEGIN_SRC html
<img src="./path/to/img.png" width="256" alt="pexels" />
  #+END_SRC
+ add links?
  #+BEGIN_SRC html
<a href="www.google.com">GOOGLE</a>
  #+END_SRC
+ add link that opens a new tab when opened?
  use *target="_blank"*
  #+BEGIN_SRC html
<a href="www.google.com" target="_blank">GOOGLE</a>
  #+END_SRC
+ add internal link? (in site link)
  specify html file path in link element
  #+BEGIN_SRC html
<a href="./path/to/html">Home</a>
  #+END_SRC
+ scroll and focus on an element with a link?
  #+BEGIN_SRC html
<a id="top" href="#bottom">go bottom</a>
<!-- Some looooooong text (5000 lines) -->
<a id="bottom href="#top">go to top</a>
  #+END_SRC
+ convert an image into a link?
  use *a>img* + TAB
  #+BEGIN_SRC html
<a href="www.google.com">
  <img src="google_icon.png" alt="icon"/>
</a>
  #+END_SRC
+ use special characters in html? like copyright?
  #+BEGIN_SRC html
<p>copyright &copy;</p>
  #+END_SRC
+ make left, down, right, up arrows?
  #+BEGIN_SRC html
<p>left &larr;</p>
<p>right &rarr;</p>
<p>up &uarr;</p>
<p>down &darr;</p>
  #+END_SRC
+ make *unordered list* ?
  #+BEGIN_SRC html
<ul>
  <li>peter</li>
  <li>john</li>
  <li>sarah</li>
  <li>michael</li>
  <li>melinda</li>
</ul>
  #+END_SRC
+ make *ordered list* ?
  #+BEGIN_SRC html
<ol>
  <li>michael</li>
  <li>melinda</li>
  <li>opeth</li>
  <li>axe</li>
</ol>
  #+END_SRC
+ create *table* in html?
  always start with *<table>* element and then *<tr>* for rows
  #+BEGIN_SRC html
<table>

  <!-- row of table headers -->
  <tr>
   <th>header1</th>
   <th>header2</th>
   <th>header3</th>
  </tr>

  <!-- row of table data -->
  <tr>
    <td>data1</td>
    <td>data2</td>
    <td>data3</td>
  </tr>

  <!-- second row of table data -->
  <tr>
    <td>data1</td>
    <td>data2</td>
    <td>data3</td>
  </tr>

</table>
  #+END_SRC
+ take an input from user?
  1. create a form element *form + TAB*
  2. *input + TAB*
    #+BEGIN_SRC html
    <form method="" action="">
      <input type="text" name="" value="" />
    </form>
    #+END_SRC
+ *label* the *input bar*
  #+BEGIN_SRC html
  <form method="" action="">
    <label for="nick">username</label> <!-- label the input bar -->
    <input type="text" name="username" id="nick" /> <!-- input bar -->
    <input type="submit" /> <!-- submit button -->
  </form>
  #+END_SRC
+ make passwords invisible when typing?
  notice *input type="password"* here. thi is the important one
  #+BEGIN_SRC html
<input type="password" name="password" value="" />
  #+END_SRC
+ show *example input* inside input box?
  #+BEGIN_SRC html
<input type="text" name="email" placeholder="john@protonmail.com" />
  #+END_SRC
+ use *radio buttons* in html?
  #+BEGIN_SRC html
<p>Your favorite language</p>
<input name="coding" type="radio" value=""/>Javascript
<br />
<input name="coding" type="radio" value=""/>C++
<br />
<input name="coding" type="radio" value=""/>C
<br />
<input name="coding" type="radio" value=""/>Python
<br />
  #+END_SRC
+ make a big *text area* ?
  *rows* how many rows should be in our text area
  *cols* how many columns should be in our text area
  #+BEGIN_SRC html
<textarea rows="" cols=""></textarea>
  #+END_SRC
+ make *check boxes* in html?
  #+BEGIN_SRC html
<p>What are your favorite languages?</p>
<input name="" type="checkbox" value=""/> C++ <br />
<input name="" type="checkbox" value=""/> C <br />
<input name="" type="checkbox" value=""/> Python <br />
<input name="" type="checkbox" value=""/> Javascript <br />
<input name="" type="checkbox" value=""/> Rust <br />
  #+END_SRC
+ make a *checkbox* that already checked by default?
  put *checked="checked"* inside input element
  #+BEGIN_SRC html
<input type="checkbox" checked="checked"/> testbox
  #+END_SRC
+ make a *dropdown menu* in html?
  label is not really necessary here but hey!
  #+BEGIN_SRC html
<label for="menu0">favorite PL</label>
<select id="manu0" name="">
  <option value="#">select language</option>
  <option value="js">javascript</option>
  <option value="c">C</option>
  <option value="cpp">C++</option>
  <option value="rs">Rust</option>
</select>
  #+END_SRC
**** what is
+ what is the first html line should be in a web page?
  #+BEGIN_SRC html
<!DOCTYPE html>
  #+END_SRC
+ what is the root element of html page?
  #+BEGIN_SRC html
<html>
  #+END_SRC
+ what *head* should contain?
  it contains the *information* about the page
  1. page title
  2. links to external resources like *css* and *js* files
  3. metadata
+ what *<tr>* means?
  table row
+ what *<td>* means?
  table data
+ what *<th>* means?
  table header
+ what is the importance of *value* attribute in *radio buttons* ?
  value in radio buttons is the data that will be passed into database or somewhere. when we select a radio button *A* and A contains *value="C++"* then "C++" string will be sent from this radio button when submitted
+ what is the difference between *radio buttons* and *check box* ?
  - radio buttons: choose only one
  - check boxes: choose multiple
+ what is the *checkbox shortcut* with *emmet*
  input:c + TAB
+ what is the *submit button* shortcut with *emmet*
  input:s + TAB
**** flash cards
+ is content in *head* element visible in page?
  No.
+ where <title>page0</title> will be displayed?
  in the browser tab!
+ generate 5 list items with line numbers using *emmet*
  ul>li.cls${$.}*5
+ what will *.container + TAB* output?
  div is the most used element. so we don't need to write *div.container*
  #+BEGIN_SRC html
<div class="container">

</div>
  #+END_SRC
+ how many *headings* there are in html?
  there are 6 hadings
  #+BEGIN_SRC html
<h1>BIGGEST</h1>
<h2>Bigger</h2>
<h3>normal</h3>
<h4>smaller</h4>
<h5>smallest</h5>
<h6>tiny</h6>
  #+END_SRC
+ what path convention should be used in html?
  dot and a slash "./" is used in most frameworks and languages like *react* *php* etc.
+ how initial html page structure look?
  #+BEGIN_SRC html
<!DOCTYPE html>
<html>
  <head>
    some code..
  </head>
  <body>
    some code..
  </body>
</html>
  #+END_SRC
+ where to get *copyright free* pictures?
  1. [[https://www.pexels.com/][pexels]] also has videos
  2. [[https://pixabay.com/tr/][pixabay]]
  3. [[https://gratisography.com/][gratisography]]
+ how comments look in html?
  #+BEGIN_SRC html
<!-- this is a comment -->
  #+END_SRC
+ what do *sup* and *sub* elements do?
  *sup*: pushes text up. it's like x^2 (where 2 in above x)
  *sub*: pushed text down. it's like index x_i (where i below x)
  #+BEGIN_SRC html
<p>x<sub>i</sub> = 2<sup>x</sup></p>
  #+END_SRC
+ create 5 unordered list element which are links using *emmet*
  ul>(li>a)*5 + TAB
+ what happens when user enters nonsense in *email input box*?
  page will say something like "you forgot to put \@" symbol bla bla bla
+ what *value* attribute does in *input* elements?
  it is the _hardcoded_ value. here is the example;
  #+BEGIN_SRC html
<!-- "GO!" will be written on submit button -->
<input type="submit" value="GO!" />

<!-- "deleteme first" will be written in input box -->
<input type="text" value="deleteme first!" />
  #+END_SRC
+ why *name* attributes need to be same in *radio buttons*
  if we don't make them same then we can select more than one radio buttons. And this doesn't make sense
+ what *value* attribute in elements actually do ?
  it returns that value when submitted. *value* is important in buttons, dropdown manus, checkboxes, radio buttons etc.
*** css
:PROPERTIES:
:EXPORT_FILE_NAME: css-cheat-sheet
:EXPORT_TITLE: CSS Cheat Sheet
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
**** how to
 1. name a css file?
   *style.css* or *main.css*
 2. how to link *style.css* with *index.html* ?
   in html file,
   #+BEGIN_SRC html
<link href="./style.css" rel="stylesheet"/>
   #+END_SRC
 3. write internal css?
   put your css code inside *style* tags
   #+BEGIN_SRC html
   <head>
     <style>
       h3 {
         color : red;
       }
     </style>
   </head>
   #+END_SRC
 4. how comments look in css?
   #+BEGIN_SRC css
/* this is a comment */
   #+END_SRC
 5. change h1,h2 and h3 at the same *selector*?
   #+BEGIN_SRC css
h1,h2,h3 {
    color : olive;
}
   #+END_SRC
 6. change *background color* of the entire page?
   #+BEGIN_SRC css
body {
    background-color : black;
}
   #+END_SRC
 7. style by *classes* or *id*?
   #+BEGIN_SRC html
<h3 class="cls0"> TITLE0 </h3>
<h3 id="cls1"> TITLE1 </h3>
   #+END_SRC

   #+BEGIN_SRC css
.cls0 {
    color : red;
}

#cls1 {
    color : blue;
}
   #+END_SRC
 8. set *space between two lines*?
   #+BEGIN_SRC css
line-height : 1.5em;
   #+END_SRC
 9. set *font* ?
   #+BEGIN_SRC css
font-family : monospace;
   #+END_SRC
 10. set a background image?
    #+BEGIN_SRC css
 background-image: url("../img/bg.png");
    #+END_SRC
 11. set opacity of text?
    use *rgba()* with a value between 1 and 0 at the end
    #+BEGIN_SRC css
 .class0 {
     color : rgba(100,53,81,0.5);
 }
    #+END_SRC
 12. make *links* without _underline_ ?
    #+BEGIN_SRC css
 a {
     text-decoration : none;
 }
    #+END_SRC
 13. cancel all the *default margins*?
    #+BEGIN_SRC css
    *{
        margin : 0;
    }
    #+END_SRC
 14. *change font* of an element?
    #+BEGIN_SRC css
 .element {
     font-family : Fira Code;
 }
    #+END_SRC
 15. use *google fonts*
     1. go to *google fonts* page
     2. select your font
     3. click *select this style*
     4. copy <link> part and paste is between <head> element
     5. copy *CSS rules* and paste it to CSS file where you want to use that font
     6. click on *@import* section and copy the code inside =<style>= element
     7. paste it into the top of your CSS file
 16. make a font bolder?
    use *font-weight*
    #+BEGIN_SRC css
 .element {
     font-weight: bold;
 }
    #+END_SRC
 17. make font italic?
    use *font-style*
    #+BEGIN_SRC css
 .element {
     font-style : italic;
 }
    #+END_SRC
 18. reach a *nested element* inside a class?
    use *>* syntax
    #+BEGIN_SRC html
 <div class="cls0">
   <ul>
     <li>item</li>
     <li>item</li>
   </ul>
 </div>
    #+END_SRC

    #+BEGIN_SRC css
 cls0 > ul > li {
     /* your code */
 }
    #+END_SRC
 19. increase space between *letters* in a paragraph?
    #+BEGIN_SRC css
 .element {
     letter-spacing: 5px;
 }
    #+END_SRC
 20. increase space between *words* ?
    #+BEGIN_SRC css
 .element {
     word-spacing: 5px;
 }
    #+END_SRC
 21. capitalize an entire *paragraph* ?
    #+BEGIN_SRC css
 .element {
     text-transform: capitalize;
 }
    #+END_SRC
 22. add *hover* action to an element?
     #+BEGIN_SRC css
     .element:hover {
     /* code */
     }
     #+END_SRC
 23. add *opacity* to an element?
    #+BEGIN_SRC css
 .element {
     opacity: 0.5;
 }

    #+END_SRC
 24. add a *border* around an element?
    #+BEGIN_SRC css
 .element {
     border-style: solid;
 }
    #+END_SRC
 25. add *border width* of an element?
    #+BEGIN_SRC css
 .element {
     border-width: 10px;
 }
    #+END_SRC
 26. overlap two elements?
    with *negative margin*
 27. make list items on one line?
    #+BEGIN_SRC html
 <ul>
     <li>item1</li>
     <li>item2</li>
     <li>item3</li>
 </ul>
    #+END_SRC

    #+BEGIN_SRC css
 ul > li {
    display: inline;
 }
    #+END_SRC
 28. display text in the center of the element?
    use *text-align: center*
 29. create a *navigation bar* of a website?
    #+BEGIN_SRC html
 <div class="navbar">
   <a href="#">Home</a>
   <a href="#">Contact</a>
   <a href="#">Coffee</a>
   <a href="#">Music</a>
 </div>
    #+END_SRC

    #+BEGIN_SRC css
 .navbar a {
     font-family: Fira Code;
     margin-right: 20px;
     font-size: 1rem;
     text-decoration: none;
 }

 .navbar {
     background: black;
 }
    #+END_SRC
 30. add a *custom font* to the css?
    add the following on the top of css file
    #+BEGIN_SRC css
 @font-face {
     font-family: "font-name";
     src: url("../fonts/my-font.ttf");
 }
    #+END_SRC
 31. set opacity of an element?
    use *opacity* attribute
    #+BEGIN_SRC css
 .element {
     opacity: 0.5;
 }
    #+END_SRC
 32. use *image* as a background instead of straight color?
    #+BEGIN_SRC css
 .element {
     background: url("/path/to/image.extension");
 }
    #+END_SRC
 33. make an image non-repeatable?
    #+BEGIN_SRC css
 .element {
     background: url("/path/to/image.extension");
     background-repeat: no-repeat;
 }
    #+END_SRC
 34. *spread* the image into one area (div) ?
    #+BEGIN_SRC css
 .element {
     background: url("/path/to/image.extension");
     background-size: cover;
 }
    #+END_SRC
 35. *center* the background image?
    #+BEGIN_SRC css
 .element {
     background-position: center;
 }
    #+END_SRC
 36. adjust the position by x and y values of a background image?
    use persentages to adjust
    #+BEGIN_SRC css
 .element {
     background: url("/path/to/image.extension");
     background-position: 20% 50%;
 }
    #+END_SRC
 37. add an image with protected *aspect ratio*?
    #+BEGIN_SRC css
 .element {
     background: url("/path/to/image.jpg");
     background-size: contain;
 }
    #+END_SRC
 38. align text to the center?
    #+BEGIN_SRC css
 .element {
     text-align: center;
 }
    #+END_SRC
 39. make a *parallax* effect?
    use *background-attachment*
    #+BEGIN_SRC css
 .banner {
     background: url("../img/bg.jpg");
     background-attachment: fixed;
 }
    #+END_SRC
 40. make a gradient element? use *grey* and *white*
    #+BEGIN_SRC css
 .element {
     background-attachment: linear-gradient(grey, white);
 }
    #+END_SRC
 41. give *angle* to the gradient?
    #+BEGIN_SRC css
 .element {
     background: linear-gradient(45deg, white, black);
 }
    #+END_SRC
 42. make a nice *transition effect* ? when user scrolls down the transparent
    screen comes on the background image. the background image does not change btw
    #+BEGIN_SRC html
 <div class="first">
 </div>

 <div class="second">
 </div>
    #+END_SRC

    #+BEGIN_SRC css
 .first {
     background: url("../img/bg2.jpg");
     background-attachment: fixed;
     background-size: cover;
     background-position: center;
     background-repeat: no-repeat;
     height: 100vh;
 }

 .second {
     background: url("../img/bg2.jpg");
     background-attachment: fixed;
     background-size: cover;
     background-position: center;
     background-repeat: no-repeat;
     opacity: 0.5;
     height: 100vh;
 }
    #+END_SRC
 43. 
**** what is
 + what css stands for?
   cascading style sheets
 + what is the *syntax* for css?
   #+BEGIN_SRC css
selector{
    property0 : value0;
    property1 : value1;
}
   #+END_SRC
 + what is the difference between *span* and *div*
   - div is usefull for grouping elements together
   - span is usefull for assigning some class or id names inline
   - when elements grouped with *div* it will cause a new line
   - hovewer span won't cause a new line
 + what is the best way to represent a color ?
   using *rgb*
   #+BEGIN_SRC css
h1 {
    color : rgb(100,100,100);
}
   #+END_SRC
 + what is the most primitive way to represent size?
   pixels.
   #+BEGIN_SRC css
.cls0 {
    font-size : 12px;
}
   #+END_SRC
 + what is the drawbacks of representing something in pixels?
   since pixels are constant and depends on nothing, it makes the element non-responsive. so the size will not change when screen size change
 + what is *font stack* ?
   it is a concept where we present different font families to the web browser. if web browser fails to render the first font family then it tryes out the second one. if web browser fails at every font then the last one (monospace) font will be assumed

   example usage;
   #+BEGIN_SRC css
.element {
    font-family : 'Courier New' Courier, monospace;
}
   #+END_SRC
 + what is *css box mode* ?
   #+BEGIN_SRC text
+-------------------------------------+
|               Margin                |
|  +-------------------------------+  |
|  |            Border             |  |
|  |  +-------------------------+  |  |
|  |  |         Padding         |  |  |
|  |  |  +-------------------+  |  |  |
|  |  |  |      Content      |  |  |  |
|  |  |  +-------------------+  |  |  |
|  |  +-------------------------+  |  |
|  +-------------------------------+  |
+-------------------------------------+
   #+END_SRC
 + what is the shortcut way of writin *borders*?
   parameter order matters!
   #+BEGIN_SRC css
.element {
    /* width style and color */
    border: 5px solid blue;
}
   #+END_SRC
 + what is the *difference* between _border_ and _outline_ ?
   - borders are like glued to the content. we can't put space between content and border
   - outlines in other hand they are more flexible than borders. also we can use only outlines instead of borders. we can give *offset* to outlines which borders can't quite handle.

      #+BEGIN_SRC css
   .element {
       outline: 0.2rem solid black;
       outline-offset: 10px /* set outline 10px above the content */
       outline-offset: -10px /* set outline 10px inside the content */
   }
      #+END_SRC
 + what are *gradients* ?
   it's a color effect. _two or more_ colors are mixed into one element. and result will look
   like an _oval_ object. used in button coloring
**** flash cards
 + where css can be added?
   1. inline
   2. inside <head> element
   3. seperate file
 + when you have multiple css files in which directory should we put them?
   css/
 + what happens if we add *internal css* in a page that has *external css* ?
   internal css will override external one
 + what happens if we add *inline css* in a page that has *external css* or *internal css* ?
   *inline* css will override *external* and *internal* ones
 + what does *color* attrubute do?
   it changes the text color
 + can we add *multiple classes* inside an element?
   we can also add *classes* with *ids*
   #+BEGIN_SRC html
<h3 class="title" class="lowercase" id="testid"> hello </h3>
   #+END_SRC
 + unique elements should have ...
   id
 + why *div* blocks are used?
   to group elements. this helps us to specify elements in css
 + which grouping style causes *new line* ?
   div
 + where to get cool color schemes?
   1. [[https://coolors.co/][coolors]]
   2. [[https://color.adobe.com/explore][adobe color]]
 + what happens when we use *width* and *height* in persentage?
   the persentage will work depending on the *parent div*'s sizes. for example if parent div has 20px height and we give 50% height to the child then child will have 10px height
   #+BEGIN_SRC css
.parent {
    height : 20px;
    width : 20px;
}
.child {
    height : 50%; /* 20%50 = 10 */
    width : 50%; /* 20%50 = 10 */
}
   #+END_SRC
 + persentages will depend on ...
   parent values!
 + what *vw* and *vh* do?
   vw and vh are *measure units* in css. they are relative values depend on *screen size*. when browser window size change, then those values are also change
   example;

   #+BEGIN_SRC html
<div class="cls0">
</div>
<div class="cls1">
</div>
   #+END_SRC

   #+BEGIN_SRC css
.cls0 {
    background-color : orange;
    width : 50vw;
    height : 50vh;
}

.cls1 {
    background-color : yellow;
    width : 50vw;
    height : 50vh;
    margin-left: 50vw;
}
   #+END_SRC
 + what *calc()* function does in css?
   it takes two values with *px*, *vh*, *vw*, *rem*, *em* etc and applies arithmatic operations on them.
 + use case scenario of *calc()* function
   assume we have a *navbar* on top of the page and it has 100px height. now let's say we need a *banner* below navbar. this banner will have height of entire page (without scroll bar). how do we adjust that height automatically?

   in this case we can use *calc()* function like this:
   #+BEGIN_SRC html
<div class="navbar">
</div>

<div class="banner">
</div>
   #+END_SRC

   #+BEGIN_SRC css
*{
    margin : 0; /* zero out default margins */
}

.navbar {
    background : blue;
    height : 100px;
}

.banner {
    background : green;
    height : calc(100vh - 100px); /* 100vh - navbar.height */
}
   #+END_SRC
 + what *measure* type should we use on *line-height* property ?
   em
   #+BEGIN_SRC css
.element {
    line-height: 1em;
}
   #+END_SRC
 + what areas a,b,c and d effect in *padding: a b c d* ?
   #+BEGIN_SRC css
.element {
    padding: top, right, left, bottom;
}
   #+END_SRC
 + what border-radius value turn element into circle?
   50%
 + what *block elements* do when rendered?
   - always start a new line
   - takes over full width
 + what *inline elements* do when rendered?
   - does not start a new line
   - does not occupy the full width
 + for *block centering* what topics are used in css?
   flex and grids
 + browser will ignore margin's *margin-top* and *margin-bottom* properties if the element is ...
   inline
 + browser will ignore margin's *margin-left* and *margin-right* properties if the element is ...
   block
 + what property should we use to make the browser respect to *inline element* top and bottom margins?
   use *inline-block*
   #+BEGIN_SRC html
<a href="#">Home</a>
<a href="#">Contact</a>
<a href="#">Coffee</a>
<a href="#">Music</a>
   #+END_SRC

   #+BEGIN_SRC css
a {
    inline-block:
}
   #+END_SRC
 + create a nice banner with an image in bakcground
   #+BEGIN_SRC html
<div class=".banner">
  <p>some text here</p>
</div>
   #+END_SRC

  #+BEGIN_SRC css
.banner {
    background: url("../img/bg1.jpg"); /* load the image */
    background-size: cover; /* spread image across the div area */
    background-repeat: no-repeat; /* prevent repetition */
}
  #+END_SRC
 + what to do if background image is too bright and text on it is not visible?
   add some *opacity*
   #+BEGIN_SRC css
.element {
    background: url("/path/to/image.jpg");
    opacity: 0.5;
}
   #+END_SRC

*** javascript
:PROPERTIES:
:EXPORT_FILE_NAME: javascript-cheat-sheet
:EXPORT_TITLE: Javascript Cheat Sheet
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
**** concepts
***** JSON
+ javascript object notation
+ data representation format
+ used in *config* files
+ supported types;
  1. strings: "hello world", "savolla"
  2. numbers: 10, 1.5, -30
  3. boolean: true, false
  4. null: null
  5. arrays: [1,2,3], ["Hello", "world"]
  6. objects: {"key":"value"}, {"age":30}
+ everything in json is _valid javascript code_
**** tips
**** facts
**** how to
***** create a json file
this is actually an _array_ in javascript. this is why it starts with '[]'
#+begin_src js
[
    {
        "name":"software engineering",
        "delay": 2,
        "book":
        [
            {"name" : "codecomplete2"},
            {"name" : "codecomplete2"},
            {"name" : "codecomplete2"},
            {"name" : "codecomplete2"},
            {"name" : "codecomplete2"}
        ]
]
#+end_src
***** display json contents in html
1. paste the json string inside script tag and make it a string by surroud it with `
2. use =JSON.parse= method to make JSON parsable with indexes

#+begin_src html
<html>
  <head>
    <meta charset="UTF-8"/>
    <title>MultiTasker</title>
  </head>
  <body>
    <script type="text/javascript">
      let topics =
        `[
                {
                    "name":"software engineering",
                    "delay": 2,
                    "book":
                    [
                        {"name" : "codecomplete2"},
                        {"name" : "Applying UML"},
                        {"name" : "clean code"},
                        {"name" : "clean coder"},
                        {"name" : "solid principles"}
                    ]
                }
        ]`
        console.log( JSON.parse(topics)[0].book)
    </script>
  </body>
</html>
#+end_src
***** from codecamp
+ print something on screen?
  #+BEGIN_SRC js
  console.log("hello");
  #+END_SRC
+ declare a local variable?
  #+BEGIN_SRC js
  let loc = 5;
  #+END_SRC
+ declare a global variable?
  #+BEGIN_SRC js
  glob = 5;
  #+END_SRC
+ declare a constant variable?
  #+BEGIN_SRC js
  const c = 5;
  #+END_SRC
+ declare a function scope variable?
  #+BEGIN_SRC js
  var c = 5;
  #+END_SRC
+ concat two strings?
  #+BEGIN_SRC js
  let v0 = "Hello";
  let v1 = "World";
  let v2 = v0 + " " + v1;
  #+END_SRC
+ you increment and decrement numbers
  #+BEGIN_SRC js
  let a = 3;
  a++; // increment
  a--; // decrement
  console.log(a);
  #+END_SRC
+ declare floating point numbers?
  #+BEGIN_SRC js
  let f0 = 2.38;
  #+END_SRC
+ get the *length* of a string?
  #+BEGIN_SRC js
  let name = "savolla";
  console.log(name.length);
  #+END_SRC
+ reach first letter of a string?
  #+BEGIN_SRC js
  let x = "hello";
  console.log(x[0]);
  #+END_SRC
+ get the last character of a string?
  #+BEGIN_SRC js
  let name = "savolla";
  console.log(name[name.length - 1]);
  #+END_SRC
+ create an array ?
  #+BEGIN_SRC js
  let numbers = [1,2,3,4,5];
  #+END_SRC
+ create a multi-dimentional array?
  #+BEGIN_SRC js
  let A = [["abatox", 20],
           ["savolla", 28],
           ["lena", 48]];
  console.log(A[1][0]);
  #+END_SRC

  #+RESULTS:
  : savolla
  : undefined
+ *append* data into an array?
  #+BEGIN_SRC js
  let A = [1,2,3,4];
  A.push(5);
  console.log(A[A.length -1 ]);
  #+END_SRC

  #+RESULTS:
  : 5
  : undefined
+ remove an item from an array?
  #+BEGIN_SRC js
  let A = [1,2,3,4];
  A.pop();
  console.log(A[A.length -1 ]);
  #+END_SRC

  #+RESULTS:
  : 3
  : undefined
+ remove *first* element from an array?
  #+BEGIN_SRC js
  let A = [1,2,3];
  A.shift();
  console.log(A);
  #+END_SRC

  #+RESULTS:
  : [2 (\, 3)]
+ add an element to the beginning of the array?
  #+BEGIN_SRC js
  let A = [1,2,3,4];
  A.unshift(0);
  #+END_SRC
+ define a functions?
  #+BEGIN_SRC js
function sayHi( name ) {
    console.log("Hello " + name);
}
sayHi("lenacka");
sayHi("savolla");
sayHi("abatox");
  #+END_SRC

  #+RESULTS:
  : Hello lenacka
  : Hello savolla
  : Hello abatox
  : undefined
+ *dequeue* one element from an array?
  #+BEGIN_SRC js
function dequeue( array ) {
    return array.shift();
}
let A = [1,2,3,4,5];
console.log(dequeue(A));
  #+END_SRC

  #+RESULTS:
  : 1
  : undefined
+ write an *if* structure?
  #+BEGIN_SRC js
if ( condition ) {
    // code
}
else if ( condition ) {
    // code
}
else {
    // code
}
  #+END_SRC
+ use *and* and *or* operators in if statements?
  #+BEGIN_SRC js
if ( code && code || code )
    code
  #+END_SRC
+ create an object in js?
  #+BEGIN_SRC js
var dog = {
    "name" : "Ares",
    "color" : "brown",
    "age" : 12,
    "personality" : "calm"
};
  #+END_SRC
+ access a property of an object ?
  use *dot notation*
  #+BEGIN_SRC js
var dog = {
    "name" : "Ares",
    "color" : "brown",
    "age" : 12,
    "personality" : "calm"
};

n = dog.name;
m = dog.age;
  #+END_SRC
+ update an object property?
  #+BEGIN_SRC js
dog = {
    "name" : "",
    "color" : "",
    "age" : null,
    "personality" : ""
};

my_dog = dog;
my_dog.name = "Ares";
my_dog.color = "brown";
my_dog.age = 12;
my_dog.personality = "calm";
  #+END_SRC
+ *delete* a property from an object?
  #+BEGIN_SRC js
var dog = {
    "name" : "Ares",
    "color" : "brown",
    "age" : 12,
    "personality" : "calm"
};

delete dog.personality;
  #+END_SRC
+ test if an object has a specific property?
  use *hasOwnProperty* method of an object
  #+BEGIN_SRC js
dog = {
    "name" : "Ares",
    "color" : "",
    "age" : null
};

if ( dog.hasOwnProperty("color") )
    console.log("yes");
else
    console.log("no");

  #+END_SRC

  #+RESULTS:
  : yes
  : undefined
+ access nested object properties?
  #+BEGIN_SRC js
obj = {
    "p0" : "ABC",
    "internal" : {
        "p0" : "abc",
        "p1" : "def",
    }
}

console.log(obj.internal.p0);
  #+END_SRC
+ make a while loop?
  #+BEGIN_SRC js
  let i = 5;
  while ( i > 0 ) {
      console.log(i);
      i--;
  }
  #+END_SRC
+ make a for loop?
  just like in C or C++
  #+BEGIN_SRC js
for ( let i = 0; i < 5; ++i ) {
    console.log(i);
}
  #+END_SRC
+ lookup a value in an object list?
  when looking inside a list of objects use "[]" instead of "."
  #+BEGIN_SRC js
var contacts = [
    {
        "first_name" : "Akira",
        "last_name" : "Laine",
        "number" : "05330000000",
    },
    {
        "first_name" : "Harry",
        "last_name" : "Potter",
        "number" : "05330000001",
    },
    {
        "first_name" : "Sherlock",
        "last_name" : "Holmes",
        "number" : "05330000002",
    },
]

function lookup( name, property ) {
    for ( let i = 0; i < contacts.length; i++ ) {
        if ( contacts[i].first_name === name ) {
            return contacts[i][property] || "No such property " + property;
        }
    }
    return "No such contact";
}

let prop = lookup("Akira", "number");
console.log(prop);
  #+END_SRC

  #+RESULTS:
  : 05330000000
  : undefined
+ generate random number between 0 and 1?
 #+BEGIN_SRC js
Math.random();
 #+END_SRC
+ generate a *whole random* number between 0 & 100 ?
  #+BEGIN_SRC js
let r = Math.floor( Math.random() * 100 );
console.log(r);
  #+END_SRC

  #+RESULTS:
  : 48
  : undefined
+ generate a *whole random* number between any range?
  #+BEGIN_SRC js
function gen_rand( min, max ) {
    let r = Math.floor( Math.random() * (max - min) + min );
    return r;
}

let x = gen_rand(50, 100);
console.log(x);
  #+END_SRC
+ convert a *string* to *integer* ? (stoi)
  #+BEGIN_SRC js
let s = "54";
let q = "54";
console.log(s + q); /* outputs: 5454 */
s = parseInt(s);
q = parseInt(q);
console.log(s + q); /* outputs: 108 */
  #+END_SRC
+ convert a string to integer with a special base?
  #+BEGIN_SRC js
  let m = "10010111001";
  let n = parseInt(m, 2); /* outputs: 1209 */
  #+END_SRC
+ prevent objects from *mutation* ?
  use *Object.freeze(MY_OBJ)*
  #+BEGIN_SRC js
const MATH_CONSTANTS = {
    PI : 3.141592,
    E : 2.718281,
    PHI : 1.61803399
}
// const itself will not prevent mutation. need an extra step
Object.freeze(MATH_CONSTANTS);
  #+END_SRC
+ make *anonimous functions* in js?
  they also called *arrow functions* in js
  #+BEGIN_SRC js
  const magic = () => new Date();
  console.log(magic());
  #+END_SRC
+ make *anonimous functions* with parameters?
  used *s0* as a parameter below
  #+BEGIN_SRC js
const stoi = (s0) => parseInt(s0);
console.log(stoi("54"));
  #+END_SRC
+ concat two arrays into one?
  use *concat*
  #+BEGIN_SRC js
let A = [1,2,3,4];
let B = [5,6,7,8];
A = A.concat(B);
console.log(A);
  #+END_SRC

  #+RESULTS:
  : [1 (\, 2) (\, 3) (\, 4) (\, 5) (\, 6) (\, 7) (\, 8)]
+ check a number if it's an *integer* ?
  #+BEGIN_SRC js
  Number.isInteger(123);
  #+END_SRC
+ filter an array ?
  use *filter* function
  #+BEGIN_SRC js
let A = [1,2,3,4,5,6,7];
A = A.filter(x => (x > 4));
console.log(A);
  #+END_SRC
+ convert a string into an *array of words*?
  #+BEGIN_SRC js
let s = "that was a dark and stormy night";
let words = s.split(" ");
console.log(words);
  #+END_SRC
+ run a function through array elements?
  use *map()* function. it works like *transform* in C++
  #+BEGIN_SRC js
let A = [1,2,3,4,5];
A = A.map(x => x*2);
console.log(A);
  #+END_SRC
+ fill an array with random values?
  1. create an array with 10 elements
  2. *fill* the array with zeros
  3. *map* the array with random values

  #+BEGIN_SRC js
  let A = new Array(10);
  A.fill(0);
  A = A.map(x => Math.floor(Math.random() * 10));
  #+END_SRC
+ create fixed size array like *int A[100];* in C?
  #+BEGIN_SRC js
let A = new Array(100);
  #+END_SRC
+ use *variables* inside *string template literals* ?
  use *${VAR_NAME}*
  #+BEGIN_SRC js
var Person = {
    "name" : "savolla",
    "age" : 28
}
let s = `Hello, my name is ${Person.name}`;
  #+END_SRC
+ write a function that returns an object?
  this is the best way to return an object

  here is the *long one*
  #+BEGIN_SRC js
function makeDog( name, age, color ) {
    return {
        name : name,
        age : age,
        color : color
    };
}
ares = makeDog("ares", 12, "brown");
puki = makeDog("puki", 8, "white");
  #+END_SRC

  here is the *short one*
  #+BEGIN_SRC js
const makeDog = ( name, age, color ) => ( {name, age, color} );
ares = makeDog("ares", 12, "brown");
puki = makeDog("puki", 8, "white");
  #+END_SRC
+ make objects have methods?
  #+BEGIN_SRC js
const circle = {
    x : 0,
    y : 0,
    grow : function() {
        this.x++;
        this.y++;
    },
    shrink : function() {
        this.x--;
        this.y--;
    },
    eliptic : function( px, py ) {
        this.x = px;
        this.y = py;
    }
}
  #+END_SRC
+ create a constructor of a class?
  just like in C++
  #+BEGIN_SRC js
class veggie {
    constructor(name) {
        this.name = name;
    }
}

cabbage = new veggie("cabb");
console.log(cabbage.name);
  #+END_SRC
+ import a specific function from another js file?
  it's like *from matplotlib import pyplot* in python
  #+BEGIN_SRC js
import { function_name } from "path/to/file"
  #+END_SRC
  notice that we didn't use file extension in *path/to/file*
**** flashcards
+ 4 ways to declare a variable?
    #+BEGIN_SRC js
    var a = "savolla"; // function scope variable
    let a = "savolla"; // local variable
    const pi = 3.141592 // constant variable
    x = 87; // global variable
    #+END_SRC
+ what are *function scope* variables?
  they are *global* just in function scope
  #+BEGIN_SRC js
function f() {
    for ( let i = 0; i < 5; ++i ) {
        var f_global = 10;
    }
    console.log(f_global);
}

f();
  #+END_SRC

  #+RESULTS:
  : 10
  : undefined
+ do javascript confused with integer division?
  No. it can output floats when dividing two integers
  #+BEGIN_SRC js
  let a = 7;
  let b = 2;
  let c = a / b;
  console.log(c);
  #+END_SRC
+ do javascript support compound operators?
  Yes.
  #+BEGIN_SRC js
  let a = 3;
  a += 2;
  a -= 2;
  a *= 3;
  a /= 2;
  #+END_SRC
+ what to do if there are *double quotes* inside a string?
  single quote that string to avoid *escaping*
  #+BEGIN_SRC js
  let ling = '<a href="https://www.example.com">Click</a>';
  #+END_SRC
+ can we change a specific character in a string by indexy?
  No. strings are immutable
  #+BEGIN_SRC js
  let name = "vavolla";
  name[0] = "s"; // FIXME: ERROR
  #+END_SRC

  #+RESULTS:
+ can we store *different typed* values in an array?
  Yes!
  #+BEGIN_SRC js
  let multi = ["savolla", 28, 105.43, true, 2==1];
  console.log(multi[0]);
  console.log(multi[1]);
  console.log(multi[2]);
  console.log(multi[3]);
  console.log(multi[4]);
  #+END_SRC

  #+RESULTS:
  : savolla
  : 28
  : 105.43
  : true
  : false
  : undefined
+ can we also store *expressions* into an array?
  Yes!
  #+BEGIN_SRC js
  let multi = [2==2, 2==1];
  console.log(multi[0]);
  console.log(multi[1]);
  #+END_SRC

  #+RESULTS:
  : true
  : false
  : undefined
+ can we modify arrays using bracket notation?
  Yes! this does not work with strings but arrays are okay with that
  #+BEGIN_SRC js
  let A = ['a','b','c'];
  A[0] = 'x';
  A[1] = 'y';
  A[2] = 'z';
  #+END_SRC
+ what happens if we *pop* a multi-dimentional array?
  #+BEGIN_SRC js
  let A = [[1,2],
           [3,3],
           [4,5]];
  A.pop();
  console.log(A);
  #+END_SRC

  #+RESULTS:
  : [[1 (\, 2)] (\, [3 (\, 3)])]
+ can we remove *curly brackets* from single lined *if* ?
  Yes! javascript *allows* that
  #+BEGIN_SRC js
  if ( condition )
      x = 10;
  #+END_SRC
+ how *==* operator behaves in javascript?
  it can compare values *type independent*
  #+BEGIN_SRC js
let a = '3';
let b = 3;
if ( a == b )
    console.log("yes");
else
    console.log("no");
  #+END_SRC

  #+RESULTS:
  : yes
  : undefined
+ how *===* operator behaves in javascript?
  it works like *==* but this time it compares *same types*
  #+BEGIN_SRC js
let a = '3';
let b = 3;
if ( a === b )
    console.log("yes");
else
    console.log("no");
  #+END_SRC

  #+RESULTS:
  : no
  : undefined
+ what is the opposite of *===* operator ?
  #+BEGIN_SRC js
  !==
  #+END_SRC
+ how *switch* statements work in js?
  just like in C++ :)
+ iterate *nested loops*
  #+BEGIN_SRC js
A =[];
for ( let i = 0; i<3; ++i ) {
    A.push([]);
    for ( let j = 0; j<3; ++j ) {
        A[i].push(j);
    }
}
console.log(A);
  #+END_SRC
+ example of contacts list with js objects
  #+BEGIN_SRC js
var contacts = [
    {
        "first_name" : "Akira",
        "last_name" : "Laine",
        "number" : "05330000000",
    },
    {
        "first_name" : "Harry",
        "last_name" : "Potter",
        "number" : "05330000001",
    },
    {
        "first_name" : "Sherlock",
        "last_name" : "Holmes",
        "number" : "05330000002",
    },
]

for ( let i = 0; i< contacts.length; ++i ) {
    console.log(contacts[i].first_name);
    console.log(contacts[i].last_name);
    console.log(contacts[i].number);
}
  #+END_SRC
+ does javascript allow us to use *ternary* operators?
  Yes!
  #+BEGIN_SRC js
let a = 2;
let b = 7;
let c;
a > b ? c = 3 : c = 1;
console.log(c);
  #+END_SRC
+ how to do *nested ternary* operator?
  #+BEGIN_SRC js
function sign( n ) {
    return n > 0 ? "+" : n < 0 ? "-" : "0";
}

console.log(sign(-32)); // outputs: -
  #+END_SRC
+ can we change values of *const* array?
  Yes! I don't know why but yes we can!
  #+BEGIN_SRC js
const s = [1,2,3,4,5];
s[0] = 111;
s[4] = 112;
s[2] = 113;
  #+END_SRC
+ which *higher order* functions javascript have?
  #+BEGIN_SRC js
filter();
map();
sort();
split();
reduce();
  #+END_SRC
+ what *higher order function* can be used to sum every element in an array?

  use *reduce()*
  #+BEGIN_SRC js
  let A = [1,2,3,4,5];
  A = A.reduce((result = 0, x) => result += x);
  console.log(A);
  #+END_SRC
+ what the *rest operator* does?
  it let's us to call functions with infinite arguments. when it's used in function parameters, it treats arguments as *array*

  #+BEGIN_SRC js
function sum(...args) {
    return args.reduce( (x, result = 0) => result += x);
}
console.log(sum(1,2,3,4,5,6)); // outputs: 21
  #+END_SRC
+ what is *destructuring technique* ?
  it's a shortcut for assigning *Object properties* to another Object
  #+BEGIN_SRC js
var dog = {
    "name" : "ares",
    "color" : "brown",
    "age" : 12
};

var NEW_DOG = {
    "name" : a,
    "color" : b,
    "age" : c
} = dog;
  #+END_SRC
+ what are the benefits of *string template literals* ?
  1. variables can be used inside the string. without concatination
  2. double quotes can be used without escaping them
  3. new lines treated as new lines. so we can make multi-line strings
+ how *private* class members look in js?
  use *underscore* before the name
  #+BEGIN_SRC js
class Person {
    constructor(name) {
        this._name = name;
    }
}
  #+END_SRC
**** problems & solutions
** databases
*** mysql
**** facts
**** concepts
**** how to
***** enter date format
+ in mysql you enter date like this =2020-03-20=
***** change the type of a column
#+begin_src sql
ALTER TABLE $tabl_name MODIFY COLUMN $colmn_name $your_type;
#+end_src
+ if you are working from mysql's GUI, then you can TAB complete type name
***** insert values
#+begin_src sql
--                                                                                                       values to add
--            table name                                                                           .---------------------------.
--             /                                                                                  /         |          |        \
insert into Personel (PersonelName, PersonelSurname, PersonelSalary, PersonelBirthday) values ("Ahmet", "Albayrak", "2000", "1990-05-06");
--                          \               |                |             /
--                           '--------------------------------------------'
--                                            column names
#+end_src
**** problems & solutions
*** mongodb

* Tools
** text editors
*** emacs
**** General
***** facts
***** concept / term
***** tutorials / howto
***** problems and solutions
**** Org Mode
***** facts
+ *radio link*'ler tez ve referans dökümanları yazımında çok etkilidir | [[radio link]]
***** concept / term
****** radio link
mesela metin içinde *newton* geçen her yere wikipedia linkini eklemek istiyorsun, o zaman bunu kullanırsın. kullanıcı nerede newton görse, artık tıklanabilir bir link görür. [[radio link oluşturma][örnek]]
***** how to
****** döküman içi hızlı arama
1. Emacs için : =C-c C-j=
Doom için : =SPC m .=
2. aranmak istenen şeyi yaz
3. =Enter=
****** radio link oluşturma
1. sayfanın herhangi bir yerine <<<>>> içine kelimeyi yaz

[[radio link]] nedir?

****** external sitelere link oluşturma?
1. use [[][]] structure
2. enter *url* in first bracket
3. enter *alias* in second bracket
****** show only headers on startup
add =#+STARTUP: overview= to the beginning of the file
****** add footnotes to the bottom
1. create a heading in org mode
2. add [fn::footnote content] after the heading. for example;
******* Heading [fn::footnote content]

****** convert org file to html from outside emacs
1. you need to open emacs as a daemon to make this work
   #+begin_src sh
   emacs --daemon
   #+end_src
2. use *emacsclient -e* command to use emacs comands outside emacs.
   #+begin_src sh
   emacsclient -e "(progn (find-file \"~/txt/notitia.org\") (org-html-export-to-html) (kill-buffer))"
   #+end_src
you can also use every other command this way.
****** enable line numbers in source blocks
+ this will export with line numbers starting from 1
#+begin_src python -n
while True:
    print("*****")
    print("Emacs is LOVE")
    print("*****")
#+end_src

+ line numbers will start from 20
#+begin_src python -n 20
while True:
    print("*****")
    print("Emacs is LOVE")
    print("*****")
#+end_src
****** disable table of contects
#+begin_src org
#+OPTIONS: toc:nil
#+end_src

***** problems and solutions
*** doom
**** tips
+ great modules to use:
1. *pass* for password storing
2. *irc*
3. *org-roam* better note taking
4. *magit* awesome git tool
5. *deft* browse the notes
**** how to
***** create new keybinding for whichkey?
#+BEGIN_SRC elisp
(map! :leader :desc "toggle undo tree" "- c u" #'undo-tree-visualize )
#+END_SRC
***** do password management with pass
1. install pass on the system
#+BEGIN_SRC sh
sudo pacman -S pass
#+END_SRC
2. uncomment *:tools pass* in [[~/.doom.d/init.el][init.el]]
3. synchronize the doom
#+BEGIN_SRC sh
~/.doom.d/bin/doom sync
#+END_SRC
4. generate [[gpg]]
#+BEGIN_SRC sh
gpg --full-gen-key
#+END_SRC
5. generate your password directory
use email address that you entered while [[generate a gpg key][generating]] the gpg.
#+BEGIN_SRC sh
pass init $GPG_EMAIL
#+END_SRC
6. git integration for your passwords
this is a cool feature. you never loose your passwords even if you delete it!
#+BEGIN_SRC sh
pass git init
#+END_SRC
7. now fire up *doom*
8. open pass
SPC : pass
***** fast commit!
=SPC g g S c c "commit desc" C-c C-c q=
***** see the value of a variable?
1. =SPC ;=
2. type the variable name
3. =RET=
***** disable line wrapping
=SPC w t=
***** search usage of a function online
1. cursor over the *function*
2. =SPC s O=
3. =github RET=
4. add the extension of your programming language at the end of the promt;
example: /org-beamer-theme extension:el/
5. =RET=
***** convert org file to html on command line
1. start emacs daemon
   #+begin_src sh
   emacs --daemon
   #+end_src
***** how to block with doom
read [[https://ox-hugo.scripter.co/][this]]

***** add and delete projects in treemacs
****** I. way
this way will only affect the current workspace
=C-c C-p a=               add project to treemacs
=C-c C-p d=               remove project from treemacs
****** II. way
this will globally add your projects
1. =SPC :=
2. =treemacs-edit-workspaces=
3. add your project under *Default* like this;
   #+begin_src org
   ,** YOUR_PROJECT_NAME
        - path :: PATH_TO_PROJECT
   #+end_src
4. finish editing by doing =treemacs-finish-edit=

***** effective coding with doom emacs :tools:doom:emacs:programming:howto:
:PROPERTIES:
:EXPORT_FILE_NAME: programming-in-doom-emacs
:EXPORT_TITLE: programming in doom emacs
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
This is how I use [[https://github.com/hlissner/doom-emacs][doom emacs]] for daily coding. Doom and it's packages are working together to make developer's life easy. Here I made a complete list for you guys. This is a *step by step* guide to do coding on doom emacs. By the way when I say things like =C-c C-p= it means =CTRL + c + p=
****** before we start
to make things work enable *specified* modules in your *init* file
1. do =SPC f p= and select *init.el*
2. enable(uncomment) the following modules;
   - magit
   - treemacs
   - lookup
3. reload doom by doing =SPC h r r=
****** cloning projects
1. =SPC g C= to run magit clone
2. press =u= to specify repo url
3. paste your url with =Ctrl Shift v= (for linux)
4. specify the path for the repo
5. press =y= to make *origin* default branch
6. wait until the cloning is finished
7. press =q= to quit
****** adding projects
1. =SPC o p= to open *treemacs*
2. =C-c C-p a=
3. specify the *path* for your porject
4. now you see your project directory appeared in your *treemacs* menu
****** navigate files
1. =SPC SPC= brings menu with *all files* under your project root
2. type any keyword you want
you don't have to type entire file name. menu items will be reduced once you type some characters.
****** find symbols (method, variable, objects)
1. press =SPC /=
2. type your keyword or /function/, /variable/, /class/ or /struct/ names.
3. once you enter the keyword, doom will jump to that file instantly
4. =C-o= to go *back*
5. =C-i= to go *forward*
****** recent files
if you work on other things other than your project, for example editin some config files while coding etc, then you probably type the *file path* every single time to navigate to that config file. doom solves it with
1. =SPC f r= brings a menu or recently visited files
2. find and navigate
3. =C-o= to go *back*
4. =C-i= to go *forward*
****** lookup code
sometimes we can't find a good documentation on a method/module when coding. the best way to understand something is to looking at examples
1. navigate your cursor on method, module you want to understand
2. do =SCP s o=
3. choose *Github*
4. before hitting =RET= you can optionally specify the following items for more accurate results;
   - filename:
   - path:
   - extension:
here is an example for searching *printf* on github
#+begin_quote
printf extension:.c filename:main.c path:src
#+end_quote
****** find and replace projectwise
you can change a variable or method name projectwise. this is usefull in *code refactoring*. here is how to do that in doom;
1. =SPC /=
2. enter the *symbol name*. "emacs" in this example
3. =C-c C-e=
4. =:%s/emacs/doom/g=
5. =RET=
6. =Z Z=
there must be an easier way..

***** launch without X
#+BEGIN_SRC bash
emacs -nw
#+END_SRC
**** cheat sheet

=SPC - t t=                                 toggle tabs
=SPC - t l=                                 list tabs
=SPC - t n=                                 next tab
=SPC - t p=                                 previous tab
=SPC - t o=                                 create new tab
=SPC - t k=                                 kill tab

=SPC - c t=                                 open tagbar
=SPC - c g=                                 run gdb
=SPC - c u=                                 open undo tree
=SPC t z=                                   toggle zen mode
=SPC /=                                     ag
=SPC f r=                                   fast navigate recent files
=SPC g g S c c "msg" C-c C-c q=             fast commit
=SPC / foo C-c C-e :%s/foo/bar/g RET Z Z=   find foo and replace with bar in project
=SPC X t=                                   enter a new todo
=SPC w t=                                   disable line wrapping

=SPC n r t a=                               add roam tag
=SPC n r t d=                               delete roam tag
=SPC n r G=                                 start [[http://localhost:8080][graph server]]
=SPC SPC=                                   find file in project tree

=C-c C-p a=                                 add project to treemacs
=C-c C-p d=                                 remove project from treemacs

=SPC s f=                                   locate file in system
=SPC s b=                                   search inside buffer (usefull for searching notes)

**** problems & solutions
***** with-editor.elc failed to provide feature ‘with-editor’
#+begin_src sh
rm -rf ~/.emacs.d/.local/straight/build*/with-editor && doom sync
#+end_src
***** omnisharp sever is not installed
1. =SPC :=
2. =omnisharp-install-server=
3. =RET=

*** vim
**** blog
***** less known vim tricks :vim:howto:tools:
:PROPERTIES:
:EXPORT_FILE_NAME: less-known-vim-tricks
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
****** ourput redirection
+ you can redirect outputs of a *shell command* in vim
  1. press =ESC=
  2. =:r !ls -la=
  3. =RET=
****** whitespace removal
+ remove all *trailing whitespaces*. you can also make the following a *permanent macro*
  1. press =ESC=
  2. =:%s/\s\+$//e=
  3. =RET=
****** time travel
+ show the file 10 mins *ago*
  1. press =ESC=
  2. =:earlier 10m=
  3. =RET=
+ show the file *after* 10 mins
  1. press =ESC=
  2. =:later 10m=
  3. =RET=
**** code blocks
+ essential vimrc
#+BEGIN_SRC sh
set tabstop=4
set shiftwidth=4
set expandtab
syntax on
inoremap jk <Esc>
#+END_SRC
**** how to
***** permanent macros in vim :vim:howto:tools:
:PROPERTIES:
:EXPORT_FILE_NAME: permanent-macros-in-vim
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
this is a short *step by step* tutorial to save your *vim macro* and use it everytime
1. fire up *vim*
2. do =q a=
3. create your macro
4. press =q= to finish
5. exit vim =:q!=
6. =vim ~/.vimrc=
7. type =let @q = ''=
8. put your cursor on *first single quote*
9. do =" a p=
10. macro should be pasted inside single quotes like:
#+begin_src sh
let @q = 'your_macro_content'
#+end_src
11. save and exit =ESC :wq=
12. fire up *vim* again
13. do =@ q=
now you should have your macro saved. after this moment everytime you open a vim session, this macro will be read from =.vimrc= and you will able to use it.
***** redirect command output into vim session
1. press =ESC=
2. =:r !ls -la=
3. =RET=
***** remove all trailing whitespaces
1. press =ESC=
2. =:%s/\s\+$//e=
3. =RET=
***** time travel
+ show the file 10 mins *ago*
  1. press =ESC=
  2. =:earlier 10m=
  3. =RET=
+ show the file *after* 10 mins
  1. press =ESC=
  2. =:later 10m=
  3. =RET=

*** spacevim
**** tutorials / howto
***** how to installation
1. install dependencies
#+BEGIN_SRC sh
sudo pacman -S neovim
sudo pacman -S clang
sudo pip install --user pynvim
sudo pip3 install --user pynvim
#+END_SRC
2. download and install
#+BEGIN_SRC sh
curl -sLf https://spacevim.org/install.sh | bash
#+END_SRC
3. open nvim and type *VimProcInstall*
#+BEGIN_SRC sh
nvim
:VimProcInstall
#+END_SRC
4. restart nvim. it will download all the plugins

***** essential keys
1. <F3> opens *file manager*
2. <F2> opens *Tagbar*
3. \ is the leader in spacevim
***** open configuration
SPC f v d
*** visual studio
**** shortcuts
1. create a class property by doing:
=prop TAB TAB=
2. constructor
=ctor TAB TAB=
**** how to
***** create a Layered Architecture project
****** project creation part
1. create new project
2. select *blank solution*
3. give solution a name
4. right click on solution add / new project
5. select *Class Library (.NET Framework)
6. use this naming convention: "YourApp.Layer"
7. create the following projects;
   a. YourApp.Entities
   b. YourApp.Business
   c. YourApp.DataAccess
8. the last one is UI layer. add a new "Windows Forms App (.NET Framwork)"
9. name it "YourApp.WebFormsUI"
****** structuring
1. delete all auto generated classes
2. create two folders for each layer;
   - Abstract
   - Concrete
   interfaces and abstract classes go inside *Abstract* folder, concrete implementations go inside *Concrete*
3. apply step 1 and 2 to DataAccess, Business and Entities layers. User Interface layer has it's own properties
*** spacemacs
**** key bindings

#+BEGIN_SRC sh
  spc f t   # toggle treemacs
  spc w c c # distraction free editing
  spc l o   # switch to custom layout
  spc h spc # lookup documentation for a layer
  spc j j   # easy motion on emacs. also can be used with commands
  spc j i   # show semantic tags in code. functions, dependencies etc.
  spc j l   # jump to line. I think it's more convinient that spc jj
  spc j q   # navigate on a variable and use this to see other occurencies
  spc m g g # go to deffinition
  C-o       # jump back through the window traverse history
  C-i       # jump forward through the window traverse history
  spc x d w # delete trailing white spaces
#+END_SRC

**** how to
  + create a custom layout
    put the following under *defun dotspacemacs/user-config ()*. The following code
    is just an example but you can find your way from here

    #+BEGIN_SRC emacs-lisp
      (spacemacs|define-custom-layout "@coding"
        :binding "d"
        :body
        (helm-projectile-switch-project)
        (split-window-right-and-focus)
        (split-window-below-and-focus)
        (multi-term) ;; launch shell
        (treemacs-select-window) ;; fire up file manager
        )
    #+END_SRC

    now restart emacs and press *SPC l o* then select *@coding*

  + see instant documentation about a function
    if you want to know what a specific function does just navigate your cursor on it
    and press *Shift K*

**** info
**** tips

** programming tools
*** make
**** one Makefile for everything :tools:make:programming:
:PROPERTIES:
:EXPORT_FILE_NAME: one-makefile-for-everything
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
here! you found it! this is one single Makefile that fits all projects with this file structure:

#+begin_src txt
project /
├── include
├── build
├── lib
├── obj
├── src
├── test
├── main.c
└── Makefile
#+end_src

#+BEGIN_SRC makefile
TARGET_EXEC ?= a.out

BUILD_DIR ?= ./build
SRC_DIRS ?= ./src

SRCS := $(shell find $(SRC_DIRS) -name *.cpp -or -name *.c -or -name *.s)
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)
DEPS := $(OBJS:.o=.d)

INC_DIRS := $(shell find $(SRC_DIRS) -type d)
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

CPPFLAGS ?= $(INC_FLAGS) -MMD -MP

$(BUILD_DIR)/$(TARGET_EXEC): $(OBJS)
$(CC) $(OBJS) -o $@ $(LDFLAGS)

# assembly
$(BUILD_DIR)/%.s.o: %.s
$(MKDIR_P) $(dir $@)
$(AS) $(ASFLAGS) -c $< -o $@

# c source
$(BUILD_DIR)/%.c.o: %.c
$(MKDIR_P) $(dir $@)
$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# c++ source
$(BUILD_DIR)/%.cpp.o: %.cpp
$(MKDIR_P) $(dir $@)
$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@


.PHONY: clean

clean:
$(RM) -r $(BUILD_DIR)

-include $(DEPS)

MKDIR_P ?= mkdir -p
#+END_SRC
*** microsoft SQL Server
**** how to
***** create more than one primary keys in a table
this technique is called *clustered primary key*
#+begin_src sql
CREATE TABLE [dbo].[StudentCourse]
(
    [StudentId] INT NOT NULL,
    [CourseId] INT NOT NULL,
    PRIMARY KEY CLUSTERED ("StudentId","CourseId"),
    CONSTRAINT [FK_StudentCourse_Course] FOREIGN KEY ([CourseId]) REFERENCES [Course]([CourseId]),
    CONSTRAINT [FK_StudentCourse_Student] FOREIGN KEY ([StudentId]) REFERENCES [Student]([StudentId])
)
#+end_src

*** github
**** how to
***** search code in Github :howto:tools:git:
:PROPERTIES:
:EXPORT_FILE_NAME: search-code-in-github
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
1. for example I'm searching for "setq" keyword which exists in ".doom.d" directory, file is called "config.el" and is written in "Emacs Lisp" language
2. go to [[https://www.github.com/search][github search]]
3. search for the following string
   #+begin_src txt
setq extension:el path:.doom.d filename:config.el language:"Emacs Lisp" extension:.el
   #+end_src
*** hugo
this is a static website generator
**** what is
+ draft: this is a parameter which determines the post state. if draft is =true= then the post will not be shown to users

**** how to
***** get started
1. install first
   #+begin_src sh
   sudo pacman -S hugo
   #+end_src
2. create a new site directory
   #+begin_src sh
   hugo new site $YOUR_SITE_NAME
   #+end_src
3. download a theme from [[https://themes.gohugo.io/][here]].
   #+begin_src sh
   cd $YOUR_SITE_NAME
   git clone https://github.com/vaga/hugo-theme-m10c.git themes/m10c
   #+end_src
4. start the server to run your site
   #+begin_src sh
   cd $YOUR_SITE_NAME
   hugo server
   #+end_src
   find the localhost address and port in the output and open this url in browser. this port number is usualy *1313*
5. open in browser
   #+begin_src sh
   $YOUR_BROSWER http://localholt:$PORT_NUMBER
   #+end_src
***** embed your telegram account
1. fire up your *telegram*
2. go to *settings*
3. click on your *username* (it has '@' at the beginning)
4. at the bottom of the menu, you will see a link like;
   #+begin_quote
https://t.me/YOUR_USERNAME
   #+end_quote
5. take this link and add to your website by following your theme's *social settings*

**** examples
***** config.toml file
#+begin_src toml
baseURL = "http://example.org/"
languageCode = "en-us"
DefaultContentLanguage = "en"
title = "Meghna"
theme = "meghna-hugo"
summaryLength = 10

[taxonomies]
  author = "author"
  category = "categories"
  tag = "tags"

# Menu
[menu]
    [[menu.nav]]
    name = "About Us"
    URL = "about"
    weight = 2

    [[menu.nav]]
    name = "Service"
    URL = "services"
    weight = 3

    [[menu.nav]]
    name = "Portfolio"
    URL = "portfolio"
    weight = 4

    [[menu.nav]]
    name = "Team"
    URL = "our-team"
    weight = 5

    [[menu.nav]]
    name = "Pricing"
    URL = "pricing"
    weight = 6

    [[menu.nav]]
    name = "Blog"
    URL = "blog"
    weight = 7

    [[menu.nav]]
    name = "Contact"
    URL = "contact-us"
    weight = 8

# Site params
[params]
home= "Home"
logo = "images/logo.png"
gmapAPI = "https://maps.googleapis.com/maps/api/js?key=AIzaSyCcABaamniA6OL5YvYSpB3pFMNrXwXnLwU&libraries=places"
# Meta data
description = "Responsive Multipurpose Parallax HTML5 Template"
author = "Themefisher"
# Google Analitycs
googleAnalitycsID = "Your ID"
custom_css = ["css/custom.css"]

    # Banner Section
    [params.banner]
    enable = true
    bgImage = "images/slider/hero-area.jpg"
    icon = "tf-ion-play"
    heading = "Experience the new reality"
    content= "Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugit, excepturi. At recusandae sit perferendis autem,iste tempora nostrum numquam sapiente!"
    btn = true
    btnText="Explore Us"
    btnURL="#services"

    # call to action
    [params.cta]
    enable = true
    title = "Great Design & Incredible Features"
    content = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Officiis tenetur odio impedit incidunt? Omnis accusantium ea reiciendis, fugit commodi nostrum."
    btnURL = "#"
    btnText = "Start a project with us"

    # counter
    [params.counter]
    enable = true
    bgImage = "images/backgrounds/bg-1.jpg"
        [[params.counter.counterItem]]
        title = "Happy Clients"
        icon = "tf-ion-android-happy"
        count = "320"

        [[params.counter.counterItem]]
        title = "Projects completed"
        icon = "tf-ion-archive"
        count = "565"

        [[params.counter.counterItem]]
        title = "Positive feedback"
        icon = "tf-ion-thumbsup"
        count = "95"

        [[params.counter.counterItem]]
        title = "Cups of Coffee"
        icon = "tf-ion-coffee"
        count = "2500"

    # footer
    [params.footer]
        copyright = "Themefisher Team"
        copyrightURL = "http://www.themefisher.com"

        # social Icons
        [[params.footer.socialIcon]]
        icon = "tf-ion-social-facebook"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-twitter"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-google-outline"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-youtube"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-linkedin"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-dribbble-outline"
        url = "#"

        [[params.footer.socialIcon]]
        icon = "tf-ion-social-pinterest-outline"
        url = "#"
#+end_src
*** docker
**** concepts
**** tips
**** facts
**** how to
**** problems & solutions
*** plantuml
**** concepts
**** tips
**** facts
**** how to
***** create a basic class diagram
1. use "results output" to show image result
  #+begin_src plantuml :results output
  @startuml
  class A {
      ...
      method1();
      method2();
  }
  class B {
      ...
      method3();
      method4();
  }
  A -> B
  @enduml
#+end_src
***** draw horizontal lines and vertical lines
1. use =->= for horizontal line drawings
2. use =-->= for vertical lines
***** avoid diagonal relation lines
add the following line under @startuml
#+begin_src plantuml
@startuml
skinparam linetype ortho
@enduml
#+end_src
***** increase output image size
add the following line under @startuml
#+begin_src plantuml
@startuml
skinparam dpi 300
@enduml
#+end_src
**** problems & solutions

** command line utility
*** imagemagick
**** how to
***** resize an image (ignore aspect ratio)
#+BEGIN_SRC sh
convert example.png -resize 200x100 example.png
#+END_SRC
***** resize an image (respect aspect ratio)
#+BEGIN_SRC sh
convert example.png -resize %50 example.png
#+END_SRC
***** convert between formats
#+BEGIN_SRC sh
convert howtogeek.png howtogeek.jpg
#+END_SRC
***** rotate an image
#+BEGIN_SRC sh
convert howtogeek.jpg -rotate 90 howtogeek-rotated.jpg
#+END_SRC
***** negate an image
#+BEGIN_SRC sh
convert splash.png -negate splash.png
#+END_SRC
*** vboxmanage
**** how to
***** start a vm
#+begin_src sh
vboxmanage startvm win10
#+end_src
***** take a snapshot of a vm
#+begin_src sh
vboxmanage snapshot win10 take $NAME
#+end_src
***** restore snapshot
#+begin_src sh
vboxmanage snapshot win10 restore $NAME
#+end_src
*** bc
**** how to
***** use bc
#+begin_src sh
echo "1+1" | bc # outputs 2
#+end_src
*** gpg :tools:howto:gpg:
:PROPERTIES:
:EXPORT_FILE_NAME: what-is-gpg
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_TITLE: what is gpg
:EXPORT_AUTHOR: savolla
:END:
+ also called *gnu privacy guard*
+ this is a key which helps to encrypt and decript files
+ there are 2 types of gpg keys;
1. private : unlocks everything you lock with that
2. public : you send to other people
+ gpg keys _expire_ ! so you need to generate them once or twice a year
**** how to
***** generate a gpg key
1. first generate personal key:
   #+BEGIN_SRC sh
gpg --full-gen-key
   #+END_SRC
2. choose *RSA and RSA*
3. choose *4096* for maximum security
4. choose *y = 1* to make the key expire in one year
5. enter your *real name and surname*
6. enter your *email*
7. confirm
8. enter a password. this is the password of your key. _DON'T FORGET IT_

***** encrypt files with gpg
1. navigate to directory you want to encrypt (here I generate a random file)
   #+BEGIN_SRC sh
echo "secret message" > ~/secret-file.txt
   #+END_SRC

2. encrypt the file
   #+BEGIN_SRC sh
# -r : recepient (in this case me)
# -e : file to encrypt
gpg -r your_mail@provider.com -e secret-file.txt
   #+END_SRC
   after this command, a file with *gpg* extension will be created. so now you can put this file (*secret-file.txt.gpg*) on the internet and no one will know what it is

3. remove the original file (optional)
   + basic remove
   #+BEGIN_SRC sh
rm secret-file.txt
   #+END_SRC

   + deep remove (more secure)
   #+BEGIN_SRC sh
shred -u secret-file.txt
   #+END_SRC

***** decrypt files with gpg
1. decrypt command
   #+BEGIN_SRC sh
gpg -d secret-file.txt
   #+END_SRC
2. then enter the password of your *gpg key*. the password you entered while [[generate a gpg key][generating]] the key
*** git
**** how to
***** undo the "git add"
#+begin_src sh
git reset $YOUR_FILE
#+end_src
***** control a repository from outside
1. use *--git-dir=* option
2. specify the *.git* folder of your project
   #+begin_src sh
   git --git-dir=$HOME/path/to/.git
   #+end_src
3. you can now issue normal git commands after that string like:
   #+begin_src sh
   git --git-dir=$HOME/path/to/.git add -u
   git --git-dir=$HOME/path/to/.git commit -m "initial"
   #+end_src
***** store your credentials for automatic pushes
#+begin_quote
this is not secure! your password and username will be stored inside *.git* directory in *planetext*. enyone on your PC will have access to them. you've been warned!
#+end_quote

1. go to your repository
   #+begin_src sh
   cd $YOUR_REPO
   #+end_src
2. make some changes
3. modify the *git config* for password and username storing
   #+begin_src sh
   git config --global credential.helper store
   #+end_src
4. commit and push your changes
   #+begin_src sh
   git commit -m "username and password adjustment"
   git push -u origin $YOUR_BRANCH
   #+end_src
5. now the git utility will ask you *username* and *password*. enter those and you are good to go

after this operation, git won't ask for username and password for this repository. this is not a global modification btw. you have to do this for every repo
***** switch to specific commit
useful if you want to go back to the last checkpoint in your project. let's say you commited your project when it was working without problems. you code a little bit more and bam.. it's not working now.. insted of fixing bugs, you might go back in git commit history
1. get the last commit's *id*
   #+begin_src sh
git log
   #+end_src
2. go back to last commit
   #+begin_src sh
git reset --hard $COMMIT_ID
   #+end_src
now all the local changes you made will be lost
*** stow
restores dotfiles from a directory
*** youtube-dl
**** how to
***** download video with best quality
#+begin_src sh
youtube-dl -f 22 $VIDEO_LINK
#+end_src
***** download a playlist
#+begin_src sh
youtube-dl -cio -f 22 '%(autonumber)s-%(title)s.%(ext)s' $VIDEO_LINK
#+end_src
*** rofi
program launcher and more
**** how to
***** change theme
#+begin_src sh
rofi-theme-selector
#+end_src
*** find
**** how to
***** search more than one file names
1. use *-o* parameter for *or*
#+begin_src sh
find ~/lib* -type f -name '*.pdf' -o -name '*.epub'
#+end_src
*** objdump
**** how to
***** display only executable sections
#+BEGIN_SRC sh
objdump -d <BINARY>
#+END_SRC
***** display all sections
#+BEGIN_SRC sh
objdump -D <BINARY>
#+END_SRC
***** display with source code
- this requires =-g= option when compiling with *gdb*
#+BEGIN_SRC sh
objdump -S <BINARY>
#+END_SRC
***** switch to intel syntax
#+BEGIN_SRC sh
objdump -M intel -[d|D] <BINARY>
#+END_SRC
***** display assembly in 32-bit layout
#+BEGIN_SRC sh
objdump -M i386,intel -[d|D] <BINARY>
#+END_SRC
*** nasm
**** how to
***** make binary executable
#+BEGIN_SRC sh
nasm -f bin -o test <CODE>.asm #
#+END_SRC
***** make elf executable
#+BEGIN_SRC sh
nasm -f elf -o test <CODE>.asm #
#+END_SRC
*** radare2
:PROPERTIES:
:EXPORT_FILE_NAME: radare-notes
:EXPORT_TITLE: radare notes
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
**** key bindings
***** normal mode

#+BEGIN_SRC sh
V               # enter visual mode and show hexdump view
aaa             # analyse the binary. unlocks other functions. do this first you open up a binary
aaaa            # experimnetal analysis. might take more time for huge binaries
afl             # see all funcitons (also called symbols) in the binary
afll            # really cool color coded function list
s <FUNCTION>    # seek to <FUNCTION>
ii              # show imports don't forget to analyse first
iS              # show sections in memory
is              # show all symbols including global, local variables
iz              # show ascii strings
iI              # general binary information
#+END_SRC

**** visual mode

#+BEGIN_SRC sh
p               # disassembler view
pp              # debuggin view
ppp             # byte distribution view
pppp            # byte string view for copying in C or Pyhton
n               # seek to next function
N               # seek to previous funciton
#+END_SRC

**** how to

+ jump to a function from *debug* or *disassembler* view
   1. use j/k keys to navigate on ~call~ instruction
   2. when call instruction is on the top press ~<ENTER>~ key
   3. hit ~u~ to come back

+ see *hex dump* of a function from *disassembler* view
   1. navigate to call just like you do for jumping to funciton
   2. press ~<Shift> p~
   3. come back with ~p~

+ see where a specific function is called across the binary using ~xref~
   1. from *visual mode*
     - seek to the function you want to see where it's called
     - press ~<ENTER>~ key
     - do ~:axt~
   2. from *normal mode*
     - ~s <FUNCTION*NAME>~
     - ~axt~
     this iformation can also be seen from *visual mode* above function name. also if you want to
     see ~jumps~ from a function. use ~axf~

+ ~patch~ a binary
   1. ~r2 -w <BINARY>~ open the binary with *write* permissions
   2. ~aaa~ analyze
   3. ~V~ enter visual mode
   4. ~p~ go to disassembler view
   5. ~:s <ADDRESS*TO*MODIFY>~ seek to address you want to modify
   6. ~:e asm.var.sub=false~ "[var*4h]" notations don't work when modifying. change to [rbp - 4]
   7. ~A~ enter modification mode and *write new instruction in assembly*
   8. hit ~<ENTER>~ two times and done
   9. additionally you can set `asm.var.sub` back to ~true~ if you want

+ how to ~debug~ a binary
   1. ~r2 -d <BINARY>~ open binary with debug mode
   2. ~V~ enter visual mode
   3. ~pp~ enter *disassembler* view
   4. additionally you can increase the *stack size* if you want with ~:e stack.size=256~
   5. ~<F8>~ next instruction
   6. ~<F7>~ step into call
   7. ~db <FUNCTION|ADDRESS>~ set brakepoint
   8. ~dc~ continue. hits the first breakpoint it encounters
   9. ~do~ reopens binary. saves breakpoints so you don't have to set them everytime
   10. in case you lost hit ~.~ to come back to *ip*(instruction pointer)
   11. ~dsf~ step until end of frame. this is handy when you accidentally step into a function

**** info
1. most *visual mode* keys have a *command* equivalent
2. to show *hex dump* in non-visual mode use +*px <BYTE*AMOUNT>**
3. most function won't work in radare2 until you analyze the binary. use +*aaa** and *aaaa* for experimental analysis.
4. you can use *normal mode* commands in *visual mode* as well. use +*:** when you wanna run some r2 commands
5. with +*iI** some important information like *nx*(non-executable stack), *canary*, *pic*(position independent code) can be seen
6. if *pic* is true then the file will randomize *base address* for every run
7. use *<COMMAND>~..* to pipe output to *less* like shell

**** tips
1. always use ~-A~ argument when opening a binary with radare. so you don't have to do
   ~aaa~ everytime. ~-AA~ also can be used bug takes long time on huge binaries

*** mpv
**** key bindings
**** how to
1. play youtube videos with only audio
   #+BEGIN_SRC sh
   mpv -vo=null $VIDEO_URL
   #+END_SRC
**** info
1. you can play videos from youtube with only audio (see: hot to 1)
**** tips
*** pacman
**** how to
***** how to see only AUR packages I've installed
#+BEGIN_SRC bash
pacman -Qm
#+END_SRC
** hardware
*** CASIO fx-991ex
**** how to
***** solve and equation for x
1. enter an equation. for example:
/x + 7 = 10/
2. press: *SHIFT CALC*
you will see x=some_value. don't worry. this is just x with previous stored value
3. press *=*
now you see the value for x
***** take percentage of a number
/$NUMBER * $percentage %/

** retroarch
*** facts
**** best cores for specific platforms
+ *snes* : bsnes-hd beta
+ *n64*: mupen43plus-next
+ *ps1*: epsxe
** famitracker
*** key bindings

#+BEGIN_SRC sh
<F1> # open documentation
<SPACE> # toggle record mode. write music
<Enter> # start over the song / stop the song
<F7> # start player
<F8> # stop player
<PageUp> # go up faster (4 moves at once)
<PageDown> # go down faster (4 moves at once)
<Home> # go to start of the frame
<End> # go to the end of the frame
<Ctrl> v # pastes selected notes and overwrites previous notes
<Ctrl> m # pastes selected notes but does not overwrite anything
#+END_SRC

*** how to
+ create sound
  1. *go to* toolbar and *click* on _instruments_
  2. *click* on _new instrument_
  3. *press* *<space>* to enter _edit mode_
  4. *click* on editor below
  5. *click* on first bar and press +*z**
  6. it will create a _C-3_ sound

+ selecting a group of notes and pressing *<Ctrl> <F1>* will _decrease_ notes by a _semitone_
+ selecting a group of notes and pressing *<Ctrl> <F2>* will _increase_ notes by a _semitone_
+ selecting a group of notes and pressing *<Ctrl> <F3>* will _decrease_ notes by an _octave_
+ selecting a group of notes and pressing *<Ctrl> <F4>* will _increase_ notes by an _octave_

*** info
+ each channel has 4 collumns. _note, instrument, volume, effect_ for example: _C-3 00 F 462_
+ Nintendo can use only 5 channels. _pulse1, pulse2, triangle, noice, DPSM_
+ keyboard keys from +*z** to **ç** can be used as piano keys
+ you can select region of notes with _mouse_ then _copy_ and _paste_ notes
+ pressing *<shift>* and _arrow keys_ will also select a region
** gimp
*** key bindings
*** how to
+ center the text
  1. press Q
  2. click image
  3. select text layer
  4. Layer/Crop to Content
  5. use Align options at left

+ add shadow to text
  1. write a text
  2. Layer/Light and Shadow/Drop Shadow
** unity
*** key bindings

~f~               : focus on an object
~q~               : toggle hand mode. helps to move around the level
~w~               : toggle move tool
~e~               : toggle rotate tool
~r~               : toggle resize tool
~t~               : toggle rectangle moving, resizing tool
~y~               : toggles multi mode. resize, rotate and move at the same time
~<CTRL> d~        : duplicate object. don't forget to select it first
~<SHIFT> <SPACE>~ : maximize game windows

*** how to

1. *focus* on an _object_

   + first way:
     - *select* _object_ from the _scene_
     - *press* ~f~

   + second way
     - *select* _object_ from _hierarchy menu_
     - *double click* on _object_
2. *set* object on _origin_
   - *select* _object_
   - *right click* on menu Inspector/Transform
   - *click* _reset_

3. *color* an *object*
   - *right click* on menu Project/Create/Material
   - *rename* it to something reasonable
   - *click* color bar next to *albedo*
   - *press* ~<ENTER>~ (optional for first time run. if you have tiling WM)
   - select your color
   - *drag* your _new skin_ on the object you want to color

4. add *rigid body* to an *object*
   - *select* the *object*
   - *go to* *inspector* menu
   - *click* *add component* below the menu
   - *click* Physics/Rigidbody

   you can test this future by giving a bit height to the object and randomly rotate it
   then press *play* button. you should see the object falls

5. *change* *sky color*
   - *click* on *main camera*
   - *click* Inspector/Camera/Skybox
   - *click* *solid color*
   - *select* *background color*

6. *add* a *script*
   - *right click* on *project* menu
   - *click* Create/C# Script
   - *write* your *code* inside script and *save*
   - *drag and drop* your *script* on target *object*

7. *change* _snapping_ behaviour
   - *go to* ~Edit/Snap Settings~
   - *change* x,y,z values

   now when you move any object by holding ~Ctrl~ key it's movement will be snappy
8. *create* an _object of objects_
   - *create* an object with simple cube, sphere etc. and rename it to "obj_child"
   - *press* ~Ctrl Shift n~ and a new _empty_ object will be created in _main menu_
   - *rename* it to "obj_parent"
   - *drag* _obj_child_ into _obj_parent_

   you can create a compound objects like _houses_ and easily *resize* and *move* them

*** info
1. Unity can be programmed by *C#* and *javascript*

2. when you move an object in editor it will move in very high resolution so later
   you will always need to set it's coordinates manualy. to prevent this hold
   ~Ctrl~ key, click on any axis of the object (x | y | z) then drag. it will move
   smoothly. snappy

3. you can create an _object of objects_. for example you created a *house* from
   basic elements like cubes. you can now make that house a *compound object*
   a.k.a. _object of objects_. see line 8 in _how to_ section

4. list of Menus:
   - =Hierarchy=: contains *game objects*, *camera*, *lighting*, *characters* etc.
   - =Inspector=: contains all the properties of selectred object from *Hierarchy* menu
   - =Project/Assets=: contains *backgrounds*, *sprites*, *weapon* *sprites*, *torches*,
     *rocks*, *trees*, *game scripts*, materials

   you should create a folder for every class in *Assests* section. for example create
   *sprites* folder and store them here. same thing for *scripts* and *materials*

5. *rigid body* component makes the object fall through gravity

6. *collider* component makes objects collide with other collider objects. collider
   object do not fall.

*** tips
1. you can *grab* the _game window_ and *place* it next to _scene_. and *move* the
   _camera_. it really helps while testing

2. you can think of *scenes* as *levels* in the game

3. [2D] if you want your character stay on the ground, add *collider* and *rigid body*
   to your character object. add *edge collider* to the top of your ground

* Concepts
** ORM
+ this is a technique that *takes the class* and converts it's properties into a database table
+ for example consider this class:
#+BEGIN_SRC python
class Human:
    id = 0
    name = ""
    surname = ""
    birthday = ""
#+END_SRC
this class will be converted to the *database table* called *Human*

| Id | name | surname | birthday |
|----+------+---------+----------|
|    |      |         |          |

+ Window's ORM technology is the *Entity Framework*

** MVC
+ Model, View and Controller
+ it's a *design pattern*
+ found in 1970
+ currently widely adopted in *Web Development*
+ examples of MVC frameworks;
  1. .Net Core
  2. Ruby on Rails
  3. Express
+ Model : contains all classes
+ Controller : instantiates classes from Model and returns them to View
+ View : represents Controller's results to the user
** Layered Architecture
+ this is a standard in software development
+ software must respond to variety of requirements. this can't be done if our software is coupled and messy. so this standard was developed. it makes software open to new requirements
+ 3 pillars of Layered Architecture;
  1. Data Layer (database)
  2. Business Layer (UML / Logic)
  3. Presentation Layer (UI / UX)
*** data layer
this layer is responsible for data transmission between business layer and database.
#+begin_src text

    +----+          +------+          +----------+
    | DB | <------> | Data | <------> | Business |
    +----+   data   | Layer|   data   | Layer    |
                    +------+          +----------+

#+end_src
this layer manages different kind of tables like /user tables/, /report tables/, /general application tables/

*** business layer
operates retrieved data from data layer. basic CRUD operations or other application spesific logic, permissions works there

*** presentation layer
how user sees the results from business layer. this includes some User Interface Design thingies. user interface might be;
1. desktop form application
2. web
3. console

** NoSQL
+ NoSQL = "Not Only SQL"
+ it's a database but;
  a. uses XML or JSON instead of tables
  b. stores data into RAM instead of harddisk
** Turing Completeness
** CMS
** EmbOS
** HAL
+ hardware abstraction layer: this is a separation line between *firmware* and *software*
   [[file:./images/screenshot-70.png]]
** Interface
** late binding
** LGTM :abbriviation:
looks good to me

* Linux
** how to
*** manage dotfiles
**** create dotfiles
1. initialize git
#+begin_src sh
git init --bare $HOME/.dotfiles
#+end_src

2. add alias to your .bashrc
#+begin_src sh
alias dotfiles="/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME"
#+end_src

3. don't show untracked files since they are too much
#+begin_src sh
cd ~/.dotfiles
git config status.showUntrackedFiles no
#+end_src

4. source the .bashrs
#+begin_src sh
source ~/.bashrc
#+end_src

5. add your dotfiles
#+begin_src sh
dotfiles add $YOUR_DOTFILE
#+end_src

6. commit
#+begin_src sh
dotfiles commit
#+end_src

7. create a repository called *dotfiles* on *github*

8. essentials
#+begin_src sh
dotfiles branch -M main
dotfiles remote add origin https://github.com/savolla/dotfiles.git
dotfiles push -u origin main
#+end_src

**** restore dotfiles on a new system

1. install *stow*
#+begin_src sh
sudo pacman -S stow
#+end_src

2. clone your dotfiles from github
#+begin_src sh
git clone https://github.com/savolla/dotfiles.git ~/.dotfiles
#+end_src

3. restore your dotfiles
#+begin_src sh
cd ~/.dotfiles
stow *
#+end_src

*** see lastly modified 5 files
#+begin_src sh
ls -tl | head -n 5
#+end_src
*** pause a program
this can be usefull when you want to pause a running script or a program
1. find the process id and assign it to a variable
   #+begin_src sh
   PROCESS_ID=$(ps aux | grep -i $YOUR_PROCESS | grep -v grep | awk '{ print $2 }')
   #+end_src
2. pause the process.
   #+begin_src sh
   kill -STOP $PROCESS_ID
   #+end_src
3. process will stop. now you can bring it back to live with:
   #+begin_src sh
   kill -CONT $PROCESS_ID
   #+end_src

**** I have a better idea
let's add two functions in /.bashrc/ !
1. open up =~/.bashrc= then add the following
   #+begin_src sh
pause() {
   PROCESS_ID=$(ps aux | grep -i $1 | grep -v grep | awk '{ print $2 }')
   kill -STOP $PROCESS_ID
}

cont() {
   PROCESS_ID=$(ps aux | grep -i $1 | grep -v grep | awk '{ print $2 }')
   kill -CONT $PROCESS_ID
}
   #+end_src

2. refresh your =.bashrc=
   #+begin_src sh
source ~/.bashrc
   #+end_src
*** unfuck subtitles
#+begin_src bash
iconv -f iso-8859-9 bozuk-encoding.srt > turkce-encoding.srt
#+end_src
*** find all font names in system
    #+BEGIN_SRC bash
    fc-list
    #+END_SRC

*** set time and date
   #+BEGIN_SRC bash
   date +%Y%m%d -s "20120418" # date
   date +%T -s "11:14:00" # time
   #+END_SRC

*** zip files
   #+BEGIN_SRC bash
   zip -r $ARCHIVE_NAME.zip $DIRECTORY_TO_ZIP
   #+END_SRC

*** sync clock with network or set system clock
   #+BEGIN_SRC bash
   pacman -S ntp # install the service first
   systemctl enable ntpd.service # enable the service
   timedatectl set-ntp 1 # update clock
   hwclock --systohc
   systemctl start ntpd # start the service
   #+END_SRC

*** add a directory to $PATH
**** temporary
#+BEGIN_SRC bash
PATH=$PATH:/path/to/directory
export PATH
#+END_SRC
**** permanent
add the temporary commands into .bashrc or .zshrc
* Project Journal
** Library Automation in C# .NET Form
+ :conclusion: it turns out that a .NET project can have multiple forms
+ :howto: to add a new form to aproject;
  1. right click solution root
  2. =Add=
  3. =new item=
  4. select =form (windows form)=
  5. click =add=
+ :log: i renamed my newly created form "crud_ogrenciler"
+ :conclusion: visual studio makes it simple for renaming stuff projectwise
+ :log: i copyed and pasted buttons from the first menu to newly created form. so the user will think he is still in the same menu
+ :log: changed names of both forms to "Library Automation"
+ :conclusion: when i add an element and press 't', it directly focuses to properties menu and changes the *text* field. so I don't need to find a property every time from properties menu. I'll try other characters now
+ :conclusion: it is not about 't'. when i select any element from the form and press any key, it changes it's text area. it must be button, label etc
+ :log: added a line seperator below buttons. so it will look like a toolbar
+ :howto: adding a line seperator;
  1. add a *Label* control to your form.
  2. set *Label* Text to empty.
  3. set *BorderStyle* to Fixed3D.
  4. set *AutoSize* to false.
  5. set *size* to 800,2
+ :log: after button placement is done, I'll need to display retriewed results from the database (student and book database) inside form. I found a tutorial [[https://www.youtube.com/watch?v=RRmdwqHKN7A][here]] for this operation
+ :conclusion: gridview element let's us to enter, edit and delete data by default. so maybe I won't need separate add, edit and delete buttons
+ I paused and stopped building the view layer. beause it is unclear if something is going to work as I expected or not. I started to build the database now. and i realised that I suck too much in desktop applications. I don't design a database in my life. so I need a tutorial..
+

* Music
** recommendations :music:
:PROPERTIES:
:EXPORT_FILE_NAME: music-recommendations
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:EXPORT_TITLE: savolla's music recommendations
:END:
[[file:./images/screenshot-12.png]]
Here I made some album recommendations. this is my personal playlist which consists of very "non-normie" stuff. albums in this list will start with the most "normie" music and will incrementally get heavier
*** level 1
easier to digest and fun
+ [[https://tokyoroseofficial.com/album/chases-2][Tokyo Rose - Chases 2 ]]
[[file:./images/screenshot-14.png]]
  great synthwave album.. my favorite song on this is *midnight chase*
+ [[https://dancewiththedead.bandcamp.com/album/loved-to-death][Dance with the Dead - Loved to Death]]
[[file:./images/screenshot-15.png]]
  synthwave + some metal elements. great if you like distortion guitar riffs. this one includes *awesome* guitar solos. and the production is just incredible
+ [[https://alix2084.bandcamp.com/album/alix-2084-ep-2][ALIX 2084 (EP)]]
[[file:./images/screenshot-16.png]]
  directly jump to *Elevator Dance Party* song. great work and really underrated. those tempo changes will shake your brain inside
+ [[https://megadrive.bandcamp.com/album/hardwired-v14][Mega Drive - Hardwired V1.4]]
[[file:./images/screenshot-17.png]]
  *Dataline* *Dataline* *Dataline* !!
+ [[https://www.youtube.com/watch?v=Xw5AiRVqfqk][Aphex Twin - Selected Ambient Works 85-92]]
[[file:./images/screenshot-18.png]]
  legent album from a legend
+ [[https://plini.bandcamp.com/album/sweet-nothings][Plini - Sweet Nothings]]
[[file:./images/screenshot-19.png]]
  I bet this will be the sweetest thing you will ever listened. your ears will overflow with candies

*** level 2
still electronic but with some interesting elements
+ [[https://www.youtube.com/watch?v=OooYpuBd3gY][Heptaedium - "A M E N"]]
[[file:./images/screenshot-20.png]]
  did you ever listened to *break core*? edgy..
+ [[https://www.youtube.com/watch?v=nzvLiwUK3R8][Aphex Twin Live at Field Day]]
[[file:./images/screenshot-21.png]]
  did you ever experienced ear bleeding? just skip to 1:51:00 and wait.

*** level 3
still electronic but.. this time adding depression
+ [[https://boardsofcanada.bandcamp.com/album/twoism][Boards of Canada - Twoism]]
[[file:./images/screenshot-22.png]]
  this album might look harmless but wait until your soul evaporates completely
+ [[https://www.youtube.com/watch?v=PkVenDN7Y9A][Hrsta - Ghosts Will Come And Kiss Our Eyes]]
[[file:./images/screenshot-23.png]]
  don't listen to this if you lost someone recently
+ [[https://www.youtube.com/watch?v=szk5vGqPn2U][The LONGING - Original Soundtrack]]
[[file:./images/screenshot-24.png]]
  wait 400 days

*** level 4
dark ambient passage. contains some depressive and horror materials. you also might want to stop there and enjoy 1st, 2nd and 3rd levels because things get non-normie here
+ [[https://www.youtube.com/watch?v=ZKa5LwFgAOA][Gates of Morheim - Omagatoki]]
[[file:./images/screenshot-25.png]]
  contains ethnic sounds. it's like a ritual music + dark ambient elements
+ [[https://www.youtube.com/watch?v=g3xQCMDz5Vs][Kurotokage - Call To The Deep]]
[[file:./images/screenshot-27.png]]
  similar to Gates of Morheim but deeper and darker. this album will make you dizzy and tired
+ [[https://cryochamber.bandcamp.com/album/kapnobatai][Atrium Carceri - Kapnobatai]]
[[file:./images/screenshot-28.png]]
  things get serious and deep after this. especialy after the track called "A Stroll Through the Ancient City"
+ [[https://cryochamber.bandcamp.com/album/dubbed-in-black][Alt3r3d Stat3 - Dubbed in Black]]
[[file:./images/screenshot-29.png]]
  paranormal stuff

*** level 5
"guitars and drums" era begins but without vocals. gets heavier and heavier
+ [[https://www.youtube.com/watch?v=4z9X0htC3mg][Modern Day Babylon - Travelers]]
[[file:./images/screenshot-30.png]]
  my first djent album. this is the first metal album without vocals on this list
+ [[https://amoghsymphony.bandcamp.com/album/the-quantum-hack-code][Amogh Symphony - The Quantum Hack Code]]
  [[file:./images/screenshot-10.png]]
  awesome concept album. there are some Indian ethnic elements on that one. good one.
+ [[https://www.youtube.com/watch?v=qcpmtd-baKU][Heptaedium - KAWAII!!]]
[[file:./images/screenshot-31.png]]
  underrated stuff. has some djenty elements also inherits from *nintendo core* genre. really interesting album
+ [[https://www.youtube.com/watch?v=QlebB9SlrSs][Heptaedium - Underground Business]]
[[file:./images/screenshot-32.png]]
  have some edgy songs. heavier than the first one KAVAII!!
+ [[https://thehelixnebula.bandcamp.com/releases][The Helix Nebula - Meridian]]
[[file:./images/screenshot-33.png]]
  now we're talking..
+ [[https://www.youtube.com/watch?v=WngGXkLEJ0Y][Infant Annihilator - The Palpable Leprosy of Pollution]]
[[file:./images/screenshot-34.png]]
  this will beat the shit out of your ears..

*** level 6
vocals come to play. death metal, technical death metal stuff. list gets *heavier and heavier*.
+ [[https://www.youtube.com/watch?v=TTs9AUo5R3U][Dissonance In Design - Sentient ]]
[[file:./images/screenshot-35.png]]
  technical death metal album but without crazy riffs
+ [[https://konkeror.bandcamp.com/][Konkeror - The Abysmal Horizons]]
[[file:./images/screenshot-37.png]]
  just heavy.. skip to "Towers" song you'll get what i mean
+ [[https://www.youtube.com/watch?v=RL84JVt6sjs][Bloodbath - Live At Wacken 2005]]
[[file:./images/screenshot-38.png]]
  this is the best metal live performance
+ [[https://www.youtube.com/watch?v=St6lJaiHYIc][Edge of Sanity - Crimson]]
[[file:./images/screenshot-39.png]]
  this album contains only one song
+ [[https://www.youtube.com/watch?v=cOhEgg2jNSw][Bloodbath - Unblessing The Purity]]
[[file:./images/screenshot-40.png]]
  blasting the virginborn
+ [[https://www.youtube.com/watch?v=dm3i7fWufrw][Ouroboros - Glorification of a Myth]]
[[file:./images/screenshot-41.png]]
  fine album. lots of solos and great (hard to play) guitar riffs
+ [[https://www.youtube.com/watch?v=5-E4ZRZg2bY][Krallice - Diotima]]
[[file:./images/screenshot-42.png]]
  actual masterpiece. check *Telluric Rings* song if you still with me
+ [[https://www.youtube.com/watch?v=9MIHr_Ypql4][Krallice - Dimensional Bleedthrough]]
[[file:./images/screenshot-43.png]]
  I like those feedbacks man..
+ [[https://zenithpassage.bandcamp.com/album/cosmic-dissonance-remastered][The Zenith Passage - Cosmic Dissconance]]
[[file:./images/screenshot-44.png]]
  i don't know in which category should I put this album
+ [[https://www.youtube.com/watch?v=ShiEuQk5agg][Inferi - The Path of Apotheosis]]
[[file:./images/screenshot-45.png]]
  this is one of those albums when your entire body chills. guitars sound awesome and played by highly skilled musicians. those tremolo pickings man..
+ [[https://uniqueleaderrecords.bandcamp.com/album/dasein][First Fragment - Dasein]]
[[file:./images/screenshot-46.png]]
  this album contains some guitar techniques...
+ [[https://www.youtube.com/watch?v=_TfPd0jlavA][Rings of Saturn -  Embryonic Anomaly]]
[[file:./images/screenshot-47.png]]
  brain drill but with major scales
+ [[https://spawnofpossession.bandcamp.com/album/incurso][Spawn Of Possession - Incurso]]
[[file:./images/screenshot-48.png]]
  wait until "Bodiless Sleeper" song

*** level 7
deepest depths of hell..
+ [[https://www.youtube.com/watch?v=uXNHYb14U7U][Vital Remains - Icons of Evil]]
[[file:./images/screenshot-53.png]]
  extremely satanic and brutal. those harmonic minor scales will blow your mind. this album is the first one on this list because of it's melodic elements. next ones are not melodic anymore
+ [[https://severetorture.bandcamp.com/][Severe Torture - Slaughtered]]
[[file:./images/screenshot-49.png]]
  brutality takes another form
+ [[https://cryptopsyofficial.bandcamp.com/album/none-so-vile][Cryptopsy - None So Vile]]
[[file:./images/screenshot-50.png]]
  insane vocals and drums
+ [[https://www.youtube.com/watch?v=xGGK93eqAMo][Abominable Putridity - The Anomalies Of Artificial Origin]]
[[file:./images/screenshot-51.png]]
  Russians know that stuff.
+ [[https://www.youtube.com/watch?v=Uc-E9KODwpM][Extermination Dismemberment - Serial Urbicide]]
[[file:./images/screenshot-52.png]]
  heaviest thing i've ever heard
** blast beats
1. traditional blast
   [[file:./images/screenshot-03.png]]
2. hyper blast
   [[file:./images/screenshot-04.png]]
3. bomb blast
   [[file:./images/screenshot-05.png]]
4. pussy blast
   [[file:./images/screenshot-06.png]]
5. diarrhea blast
    [[file:./images/screenshot-07.png]]
* Book Notes
** Cracking the Coding Interview :book:
:PROPERTIES:
:EXPORT_FILE_NAME: cracking-the-coding-interview-notes
:EXPORT_TITLE: *Cracking the Coding Interview* Notes
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
Bu post'da Türkçe olarak /Cracking the Coding Interview/ kitabının özetini çıkartıyorum. Ilk ve ikinci bölümleri ingilizce yazdım, dert etmeyin onları revize edip Türkçeleştireceğim. Bu kitapta, iş başvurularında dikkat edilecek hususlar çok güzel anlatılmıştır. Ben de en azından özetini çıkararak önemli yerleri sizinle paylaşmaya karar verdim. İyi okumalar
[[file:./images/screenshot-56.png]]
*** Bölüm 1
+ recruiters look for the following;
  - analytical skills
    a. how *confidently* you solved the problem
    b. how *optimal* was your solution
    c. how *fast* you are
    d. how *efficient* was your algorithm
  - coding skills
    a. how *clean* your code is
    b. how *good* your *style* was
    c. did you *handle errors* or not
  - computer science knowledge. do you have *strong foundation* or not
  - did you make *challanging* / *interesting* projects before or not
  - do you *communicate well* or not
+ having knowledge of data structures and algorithms is really important and positively corelates with being a good developer
+ the reason behind *whiteboard coding* is that recruiters want you to focus on _actual problem solving_ instead of struggling in *restricted* computer environment when compilers spit errors all over the place. the code you write does not need to be perfect and it's okay if it contains some syntactical errors. just show to the interviewer how you approach to the problem and write an acceptable code
+ companies usually follow a pattern when selecting interview questions. there are two types of questions;
  1. algorithm questions
  2. technology questions (do you have experience with techonology X?)
+ interviewers always compare your performance to other's that came before and after you. even if you think that you performed well, a japanese hacker who came before you can change all the game. it's all about luck m8
+ don't think that you've been rejected immediately if you don't get response in 2-3 days. your interviewer might still work on your and other assessments. be patient and calm
+ if you've been rejected but really want that job you must wait for at least *6 months* before re-application.
*** Bölüm 2
+ before face-to-face interview you always get a *screen* interview. this is actually a phone interview where skype or relative apps are used
+ coding and algorithms questions are asked during the screen interview. questions are hard as ones that asked in face-to-face interview
+ sometimes interviewer might give you a *homework* which you solve and send the code through e-mail. (rare case)
+ the most of the time questions are asked in real time and you try to solve them while interviewer watches (common case)
+ you do one or two screens before they take you to face-to-face arena

*** Bölüm 3
+ aşağıdaki maddelerde, bazı _değişken_ durumlar anlatılmıştır;

  - görüşmeciler (interviewer) çok tecrübeli ve uzun süre çalışan geliştiricileri, daha düşük standartlarda görüp algoritmik soruları daha kolay sorabilir. ne de olsa bu insanlar mezun olalı yıllar olmuştur ve görüşmeciler, onların paslandıklarının farkındadırlar

  - bazı şirketlerde de tam tersi olabilir. yani uzun süre çalışanların daha çok problem çözdüğünü ve bu konuda yıllar geçtikçe daha iyi olduklarını düşünürler ve yeni mezunlara göre daha zor sorabilirler

  - çoğu zaman tecrübeli kişilere *system tasarımı* soruları gelirken yeni mezun olanlar bu konuda çalşma yapmadıkları için (daha çok akademik derslere ağırlık verdiklerinden) genelde bu sorulardan kurtulabilirler

  - yeni mezunlara göre tecrübelilerin, sorulara çok daha ayrıntılı cevap vermeleri beklenir. yani yeni mezunsak iş çok daha kolay. sadece algoritma sorularına çalışmamız (hackerrank, codewars) ve şu an zaman varken bol bol proje yapmamız yeterli olacaktır. tecrübelilerin iş bulması bizden daha zor

+ *skill atrophy*: bir yetenek ya da bilgi kullanılmadığında, o yeteneğin körelmesi anlamına gelir. bizim perspektifimizden bakıldığında, algoritma ve kodlama bir yetenektir ve asla atrofiye uğramaması gerekir

#+begin_quote
kitapta bu bölümde, SDET ve PM ile ilgili kariyer ve görüşme tavsiyeleri verilmiş. bu bizi şu anda ilgilendirmiyor.
#+end_quote

+ SDET: (software design engineer and tester) yazılımları test eden elemanlardır. bunların genelde normal bir developerdan daha iyi olması beklenir çünkü bu iş aynı zamanda *kalite kontrol*'ün yazılım camiasındaki karşılığıdır. bu yüzden bir SDET'in iş bulması demek, buraya kadar bahsi geçen pozisyonlardan daha çok çalışması gerek demek oluyor

+ PM (Product Manager): daha çok takım yönetimi yapan ve geliştiricilerin ürettiği yazılımın sorumluluğunu üstlenen elemandır. kod yazmaktan çok işin business tarafıyla ilgilenir

+ bir startup'a katılmak istiyorsan;

  - CV'de ilk göze çarpan kısmın, *yapılan projeler* olması gerekir. startup alım süreçlerinde CV incelemesi sırasında kişinin ne kadar *girişimci* ve programlama konusunda ne kadar *üretken* olduğu, bu kısımda göze çarpar. yani "ben şu dilleri biliyorum", "şu teknolojileri biliyorum"'a bakmazlar (genelde)

  - kesinlikle, bir startup görüşmecisiyle "samimi" ve "arkadaşça" iletişim kurulması gerekir. şirket henüz çok küçüktür ve insanlar yanlarında genelde takılabilecekleri insanlar arar. burada işin sosyal tarafı, iş tarafı kadar ağır basabilir

  - startup'daki projede kullanılan dil ile ilgili çok iyi bir derinliğe sahip ol çünkü sorular genelde dil spesifik gelir. (bir startup'a göre dil öğrenmek değil de bildiğimiz dilde iş yapan bir startup'a başvurmak çok daha efektif olur)

  - strtuplar tecrübe de isterler. buradan benim çıkarttığım, büyük şirketler, tecrübeli developerları görüşme esnasında çok hırpalarken, startuplarda genelde iş küçük olduğundan tecrübelileri havada kapıyor olabilirler. bu yüzden yeni mezun birinin büyük bir şirkette iş bulması, startup'da iş bulmasından daha kolaydır (?)

#+begin_quote
buradan sonrası, şirket içi iş görüşmelerinden ve interviewerlara tavsiyelerden bahsediyor. bizim için şu anlık önemli değil
#+end_quote






*** Bölüm 4
**** Tecrübe Kazanma Yolları
+ iyi bir tecrübe yoksa, iyi bir CV olmaz. iyi bir CV yoksa da kimse sizi iş görüşmesine çağırmaz
+ öğrenciler bakımından yukarıdaki sorunun çözümü;
  1. gerçek sorunlar çözen projeler yap
  2. staj yap
  3. startup ara
  4. boş zamanında bir proje yap,
  5. hackatonlara katıl,
  6. github'da open source bir projeye katkıda bulun
**** Iyi Bir CV Yazma Yolları
+ aslında şirketler birinde sadece şunları ararlar;
  1. *zeki misin?*
  2. *kod yazabilir misin?*
  CV'de yazanlar, bu iki şeyin kanıtı olmalıdır. şirketlere zeki ve çalışkan olduğunuzu katınladığınız anda işi kaparsınız
+ CV yazarken, odak noktası kesinlikle "zeki misin?" ve "kod yazabiliyor musun?" sorularına cevap vermeli. teknik olmayan şeyeri (hobi gibi) CV'ye eklemek çok akıllıca değildir
+ öğrencilerin ve 10 seneden az tecrübesi olan kişilerin CV'si _1 sayfa_ olmalıdır. data tecrübeliler _1.5 ya da 2 sayfa_ olmalıdır
+ uzun bir CV hiç bir zaman faydalı değildir çünkü iş verenler CV'ye bakarken en fazla 10 saniye harcarlar.
+ CV'ye sadece _sırasıyla_;
  1. en büyük projeleri
  2. en büyük tecrübeleri (iş tecrübesi, programlama dilleri)
  3. en büyük başarılarını
  yukarıdakilerden daha fazla şey yazmak, iş verenin sadece dikkatini dağıtır.
+ bazı işverenler, uzun CV gördüklerinde direk fırlatırlar..
+ CV her zaman İngilizce olmalıdır. her zaman ana dili ingilizce olan ya da bir tercumana okutup gramer ya da yazım yanlışlarınızı kontrol ettirin.
+ CV'de *yaş*, *cinsiyet*, *medeni durum* _belirtmeyin_. bunu yaparsanız, özellikle Amerika'da ters teper
***** Tecrübeler
+ eğer çok tecrübeliysen ve 1 sayfaya sığdıramıyorsan, 1 sayfaya sığdırmanın yollarını ara. ya da en önemsizleri ele. 1 sayfa *is the key*
+ tecrübe kısmında, iş geçmişinin tamamını yazmak önerilmez. çünkü çok iş değiştiren biri olarak görünürsün. onun yerine sadece en önemlileri yaz. her şirket isminin altına tek cümleyle ne yaptığını anlat. örnek bir cümle kalıbı;

  #+begin_quote
Y'yi yaparak X'i başardım
  #+end_quote
***** Projeler
+ proje kısmı, yaptığınız en büyük 2-4 projeden oluşmalı
+ projelerin açıklama kısmında;
  1. hangi dil ya da dillerle yazıldı
  2. hangi teknolojiler kullanıldı
  3. proje bir takım projesi mi? bir kurs yardımıyla mı yapıldı? kendin mi yaptın?
+ yukarıdaki her maddeye uyulması mecburi değildir. eğer maddeler sizi iyi gösteriyorsa o zaman belirtin.
+ 3. maddede, eğer projeyi bağımsız olarak tek başınıza yaptıysanız bunu belirtin. bu, iş verenler için takım projesi'nden daha değerlidir
+ çoğu insan CV'sine yaptığı bütün projeleri yazar ki bu iş verenleri yoran bir şey. maximum 4 proje yazın
***** Programlama Dilleri
+ bu güne kadar çalıştığınız bütün dilleri yazmaya kalkmayın
+ en iyi olduğunuz ve en iyi bildiğiniz dilleri yazın çünkü bir insan bütün dillerin tüm teknik detaylarını bilemez. abartılmış bir liste, iş verenin sizin hakkınızda pozitif düşünceler oluşturmaz
+ uzun dil listesine sahip adayları genelde iş görüşmesinde özellikle sınarlar ve normal bir listeye sahip birine nazaran çok daha zor sorular yöneltebilirler.
+ yetkinlik seviyenizi kabaca parantezler içinde belirtin. örnek bir liste;
  1. java (fluent)
  2. C++ (proficient)
  3. javascript (prior experience)
+ yetkinlik seviyesi için yıl yazmayın. 10 sene önce javascript öğrenip sadece bir kaç kere yazdıysanız bu gerçeten 10 yıllık bir tecrübe mi?
+ eğer bir sertifikanız varsa ve bu bir programlama diliyle alakalıysa kesinlikle CV'de buna yer vermeyin. iş verenler bu sertifikaları ciddiye almazlar
+ eğer bir dilin belli bir versiyonuyla ilgili tecrubeniz varsa mesela, C11, C99, Perl5 gibi, iş verenler kesinlikle bu tarz bir şeyi ciddiye almazlar. bunun yerine C ve Perl demek daha doğrudur. aslında bu tarz bir şey, yazılımcının dil konusunda ne kadar spesifik olduğunu gösterir ama çoğu şirket buna değer vermez
+ *stigma*: bir programlamma dilinin zaman içinde ön yargılara maruz kalıp değerini yitirmesidir. örnek olarak Visual Basic ve .NET teknolojileri. eğer .NET işine baş vurmuyorsanız, bu teknolojileri ve diğer stigma kazanmış (ön yargı kazanmış) dilleri ya da teknolojileri CV'de belirtmeye gerek yok
+ yukarıdaki maddeden yola çıkarak şirketlerin (özellikle Amerikadakilerin) önem verdikleri diller en az'dan en çoğa sıralanmıştır;

  1. C#, .NET, Visual Basic
  2. Ruby, Python, Javascript
  3. Java, C++

***** İş Başvurusuna Hazırlık Haritası
[[file:./images/screenshot-54.png]]
[[file:./images/screenshot-55.png]]

*** Bölüm 5
+ CV'de yazılan projeler incelenip genelde bu projelerle ilgili size soru yöneltilir. CV'yi inceleyen kişi, görüşmeden önce bu projelere ne kadar hakim olduğunuzu görmek için zor sorular hazırlayabilir.
+ CV'deki projeleri çok iyi çalşıp, şöyle bir tablo hazırlanması çok faydalı olacaktır;

  | yaygın soru             | proje1    | proje2    | proje3    |
  |-------------------------+-----------+-----------+-----------|
  | zorluklar/buglar        | --------- | --------- | --------- |
  | hatalar/başarısızlıklar | --------- | --------- | --------- |
  | keyif alınan taraflar   | --------- | --------- | --------- |
  | liderlik                | --------- | --------- | --------- |
  | çatışmalar (takım ise)  | --------- | --------- | --------- |
  | neyi farklı yapardın    | --------- | --------- | --------- |

+ bu tabloyu doldurup iyice çalış. iş veren projeler hakkında soru sordukça burda yazdıklarını hatırla ve cevapla
+ size "zayıf yanlarınız" nelerdir diye sorduklarında gerçek bir zayıflık söyleyin. "çok çalışmak" gibi cevaplar çok ciddiye alınmaz ve dürüst olmadığınızı düşündürür.
+ zayıflıklarınızdan bahsederken aynı zamanda bu zayıflıklarla nasıl başa çıkmaya çalıştığınızı da anlatmanız gerekir. örnek;

  #+begin_quote
  yeni bir projeye başladığımda çok hızlı burn out olabiliyorum. başa çıkmak için pomodoro tekniğini kullanıyorum
  #+end_quote

  #+begin_quote
  yeni bir teknolojiyi öğrenirken, kendimi bu konuda sonuna kadar gitmem gerektiğine inandırıyorum. bundan dolayı teknolojiye öğrenmeye odaklanmak yerine, kendimi en iyi kaynağı araştırmaya zaman harcarken bulabiliyorum. Bu konuda tecrübe kazandığım için artık çoğu kez yaptığım yanlışın farkına varabiliyorum
  #+end_quote

**** Interviewer'a Yöneltilebilecek Sorular
+ interviewer size soru sormanıza izin verebilir. bir iş görüşmesinde, 3 tip önemli soru çeşidi vardır;
***** Hakiki Sorular
cevaplarını gerçekten bilmek istediğiniz sorulardır
#+begin_quote
şirkette, geliştirici, tester ve yönetici dengesi nasıl? takımda proje planlaması nasıl yapılıyor?
#+end_quote
#+begin_quote
peki siz bu şirkete nasıl geldiniz? genelde bu çalışma ortamında sizi en çok zorlayan ne oluyor?
#+end_quote

***** Teknik Sorular
bu sorular genelde şirkete başvurmadan önce bayağı bir araştırdığınızı anlatır
#+begin_quote
gördüğüm kadarıyla X teknolojisini kullanıyorsunuz. bununla Y problemini nasıl çözüyorsunuz?
#+end_quote
#+begin_quote
yaptığınız ürün X teknolojisi yerine neden Y'yi seçti? Y'nin A,B,C konularında avantajları olduğunu biliyorum ancak diğer şirketler Y'yi D sorunu yüzünden kullanmıyorlar
#+end_quote

***** Çalışkanlık Yansıtan Sorular
bu tarz sorular iş verenin, sizin ne kadar azimli olduğunuzu görmesini ve şirket için faydalı olacağınızı düşünmesini sağlar
#+begin_quote
Yazılımın ölçeklenebilirliği konusunda kendimi geliştirmeye çalışıyorum. bu şirkette bu konuyla alakalı neler öğrenebilirim?
#+end_quote
#+begin_quote
Kullandığınız X teknolojisini daha önce hiç duymadım ancak çok ilginç bir yönteme benziyor. Nasıl çalıştığından biraz bahseder misiniz?
#+end_quote

**** Dikkat edilmesi gereken hususlar
+ projelerle ilgili konuşurken ya da sorular yöneltirken asla ama asla *kibirli* görünme. Kendini her zaman bir çaylakmışçasına *alçak gönüllü* ve *saygılı* olarak göster. /(genel olarak öyle ol zaten)/
+ görüşmeciler bu tarz çok insan ile karşılaştıklarından, artık insan sarrafı olma yolunda ilerliyorlardır. en ufak bir kibir belirtisinde çizerler
+ soruları cevaplarken, karşınızdakini detaya boğmayın. çok önemli noktalara değinin ve daha fazla detay gerektiren bir konuda, karşınızdakinden izin alıp öyle devam etmeye özen gösterin. çünkü gelen kişinin, teknik detaylardan ne kadar anladığını ya da duymaktan hoşlanıp hoşlanmadığını bilemezsiniz.
+ takım projesinde yer aldıysanız, takımın başarılarını anlatmak yerine kendinizin bu takımdaki başarılarınızdan bahsedin. çünkü takım ile ilgili konuşmalarınızda, sizin ne yaptığınız ile ilgili bir fikir oluşmaz
+ "kendininden biraz bahseder misiniz?" tarzı bir soru geldiğinde kronolojik sıraya gitmeye dikkat edin ve sırasıyla şunlardan bahsedin;
  1. Şu anda bir yerde çalışıyorsanız rol belirterek söze girin
  2. hangi okulda okudun ve hangi bölüm
  3. stajlar
  4. okuldan sonra ne yaptın
  5. iş dışında yaptığın projeler/çalışmalar
  6. şu anda neden burda olduğunu anlatarak toparla bitir
  hobilerden bahsetmek istersen bunu 5. maddede belirt ancak hobilerden bahsetmek bazen tehlikeli olabilir. dikkat et

*** Bölüm 6
**** Big O
+ içini dışını bilmezsen, kötü gözle bakarlar
+
** Object-Oriented Analysis and Design with Applications :book:
*** Bölüm 5
+ 2 tip UML diyagramı vardır;
  1. Structured Diyagramlar
  2. Behavioral Diyagramlar
+ structural diyagramlar: sistemin mimarisini gösteirler. static diyagramlardır
+ structural diyagramlar;
   [[file:./images/screenshot-57.png]]
+ behavior diyagramlar: sisteme giren çıkan sinyal/event/mesaj gibi unsurların gösterilmesini amaçlar
+ behavior diyagramlara örnekler;
   [[file:./images/screenshot-58.png]]
+ UML diyagramları kesinlikle kabataslak olmalıdır. fazla detay, yazılımcıyı kısıtlar ve UML'i yapan mimarın aynı zamanda yazılım geliştirme tarafını da düşünmesine sebep olur ki bu çok mantıklı bir şey değildir
**** package diyagramları
+ package diyagramları şu işe yarar;
  1. ortak amaca hizmet eden sınıfları gruplamak
  2. ortak amaca yönelik usecase'leri gruplamak
  3. şemanın daha derli toplu ve anlaşılır görünmesini sağlamak
+ örnek bir package diyagramı;
  [[file:./images/screenshot-62.png]]
  - *FileHandling* ve *Graphics* sınıfları *Utilities* package'ının içine konulmuş. Utility de Java altına
  - en aşağıdaki ise aslında bir sınıftır. ancak görsel olarak package içinde görünmese de isminin arkasındakiler *package*'dır
+ eğer sınıflar birbirine bağımlıysa bu bağımlılıklar _kesikli oklarla_ gösterilir;
  [[file:./images/screenshot-60.png]]
+ genelde birbirinden kalıtım alan sınıfları, bir package altına koyarız
***** visibility
+ bir package içinde public ve private sınıflar bulunabilir. private sınıfın bir package içinde yer alması demek, aynı package içinde bulunan tüm sınıflar tarafından kullanılabileceği, ancak package dışından erişilemeyeceği anlamına gelir
+ aşağıda *cruncher* sınıfı private'dir ve aynı package içindeki tüm sınıflar onu görebilir
  [[file:./images/screenshot-63.png]]
***** relationship
+ diğer UML elemanları gibi package'ler de izole olarak bulunmazlar. onların da bir şekilde ilişki kurmaları ve kullanılmaları gerekir
+ package'larda 3 tip ilişki (relation) vardır;
  1. dependency (bağımlılık)
  2. generalization
  3. refinement
+ dependency ilikisi, örneğin balık, suya ihtiyaç duyar. susuz yaşayamaz. buna bağımlılık diyoruz.
+ package arası bağımlılıklar kesikli çizgi ile gösterilir;
  [[file:./images/screenshot-64.png]]
+ generalization ise aslında kalıtım olarak çevrilebilir. örneğin balık aslında bir hayvandır.
+ packagelar arası generalization, şu şekilde gösterilir;
  [[file:./images/screenshot-65.png]]
**** component diyagramları
+ bir component, tekrar kullanılabilir (reusable) bütün bir program, kütüphane ya da bir framework'dür
+ componentler, içlerinde benzer bir iş yapan sınıflar barındırırlar. bu sınıflar tabiki package'larla ayrılmış da olabilir
+ özetle packagelar sınıfları, componentler de package'ları içine alabilir. bazen componentler, içine başka componentler bile alabilirler
+ componentler birbirine bir interface ile bağlıdır
  [[file:./images/screenshot-66.png]]
+ yukarıda component'lerin sağ üstündeki işaretler, component simgesidir. componentleri şu şekilde *stereotype* kullanarak da ifade edebiliriz;
  [[file:./images/screenshot-67.png]]
+ componentler *interface*'ler ile birbirlerine bağlanmak zorundadırlar. bu sayede istendiği zaman birbirlerinden kolayca ayrılabilirler
+ interface'lerin bir başka güzel tarafı da, componentlerden biri, daha iyi bir component ile birleştirilebilir. (tak çıkar)
+ yarım ay şeklinde gösterilen interface, *required interface* adını alır
  [[file:./images/screenshot-68.png]]
+ top şeklinde olan ise *provided interface* adını alır
  [[file:./images/screenshot-69.png]]
+
** Code Complete :book:
:PROPERTIES:
:EXPORT_FILE_NAME: code-complete-notes
:EXPORT_TITLE: Code Complete Notlarım
:HUGO_BASE_DIR: ~/txt/blog/
:HUGO_SECTION: en/posts
:EXPORT_AUTHOR: savolla
:END:
*** bölüm 1 - yazılım inşasına giriş
+ yazara göre, bu kitap, etrafa dağılmış bilginin bir yere toplanmış hali

+ *yazılım geliştirme* ve *programlama* aynı şey değildir

+ *yazılım inşası*, yazılım geliştirme alanındaki bazı konuları içinde barındıran özelleşmiş bir alt daldır. yazılım inşası'nın (construction) dokunuğu dallar:

  1. coding and debugging
  2. unit testing
  3. detailed design
  4. integration
  5. construction planning

+ construction terimi, *programlama* termine benzemektedir.

+ construction'ın yazılım konusunda yaptığı işler:

  1. kodun temelini oturtmak
  2. kodun nasıl test edileceğini belirlemek
  3. sınıfları tasarlama ve yazmak
  4. değişkenleri oluşturmak ve isimlendirmek
  5. kontrol yapılarının seçimi ve kod bloklarının organizasyonunu sağlamak
  6. unit test, integrasyon test ve debug yapmak
  7. varsa diğer takım üyelerinin kodunu incelemek ve kendi kodunun incelemesine izin vermek
  8. koda yorum satırı eklemek ve dikkatli bir şekilde organize etmek/formatlamak
  9. üçüncü parti yazılımları, koda entegre etme
  10. koda ince ayar yaparak daha hızlı çalışmasını ve daha az memory yemesini sağlamak

+ construction'ın dışında kalan alanlar

  1. yönetim
  2. gereksinim geliştirme
  3. yazılım mimarisi
  4. kullanıcı arayüzü tasarımı
  5. sistem testi

+ construction, boyuta bağlı olarak, bir yazılım projesinin %30 veya %80'ini kaplayabilir

+ mimari ve gereksinimler, construction'dan önce gerçekleşen şeylerdir. bu sayede construction çok daha hızlı ve verimli bir şekilde ilerler

+ kaynak kodu, construction evresinin bir ürünüdür. zamanla beraber, gereksinim ve dizayn dökümanları güncelliğini yitirse dahi kaynak kodu her zaman güncel kalır.

*** bölüm 2 - yazılım geliştirme metaforları
+ çok iyi anlamadığımız şeyleri bazen çok iyi bildiğimiz bir şeylerle ilişkilendirdiğimizde yani *metafor* kullandığımızda, olayı *modellemiş* oluruz ve daha iyi anlamış oluruz

+ kitapta yazılım geliştirme için kullanılan metafor ise *ev inşaatı*

+ mesela köpeğin için bir kulube yapmaya kalkarsak, ihtiyacımız olan sadece bir kaç tahta ve çivi. kulube bittiğinde eğer bir şeyleri yanlış yaptıysak, bu çok büyük bir sorun teşkil etmez. ya var olan kulubeyi alıp üzerinde oynamalar yaparak düzeltiriz ya da onun yerine yeni bir kulube yapabiliriz.

+ yukarıdaki metafor, yazdığımız küçük kodlar/projeler için de geçerlidir. program düzgün çalışmıyorsa ya üstünde oynama yapar düzeltmeye çalışırız ya da sil baştan yeni bir tane yazarız

+ daha büyük bir ev yapmak istediğimizde ise metaforu genişletmemiz gerekir:

  1. nasıl bir ev yapmak istiyoruz? : *problemi anlamak*
  2. mimar bir tasarım yapar : *yazılım mimari dizaynı*
  3. evin planının çıkarılması : *detaylı yazılım tasarımı*
** Dive Into Design Patterns :book:
*** Factory Pattern
** Domain Driven Design
*** Bölüm 0
+ yazılım'ı asıl karmaşık yapan şey kod ya da yanlış tasarım değildir. asıl karmaşaya neden olan, insanın kendi iş sistemidir. yazılım sadece bu iş sistemini yazılımlaştırıp otomatize etmeye yarar.
+ bu iş/meslek dallarına kısaca *domain* diyoruz
+ yazılımdaki karmaşanın azaltılması için asıl yapılması gereken şey, mevcut domain'in çok iyi modellenmesidir
+ bu kitap, karmaşık domainlerde yazılım geliştirmeye çalışan yazılımcılara bir kaynak şeklinde yazılmıştır. domainlere yaklaşırken, adım adım ne yapmaları gerektiği anlatılmıştır
*** Bölüm 1
** Reading List to Become a Professional
***** Job Interview Prep
1. Cracking the Coding Interview: 189 Programming Questions and Solutions
2. Programming Interviews Exposed: Coding Your Way Through the Interview
3. Introduction to Algorithms
4. The Algorithm Design Manual
5. Effective Java
6. Concurrent Programming in Java: Design Principles and Pattern
7. Modern Operating Systems
8. Programming Pearls
9. Discrete Mathematics for Computer Scientists
***** Junior Software Engineer Reading List
****** Read This First
1. Pragmatic Thinking and Learning: Refactor Your Wetware
****** Fundementals
1. Code Complete 2
2. Software Estimation: Demystifying the Black Art
3. Software Engineering: A Practitioner's Approach
4. Refactoring: Improving the Design of Existing Code
5. Coder to Developer: Tools and Strategies for Delivering Your Software
6. Perfect Software: And Other Illusions about Testing
7. Getting Real: The Smarter, Faster, Easier Way to Build a Successful Web Application
8. Understanding Professional Software Environments
9. Agile Software Development: The Cooperative Game
10. Software Project Survival Guide
11. The Best Software Writing I: Selected and Introduced by Joel Spolsky
12. Debugging the Development Process: Practical Strategies for Staying Focused, Hitting Ship Dates, and Building Solid Teams
13. Rapid Development: Taming Wild Software Schedules
14. Peopleware: Productive Projects and Teams
****** Mentality
1. Slack: Getting Past Burnout, Busywork, and the Myth of Total Efficiency
2. Against Method
3. The Passionate Programmer: Creating a Remarkable Career in Software Development

****** History
1. The Mythical Man-Month: Essays on Software Engineering
2. Computing Calamities: Lessons Learned from Products, Projects, and Companies That Failed
3. The Deadline: A Novel About Project Management

***** Mid Level Software Engineer Reading List
****** Read This First
1. Personal Development for Smart People: The Conscious Pursuit of Personal Growth

****** Fundementals
1. The Clean Coder: A Code of Conduct for Professional Programmers
2. Clean Code: A Handbook of Agile Software Craftsmanship
3. Solid Code
4. Code Craft: The Practice of Writing Excellent Code
5. Software Craftsmanship: The New Imperative
6. Writing Solid Code

****** Software Design
1. Head First Design Patterns: A Brain-Friendly Guide
2. Design Patterns: Elements of Reusable Object-Oriented Software
3. Domain-Driven Design: Tackling Complexity in the Heart of Software
4. Domain-Driven Design Distilled
5. Design Patterns Explained: A New Perspective on Object-Oriented Design
6. Design Patterns in C# - Even though this is specific to C# the pattern can be used in any OO language.
7. Refactoring to Patterns

****** Software Engineering Skill Sets
1. Building Microservices: Designing Fine-Grained Systems
2. Software Factories: Assembling Applications with Patterns, Models, Frameworks, and Tools
3. NoEstimates: How To Measure Project Progress Without Estimating
4. Object-Oriented Software Construction
5. The Art of Software Testing
6. Release It!: Design and Deploy Production-Ready Software
7. Working Effectively with Legacy Code
8. Test Driven Development: By Example

****** Databases
1. Database System Concepts
2. Database Management Systems
3. Foundation for Object / Relational Databases: The Third Manifesto
4. Refactoring Databases: Evolutionary Database Design
5. Data Access Patterns: Database Interactions in Object-Oriented Applications

****** User Experience
1. Don't Make Me Think: A Common Sense Approach to Web Usability
2. The Design of Everyday Things
3. Programming Collective Intelligence: Building Smart Web 2.0 Applications
4. User Interface Design for Programmers
5. GUI Bloopers 2.0: Common User Interface Design Don'ts and Dos

****** Mentality
1. jThe Productive Programmer
2. jExtreme Programming Explained: Embrace Change
3. jCoders at Work: Reflections on the Craft of Programming
4. jFacts and Fallacies of Software Engineering

****** History
1. Dreaming in Code: Two Dozen Programmers, Three Years, 4,732 Bugs, and One Quest for Transcendent Software
2. New Turning Omnibus: 66 Excursions in Computer Science
3. Hacker's Delight
4. The Alchemist
5. Masterminds of Programming: Conversations with the Creators of Major Programming Languages
6. The Information: A History, A Theory, A Flood

****** Specialist Skills
1. Peter Norton's Assembly Language Book for the IBM PC
2. Expert C Programming: Deep C Secrets
3. Enough Rope to Shoot Yourself in the Foot: Rules for C and C++ Programming
4. The C++ Programming Language
5. Effective C++: 55 Specific Ways to Improve Your Programs and Designs
6. More Effective C++: 35 New Ways to Improve Your Programs and Designs
7. More Effective C#: 50 Specific Ways to Improve Your C#
8. CLR via C#
9. Mr. Bunny's Big Cup o' Java
10. Thinking in Java
11. JUnit in Action
12. Functional Programming in Scala
13. The Art of Prolog: Advanced Programming Techniques
14. The Craft of Prolog
15. Programming Perl: Unmatched Power for Text Processing and Scripting
16. Dive into Python 3

***** Senior Level Software Engineer Reading List
****** Read This First
1. Mastery: The Keys to Success and Long-Term Fulfillment

****** Fundamentals
1. Patterns of Enterprise Application Architecture
2. Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions
3. Enterprise Patterns and MDA: Building Better Software with Archetype Patterns and UML
4. Systemantics: How Systems Work and Especially How They Fail
5. Rework
6. Writing Secure Code
7. Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries

****** Development Theory
1. Growing Object-Oriented Software, Guided by Tests
2. Object-Oriented Analysis and Design with Applications
3. Introduction to Functional Programming
4. Design Concepts in Programming Languages
5. Code Reading: The Open Source Perspective
6. Modern Operating Systems
7. Extreme Programming Explained: Embrace Change
8. The Elements of Computing Systems: Building a Modern Computer from First Principles
9. Code: The Hidden Language of Computer Hardware and Software

****** Philosophy of Programming
1. Making Software: What Really Works, and Why We Believe It
2. Beautiful Code: Leading Programmers Explain How They Think
3. The Elements of Programming Style
4. A Discipline of Programming
5. The Practice of Programming
6. Computer Systems: A Programmer's Perspective
7. Object Thinking
8. How to Solve It by Computer
9. 97 Things Every Programmer Should Know: Collective Wisdom from the Experts

****** Mentality
1. Hackers and Painters: Big Ideas from the Computer Age
2. The Intentional Stance
3. Things That Make Us Smart: Defending Human Attributes In The Age Of The Machine
4. The Back of the Napkin: Solving Problems and Selling Ideas with Pictures
5. The Timeless Way of Building
6. The Soul Of A New Machine
7. WIZARDRY COMPILED
8. YOUTH
9. Understanding Comics: The Invisible Art

****** Software Engineering Skill Sets
1. Software Tools
2. UML Distilled: A Brief Guide to the Standard Object Modeling Language
3. Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and Iterative Development
4. Practical Parallel Programming
5. Past, Present, Parallel: A Survey of Available Parallel Computer Systems
6. Mastering Regular Expressions
7. Compilers: Principles, Techniques, and Tools
8. Computer Graphics: Principles and Practice in C
9. Michael Abrash's Graphics Programming Black Book
10. The Art of Deception: Controlling the Human Element of Security
11. SOA in Practice: The Art of Distributed System Design
12. Data Mining: Practical Machine Learning Tools and Techniques
13. Data Crunching: Solve Everyday Problems Using Java, Python, and more.

****** Design
1. The Psychology Of Everyday Things
2. About Face 3: The Essentials of Interaction Design
3. Design for Hackers: Reverse Engineering Beauty
4. The Non-Designer's Design Book

****** History
1. Micro-ISV: From Vision to Reality
2. Death March
3. Showstopper! the Breakneck Race to Create Windows NT and the Next Generation at Microsoft
4. The PayPal Wars: Battles with eBay, the Media, the Mafia, and the Rest of Planet Earth
5. The Business of Software: What Every Manager, Programmer, and Entrepreneur Must Know to Thrive and Survive in Good Times and Bad
6. In the Beginning...was the Command Line

****** Specialist Skills
1. The Art of UNIX Programming
2. Advanced Programming in the UNIX Environment
3. Programming Windows
4. Cocoa Programming for Mac OS X
5. Starting Forth: An Introduction to the Forth Language and Operating System for Beginners and Professionals
6. lex & yacc
7. The TCP/IP Guide: A Comprehensive, Illustrated Internet Protocols Reference
8. C Programming Language
9. No Bugs!: Delivering Error Free Code in C and C++
10. Modern C++ Design: Generic Programming and Design Patterns Applied
11. Agile Principles, Patterns, and Practices in C#
12. Pragmatic Unit Testing in C# with NUnit

***** DevOps Reading List
1. Time Management for System Administrators: Stop Working Late and Start Working Smart
2. The Practice of Cloud System Administration: DevOps and SRE Practices for Web Services
3. The Practice of System and Network Administration: DevOps and other Best Practices for Enterprise IT
4. Effective DevOps: Building a Culture of Collaboration, Affinity, and Tooling at Scale
5. DevOps: A Software Architect's Perspective
6. The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations
7. Site Reliability Engineering: How Google Runs Production Systems
8. Cloud Native Java: Designing Resilient Systems with Spring Boot, Spring Cloud, and Cloud Foundry
9. Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation
10. Migrating Large-Scale Services to the Cloud

***** Entrepreneur Reading List
1. Disrupted: My Misadventure in the Start-Up Bubble
2. The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win
3. The E-Myth Revisited: Why Most Small Businesses Don't Work and What to Do About It
4. The Art of the Start: The Time-Tested, Battle-Hardened Guide for Anyone Starting Anything
5. The Four Steps to the Epiphany: Successful Strategies for Products that Win
6. Permission Marketing: Turning Strangers into Friends and Friends into Customers
7. Ikigai
8. Reality Check: The Irreverent Guide to Outsmarting, Outmanaging, and Outmarketing Your Competition
9. Bootstrap: Lessons Learned Building a Successful Company from Scratch
10. The Marketing Gurus: Lessons from the Best Marketing Books of All Time
11. Content Rich: Writing Your Way to Wealth on the Web
12. The Web Startup Success Guide
13. The Best of Guerrilla Marketing: Guerrilla Marketing Remix
14. From Program to Product: Turning Your Code into a Saleable Product
15. This Little Program Went to Market: Create, Deploy, Distribute, Market, and Sell Software and More on the Internet at Little or No Cost to You
16. The Secrets of Consulting: A Guide to Giving and Getting Advice Successfully
17. The Innovator's Solution: Creating and Sustaining Successful Growth
18. Startups Open Sourced: Stories to Inspire and Educate
19. In Search of Stupidity: Over Twenty Years of High Tech Marketing Disasters
20. Do More Faster: TechStars Lessons to Accelerate Your Startup
21. Content Rules: How to Create Killer Blogs, Podcasts, Videos, Ebooks, Webinars (and More) That Engage Customers and Ignite Your Business
22. Maximum Achievement: Strategies and Skills That Will Unlock Your Hidden Powers to Succeed
23. Founders at Work: Stories of Startups' Early Days
24. Blue Ocean Strategy: How to Create Uncontested Market Space and Make Competition Irrelevant
25. Eric Sink on the Business of Software
26. Words that Sell: More than 6000 Entries to Help You Promote Your Products, Services, and Ideas
27. Anything You Want
28. Crossing the Chasm: Marketing and Selling High-Tech Products to Mainstream Customers
29. The Innovator's Dilemma: The Revolutionary Book that Will Change the Way You Do Business
30. Tao Te Ching
31. Philip & Alex's Guide to Web Publishing
32. The Tao of Programming
33. Zen and the Art of Motorcycle Maintenance: An Inquiry into Values
34. The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity

***** Computer Science Grad School Reading List
1. All the Mathematics You Missed: But Need to Know for Graduate School
2. Introductory Linear Algebra: An Applied First Course
3. Introduction to Probability
4. The Structure of Scientific Revolutions
5. Science in Action: How to Follow Scientists and Engineers Through Society
6. Proofs and Refutations: The Logic of Mathematical Discovery
7. What Is This Thing Called Science?
8. The Art of Computer Programming
9. The Little Schemer
10. The Seasoned Schemer
11. Data Structures Using C and C++
12. Algorithms + Data Structures = Programs
13. Structure and Interpretation of Computer Programs
14. Concepts, Techniques, and Models of Computer Programming
15. How to Design Programs: An Introduction to Programming and Computing
16. A Science of Operations: Machines, Logic and the Invention of Programming
17. Algorithms on Strings, Trees, and Sequences: Computer Science and Computational Biology
18. The Computational Beauty of Nature: Computer Explorations of Fractals, Chaos, Complex Systems, and Adaptation
19. The Annotated Turing: A Guided Tour Through Alan Turing's Historic Paper on Computability and the Turing Machine
20. Computability: An Introduction to Recursive Function Theory
21. How To Solve It: A New Aspect of Mathematical Method
22. Types and Programming Languages
23. Computer Algebra and Symbolic Computation: Elementary Algorithms
24. Computer Algebra and Symbolic Computation: Mathematical Methods
25. Commonsense Reasoning
26. Using Language
27. Computer Vision
28. Alice's Adventures in Wonderland
29. Gödel, Escher, Bach: An Eternal Golden Braid

* Foreign Languages
** English
*** unknown words
1. =acommodation=            konaklama
2. =across=                  karşısında
3. =adhare=                  bağlı
4. =advantage=               avantaj
5. =allude=                  ima etmek
6. =ambition=                hırs
7. =annually=                yıllık
8. =arrogance=               kibir
9. =aside=                   bir kenara
10. =aspect=                 yön (kitap her *yön*'den iyidi)
11. =assessing=              değerlendirmek
12. =attic=                  çatı katı
13. =audible=                duyulabilir
14. =bottleneck=             darboğaz
15. =boundary=               sınır
16. =brittle=                kırılgan
17. =cater=                  sağlamak
18. =certain=                belli
19. =coherent=               tutarlı
20. =comprehencive=          kapsamlı
21. =comprise=               içermek
22. =concise=                özlü, kısa
23. =concrete=               beton
24. =condense=               condense
25. =conductor=              iletken
26. =conservative=           muhafazakar
27. =consideration=          düşünce
28. =constitute=             oluşturmak
29. =constraint=             kısıtlama
30. =contenteditable=        memnun
31. =convey=                 iletmek
32. =crook=                  hırsız
33. =curated=
34. =deafening=              sağır edici
35. =dedicated=              adanmış
36. =delimeter=              sınırlayıcı
37. =depics=                 ifade etmek, göstermek
38. =depict=                 göstermek
39. =differing=              farklı
40. =diligence=              çalışkanlık
41. =discourse=              söyleşi
42. =dispatch=               sevk etmek
43. =ease off=               gevşemek, hafiflemek
44. =emerge=                 ortaaya çıkmak
45. =entrepreneurial=        girişimci
46. =estate=                 arazi
47. =estimate=               tahmin
48. =evidently=              belli ki
49. =excerpt=                alıntı
50. =exhibiting=             sergilemek
51. =expose=                 maruz kalma
52. =facade=                 cephe (evin dış cehesi)
53. =faul=                   faul
54. =fellow=                 adam (?)
55. =fluency=                akıcılık
56. =forward=                ileri
57. =frontier=               sınır
58. =fuzzy=                  belirsiz
59. =genuine=                gerçek, hakiki
60. =gestate=                gebelik
61. =go round=               dolaşmak
62. =hardboard=              sunta
63. =headed=                 başlı
64. =hinder=                 engellemek
65. =houseing-department=    konut-bölüm
66. =however=                ancak
67. =however=                ancak
68. =idiom=                  deyim
69. =inextricable=           içinden çıkılmaz
70. =initiative=             girişim
71. =insulator=              yalıtkan
72. =intermingling=          birbirine karıştırmak
73. =intern=                 asistan
74. =intimately=             yakından
75. =intricacy=              karmaşa
76. =intuitive=              sezgisel
77. =judiciously=            akıllıca
78. =lattice=                kafes
79. =lawn=                   çim
80. =letter box=             mektup kutusu
81. =loan=                   kredi
82. =masquarading=           maskelemek
83. =mud=                    çamur
84. =muffled=                örtülü
85. =occasionally=           bazen
86. =oppurtunity=            fırsat
87. =ossify=                 kemikleşmek
88. =outlined=               özetlenen
89. =persuade=               ikna etmek
90. =pinnacle=               çukur
91. =pins out=               iğnelemek
92. =precise=                kesin
93. =precise=                kesin
94. =precisely=              kesin olarak
95. =predicate=              yüklem
96. =premise=                öncül
97. =prescient=              ileri görüşlü
98. =prethora=               bolluk
99. =privilege=              ayrıcalık
100. =profound=              derin (konu olarak)
101. =prominent=             belirgin
102. =proposal=              öneri
103. =query=                 sorgu
104. =quintessentially=      özetle
105. =recipient=             alıcı
106. =relational=            bağlantılı
107. =relevance=             alaka
108. =responsive=            duyarlı
109. =retrieve=              geri almak
110. =rigorous=              titiz
111. =rigorously=            titizlikle
112. =rough=                 kaba
113. =rough=                 kaba
114. =row=                   sıra (matrisin satırı)
115. =scruple=               vicdan
116. =seldom=                nadiren
117. =semblance=             görünüş
118. =several=               birkaç
119. =shrug=                 omuz silkmek
120. =snuggle=               sokulmak
121. =stairway=              merdiven
122. =statement=             ifade
123. =stitch=                dikiş/dikmek
124. =subsequent=            sonraki
125. =superstition=          batıl inanç
126. =supervisor=            gözetmen/yönetici
127. =suppress=              bastırmak
128. =surgeon=               cerrah
129. =tenet=                 ilke
130. =therefore=             bu nedenle
131. =thesaurus=             eş anlamlılar sözlüğü
132. =trailed=               izledi
133. =unbolted=              sürgüsü açılmış
134. =uncharted=             keşvedilmemiş
135. =unconventional=        alışılmadık
136. =undertaken=            üstlenilen
137. =unselfish=             özverili
138. =venue=                 buluşma yeri
139. =vivid=                 canlı
140. =vocabulary=            kelime bi+ gisi
141. =walkway=               yürüyüş yolu
142. =wrap up=               sarmak (ambalajlamak anlamında)
** Русский
*** неизвестные слова
* Schedule
** 06:06 :morning_ritual:
*** stretch
- neck
- arms
- legs
*** vocabulary
**** english
- memorize unknown words in notitia
**** russian
- memorize unknown words in notitia
**** japan
***** hiragana
- [[https://drlingua.com/japanese/games/kana-bento/][play this]]
***** katakana
- [[https://drlingua.com/japanese/games/kana-bento/][play this]]
***** kanji
- learn 3 kanjies
- draw each kanji
- repeat learned kanjies
*** flash cards drill
**** regex
**** algorithms
**** data structures
** 07:07 :work:
*** embedded systems
**** electronics
***** read one chapter
=NOTE= review notes first
- [ ] the art of electronics
- [ ] digital fundamentals floyd
- [ ] hardware design know it all
**** software
***** read one chapter
- [ ] making embedded systems
- [ ] programming embedded systems
- [ ] the art of concurrency
- [ ] embedded-primer
**** Qt
***** read one chapter
- learning Qt
**** video course
***** FastBit
- [-] embedded C
- [ ] cortex m4
- [ ] microcontrollers 1
- [ ] microcontrollers 2
- [ ] RTOS
- [ ] DMA
- [ ] bootloader
- [ ] embedded linux
- [ ] linux device drivers
***** Quantum Leaps
- [ ] lesson 0
- [ ] lesson 1
- [ ] lesson 2
- [ ] lesson 3
- [ ] lesson 4
- [ ] lesson 5
- [ ] lesson 6
- [ ] lesson 7
- [ ] lesson 8
- [ ] lesson 9
- [ ] lesson 10
- [ ] lesson 11
- [ ] lesson 12
- [ ] lesson 13
- [ ] lesson 14
- [ ] lesson 15
- [ ] lesson 16
- [ ] lesson 17
- [ ] lesson 18
- [ ] lesson 19
- [ ] lesson 20
- [ ] lesson 21
- [ ] lesson 22
- [ ] lesson 23
- [ ] lesson 24
- [ ] lesson 25
- [ ] lesson 26
- [ ] lesson 27
- [ ] lesson 28
- [ ] lesson 29
- [ ] lesson 30
- [ ] lesson 31
- [ ] lesson 32
- [ ] lesson 33
- [ ] lesson 34
- [ ] lesson 35
- [ ] lesson 36

*** programming language
**** C
***** read one chapter
- The C programming Language
- Learn C the Hard Way
- Practical C
- Understanding and Using C Pointers
- deep C secrets
***** codewars kata
- review notes
- solve kata
***** video lectures
- [[https://www.youtube.com/watch?v=ypG9W33LOTk&list=PLfqABt5AS4FmErobw8YyTwXDUE5nPH5lH][Code Vault]]
**** C++
***** read one chapter
- C++ Primer (bone book)
- Object Oriented Programming in C++ by Robert Lafore
- Effective C++
***** codewars kata
- review notes
- solve kata
**** Rust
***** read one chapter
- embedded rust discovery
- the embedded rust book
- the embedonomicon
***** codewars kata
- review notes
- solve kata
**** ARM
***** read one chapter
- arm assembly language
- arm baremetal ebook
***** codewars kata
- review notes
- solve a kata
** 10:10 :break:
- walk the doggo
*** workoup when back
  - [ ] chest day
  - [ ] arm day
  - [ ] leg day
  - [ ] off day
** 12:12 :lunch:
** 13:13 :work:
- enable *air-plane mode* in phone
- No Youtube
- work on current daily tasks like lectures, projects etc
** 17:17 :break:
*** jamming
- jam through backing tracks on youtube
*** gaming
**** retroarch
- [ ] ninja gaiden III
- [ ] Super Mario 3
- [ ] Super Mario 2
**** path of exile
*** other
** 17:47 :study:
*** software engineering
**** read one chapter
- [-] dive into design patterns
- [-] domain driven design
- [ ] dive into refactoring
- [ ] clean code
- [ ] code complete
- [ ] object oriented analysis and design
- [ ] working effectively with legacy code
** 21:21 :finish:
*** reading
- outliers
- siddhardtha
- semerkant
- yer altından notlar
- bir delinin anı defteri
- zor kişiliklerle yaşamak
*** watch movie
